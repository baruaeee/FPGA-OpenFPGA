-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 5.1 (Build Build 176 10/26/2005)
-- Created on Thu Apr 13 13:39:28 2006

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

--  Entity Declaration

ENTITY PCM3006 IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		CLK : IN STD_LOGIC;
		RIGHT_IN : IN STD_LOGIC_VECTOR(15 downto 0);
		LEFT_IN : IN STD_LOGIC_VECTOR(15 downto 0);
		LOAD : IN STD_LOGIC;
		DOUT : IN STD_LOGIC;
		DIN : OUT STD_LOGIC;
		BCKOUT : OUT STD_LOGIC;
		LRCOUT : OUT STD_LOGIC;
		LEFT_OUT : OUT STD_LOGIC_VECTOR(15 downto 0);
		RIGHT_OUT : OUT STD_LOGIC_VECTOR(15 downto 0);
		NEW_SAMPLE : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END PCM3006;


--  Architecture Body

ARCHITECTURE PCM3006_architecture OF PCM3006 IS

SIGNAL NEW_COUNT,COUNT : UNSIGNED (7 DOWNTO 0);		-- 0 TO 255

SIGNAL LR_SYNC,LRCOUT_INT,NEGEDGE_BCK,POSEDGE_BCK,NEW_BCKOUT,BCKOUT_INT,NEW_LRCOUT : STD_LOGIC;							

SIGNAL R_IN,L_IN : STD_LOGIC_VECTOR (15 DOWNTO 0);
SIGNAL SHIFTOUT : STD_LOGIC_VECTOR (31 DOWNTO 0);
SIGNAL SHIFTIN : STD_LOGIC_VECTOR (31 DOWNTO 0);
SIGNAL NEW_BCK_TIMER,BCK_TIMER : UNSIGNED (4 DOWNTO 0);

BEGIN
LRCOUT<=LRCOUT_INT;
BCKOUT<=BCKOUT_INT;
DIN <= SHIFTOUT (31);

SYNC : PROCESS (CLK)				-- UPDATE BCKOUT AND LRC SYNCHRONOUS AND KEEP TRACK OF CLOCKPULSES
BEGIN
  IF (CLK'EVENT AND CLK='1') THEN
    COUNT<=NEW_COUNT;			    --  
    BCKOUT_INT <=NEW_BCKOUT;		-- BIT NR.4 BCKPERIOD IS 16 CLK-CYCLES (8 CYCLES '1', 8 CYCLES'0')
    LRCOUT_INT<=NEW_LRCOUT;
  END IF;
END PROCESS;

LR_SYNC <= NEW_LRCOUT XOR LRCOUT_INT;				-- INDICATE A CHANGE IN LRCOUT. 

NEGEDGE_BCK <= (NOT NEW_BCKOUT) AND BCKOUT_INT;		-- NEGEDGE IS '1' AT NEGATIVE EDGE OF BCK
POSEDGE_BCK <= NEW_BCKOUT AND (NOT BCKOUT_INT);		-- POSEDGE IS '1' AT POSITIVE EDGE OF BCK

NEW_LRCOUT <= NEW_COUNT(7);							-- DETERMINE THE NEXT LRC-STATE (LRC-freq = CLK=freq /256 = 48kHz)
NEW_COUNT<=(COUNT+1)MOD 256;						-- ROLL-OVER AT 256
NEW_BCKOUT <= NEW_COUNT(2);							-- BCK_OUT-frequency is CLK-frequency / 8, therefore 32 clocks per 48kHz

SHIFT_IN_PROC : PROCESS(CLK)
BEGIN
  IF (CLK'EVENT AND CLK='1') THEN
    IF (POSEDGE_BCK='1') THEN
		SHIFTIN <= SHIFTIN (30 DOWNTO 0) & DOUT;
    END IF;
  END IF;
END PROCESS;

SHIFT_PROC : PROCESS (CLK)
BEGIN
  IF (CLK'EVENT AND CLK='1') THEN
    IF (NEGEDGE_BCK='1') THEN
      IF (UNSIGNED(NEW_COUNT)="10000000") THEN
        SHIFTOUT <= R_IN & L_IN;
      ELSE
        SHIFTOUT <= SHIFTOUT (30 DOWNTO 0) & '0';
      END IF; -- FIRST BCK
    END IF; -- POSEDGE BCK
  END IF; -- POSEDGE CLK
END PROCESS;

-- INTERFACE WITH THE REST OF THE DESIGN

SAMPLE_OUT : PROCESS (CLK)
BEGIN
  IF (CLK'EVENT AND CLK='1') THEN
    IF (LR_SYNC='1'AND NEW_LRCOUT='1') THEN
      LEFT_OUT <= SHIFTIN (31 DOWNTO 16);
      RIGHT_OUT <= SHIFTIN (15 DOWNTO 0);
      NEW_SAMPLE <='1';								-- OUTPUT TO INDICATE THAT NEW VALID SAMPLES ARE AVAILABLE
    ELSE
      NEW_SAMPLE <='0';
    END IF;
  END IF;
END PROCESS;

SAMPLE_INPUT : PROCESS (CLK,LOAD)
BEGIN
  IF (CLK'EVENT AND CLK='1') THEN
    IF (LOAD='1') THEN
      R_IN<=RIGHT_IN;
      L_IN<=LEFT_IN;
    END IF;
  END IF;
END PROCESS;

END PCM3006_architecture;
