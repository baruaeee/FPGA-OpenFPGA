objectfile:lcd.obj
time:Thu Dec 14 11:33:35 2006
cpuname:i8051
import:__movel_8_4
import:__add_i4
import:_I2C_start
import:__wait_ms
import:__ld_a_r47
import:_I2C_send
import:__st_a_r47
import:_I2C_stop
import:__gen_read32_i1
import:_I2C_get
export:_LCD_ctl_reg @14:0
export:_LCD_wait_ready @9:0
export:_LCD_write_line @13:0
export:_LCD_write_dat @5:0
export:_LCD_write_cmd @c:0
export:_LCD_init @10:0
segment:_LCD_write_dat_formal_near @0:m s:0 u:0 n f c:dram
segment:_LCD_write_dat_local_near @1:m s:1 u:0 n f c:dram
segment:_I2C_start_formal_near @2:m s:0 u:0 n f c:dram
segment:_I2C_send_formal_near @3:m s:0 u:0 n f c:dram
segment:_I2C_stop_formal_near @4:m s:0 u:0 n f c:dram
segment:__LCD_write_dat @5:m u:72
8f 00 12 00 00 7f 42 12 00 00 af 00 12 00 00 12
00 00 12 00 00 7f 40 12 00 00 90 00 00 e0 ff 44
20 ff 90 00 00 ef f0 90 00 00 e0 ff 12 00 00 90
00 00 e0 ff 54 bf ff 90 00 00 ef f0 90 00 00 e0
ff 12 00 00 90 00 00 e0 ff 44 80 ff 90 00 00 ef
f0 90 00 00 e0 ff 12 00 00 90 00 00 e0 ff 54 7f
ff 90 00 00 ef f0 90 00 00 e0 ff 12 00 00 12 00
00 22
segment:_LCD_wait_ready_formal_near @6:m s:0 u:0 n f c:dram
segment:_LCD_wait_ready_local_near @7:m s:1 u:0 n f c:dram
segment:_I2C_get_formal_near @8:m s:0 u:0 n f c:dram
segment:__LCD_wait_ready @9:m u:9e
75 00 80 02 00 00 12 00 00 7f 42 12 00 00 7f ff
12 00 00 12 00 00 12 00 00 7f 40 12 00 00 90 00
00 e0 ff 54 df ff 90 00 00 ef f0 90 00 00 e0 ff
12 00 00 90 00 00 e0 ff 44 40 ff 90 00 00 ef f0
90 00 00 e0 ff 12 00 00 90 00 00 e0 ff 44 80 ff
90 00 00 ef f0 90 00 00 e0 ff 12 00 00 12 00 00
12 00 00 7f 43 12 00 00 7f 01 12 00 00 8f 00 12
00 00 12 00 00 7f 40 12 00 00 90 00 00 e0 ff 54
7f ff 90 00 00 ef f0 90 00 00 e0 ff 12 00 00 12
00 00 af 00 53 07 80 ef 60 00 02 00 00 22
segment:_LCD_write_cmd_formal_near @a:m s:0 u:0 n f c:dram
segment:_LCD_write_cmd_local_near @b:m s:1 u:0 n f c:dram
segment:__LCD_write_cmd @c:m u:7a
8f 00 12 00 00 7f 42 12 00 00 af 00 12 00 00 12
00 00 12 00 00 7f 40 12 00 00 90 00 00 e0 ff 54
df ff 90 00 00 ef f0 90 00 00 e0 ff 12 00 00 90
00 00 e0 ff 54 bf ff 90 00 00 ef f0 90 00 00 e0
ff 12 00 00 90 00 00 e0 ff 12 00 00 90 00 00 e0
ff 44 80 ff 90 00 00 ef f0 90 00 00 e0 ff 12 00
00 90 00 00 e0 ff 54 7f ff 90 00 00 ef f0 90 00
00 e0 ff 12 00 00 12 00 00 22
segment:_LCD_init_formal_near @d:m s:0 u:0 n f c:dram
segment:_LCD_init_local_near @e:m s:0 u:0 n f c:dram
segment:__wait_ms_formal_near @f:m s:0 u:0 n f c:dram
segment:__LCD_init @10:m u:70
90 00 00 e4 f0 12 00 00 7e 00 7f 23 12 00 00 7f
38 12 00 00 7e 00 7f 02 12 00 00 7f 38 12 00 00
7e 00 7f 02 12 00 00 7f 0c 12 00 00 7e 00 7f 01
12 00 00 7f 01 12 00 00 7e 00 7f 02 12 00 00 7f
02 12 00 00 7e 00 7f 02 12 00 00 7f 06 12 00 00
7e 00 7f 01 12 00 00 7f 40 12 00 00 7e 00 7f 01
12 00 00 7f 80 12 00 00 7e 00 7f 01 12 00 00 22
segment:_LCD_write_line_formal_near @11:m s:0 u:0 n f c:dram
segment:_LCD_write_line_local_near @12:m s:5 u:0 n f c:dram
segment:__LCD_write_line @13:m u:6b
74 00 12 00 00 e4 f5 00 eb 70 00 7f 80 12 00 00
80 00 7f c0 12 00 00 80 00 85 00 08 85 00 09 85
00 0a 85 00 0b e4 f8 f9 fa 7b 01 12 00 00 12 00
00 74 00 12 00 00 12 00 00 12 00 00 12 00 00 05
00 74 00 12 00 00 12 00 00 ef 60 00 7d 10 af 00
c3 ef 9d 40 00 80 00 7f 20 12 00 00 ad 00 af 05
0f 8f 00 7f 10 c3 ed 9f 40 00 22
segment:bss @14:m u:1 n c:xram
sgraph:_LCD_write_dat_formal_near _LCD_write_dat_local_near __LCD_write_dat
sgraph:_LCD_write_dat_local_near _I2C_stop_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_start_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_stop_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 0
sgraph:_LCD_write_dat_local_near _I2C_send_formal_near __LCD_write_dat 1
sgraph:_LCD_write_dat_local_near _I2C_start_formal_near __LCD_write_dat 1
sgraph:_LCD_wait_ready_formal_near _LCD_wait_ready_local_near __LCD_wait_ready
sgraph:_LCD_wait_ready_local_near _I2C_stop_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_start_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_stop_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_get_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_start_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_stop_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_start_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_stop_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_send_formal_near __LCD_wait_ready 1
sgraph:_LCD_wait_ready_local_near _I2C_start_formal_near __LCD_wait_ready 1
sgraph:_LCD_write_cmd_formal_near _LCD_write_cmd_local_near __LCD_write_cmd
sgraph:_LCD_write_cmd_local_near _I2C_stop_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_start_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_stop_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 0
sgraph:_LCD_write_cmd_local_near _I2C_send_formal_near __LCD_write_cmd 1
sgraph:_LCD_write_cmd_local_near _I2C_start_formal_near __LCD_write_cmd 1
sgraph:_LCD_init_formal_near _LCD_init_local_near __LCD_init
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_write_cmd_formal_near __LCD_init 0
sgraph:_LCD_init_local_near __wait_ms_formal_near __LCD_init 0
sgraph:_LCD_init_local_near _LCD_wait_ready_formal_near __LCD_init 0
sgraph:_LCD_write_line_formal_near _LCD_write_line_local_near __LCD_write_line
sgraph:_LCD_write_line_local_near _LCD_write_dat_formal_near __LCD_write_line 5
sgraph:_LCD_write_line_local_near _LCD_write_dat_formal_near __LCD_write_line 5
sgraph:_LCD_write_line_local_near _LCD_write_cmd_formal_near __LCD_write_line 5
sgraph:_LCD_write_line_local_near _LCD_write_cmd_formal_near __LCD_write_line 5
src:lcd.s51 #0
ref byte #0:45 @5:1 @1:0 0 +
ref w_hl #0:47 @5:3 _I2C_start
ref w_hl #0:4a @5:8 _I2C_send
ref byte #0:4c @5:b @1:0 0 +
ref w_hl #0:4d @5:d _I2C_send
ref w_hl #0:4f @5:10 _I2C_stop
ref w_hl #0:51 @5:13 _I2C_start
ref w_hl #0:54 @5:18 _I2C_send
ref w_hl #0:56 @5:1b _LCD_ctl_reg
ref w_hl #0:5b @5:23 _LCD_ctl_reg
ref w_hl #0:5f @5:28 _LCD_ctl_reg
ref w_hl #0:62 @5:2d _I2C_send
ref w_hl #0:64 @5:30 _LCD_ctl_reg
ref w_hl #0:69 @5:38 _LCD_ctl_reg
ref w_hl #0:6d @5:3d _LCD_ctl_reg
ref w_hl #0:70 @5:42 _I2C_send
ref w_hl #0:72 @5:45 _LCD_ctl_reg
ref w_hl #0:77 @5:4d _LCD_ctl_reg
ref w_hl #0:7b @5:52 _LCD_ctl_reg
ref w_hl #0:7e @5:57 _I2C_send
ref w_hl #0:80 @5:5a _LCD_ctl_reg
ref w_hl #0:85 @5:62 _LCD_ctl_reg
ref w_hl #0:89 @5:67 _LCD_ctl_reg
ref w_hl #0:8c @5:6c _I2C_send
ref w_hl #0:8e @5:6f _I2C_stop
ref byte #0:c3 @9:1 @7:0 0 +
ref w_hl #0:c4 @9:4 @9:92
ref w_hl #0:c7 @9:7 _I2C_start
ref w_hl #0:ca @9:c _I2C_send
ref w_hl #0:cd @9:11 _I2C_send
ref w_hl #0:cf @9:14 _I2C_stop
ref w_hl #0:d1 @9:17 _I2C_start
ref w_hl #0:d4 @9:1c _I2C_send
ref w_hl #0:d6 @9:1f _LCD_ctl_reg
ref w_hl #0:db @9:27 _LCD_ctl_reg
ref w_hl #0:df @9:2c _LCD_ctl_reg
ref w_hl #0:e2 @9:31 _I2C_send
ref w_hl #0:e4 @9:34 _LCD_ctl_reg
ref w_hl #0:e9 @9:3c _LCD_ctl_reg
ref w_hl #0:ed @9:41 _LCD_ctl_reg
ref w_hl #0:f0 @9:46 _I2C_send
ref w_hl #0:f2 @9:49 _LCD_ctl_reg
ref w_hl #0:f7 @9:51 _LCD_ctl_reg
ref w_hl #0:fb @9:56 _LCD_ctl_reg
ref w_hl #0:fe @9:5b _I2C_send
ref w_hl #0:100 @9:5e _I2C_stop
ref w_hl #0:102 @9:61 _I2C_start
ref w_hl #0:105 @9:66 _I2C_send
ref w_hl #0:108 @9:6b _I2C_get
ref byte #0:109 @9:6e @7:0 0 +
ref w_hl #0:10b @9:70 _I2C_stop
ref w_hl #0:10d @9:73 _I2C_start
ref w_hl #0:110 @9:78 _I2C_send
ref w_hl #0:112 @9:7b _LCD_ctl_reg
ref w_hl #0:117 @9:83 _LCD_ctl_reg
ref w_hl #0:11b @9:88 _LCD_ctl_reg
ref w_hl #0:11e @9:8d _I2C_send
ref w_hl #0:120 @9:90 _I2C_stop
ref byte #0:124 @9:93 @7:0 0 +
ref rbyte #0:127 @9:99 @9:9d
ref w_hl #0:128 @9:9b @9:6
ref byte #0:151 @c:1 @b:0 0 +
ref w_hl #0:153 @c:3 _I2C_start
ref w_hl #0:156 @c:8 _I2C_send
ref byte #0:158 @c:b @b:0 0 +
ref w_hl #0:159 @c:d _I2C_send
ref w_hl #0:15b @c:10 _I2C_stop
ref w_hl #0:15d @c:13 _I2C_start
ref w_hl #0:160 @c:18 _I2C_send
ref w_hl #0:162 @c:1b _LCD_ctl_reg
ref w_hl #0:167 @c:23 _LCD_ctl_reg
ref w_hl #0:16b @c:28 _LCD_ctl_reg
ref w_hl #0:16e @c:2d _I2C_send
ref w_hl #0:170 @c:30 _LCD_ctl_reg
ref w_hl #0:175 @c:38 _LCD_ctl_reg
ref w_hl #0:179 @c:3d _LCD_ctl_reg
ref w_hl #0:17c @c:42 _I2C_send
ref w_hl #0:17e @c:45 _LCD_ctl_reg
ref w_hl #0:181 @c:4a _I2C_send
ref w_hl #0:183 @c:4d _LCD_ctl_reg
ref w_hl #0:188 @c:55 _LCD_ctl_reg
ref w_hl #0:18c @c:5a _LCD_ctl_reg
ref w_hl #0:18f @c:5f _I2C_send
ref w_hl #0:191 @c:62 _LCD_ctl_reg
ref w_hl #0:196 @c:6a _LCD_ctl_reg
ref w_hl #0:19a @c:6f _LCD_ctl_reg
ref w_hl #0:19d @c:74 _I2C_send
ref w_hl #0:19f @c:77 _I2C_stop
ref w_hl #0:1d2 @10:1 _LCD_ctl_reg
ref w_hl #0:1d6 @10:6 _LCD_wait_ready
ref w_hl #0:1da @10:d __wait_ms
ref w_hl #0:1dd @10:12 _LCD_write_cmd
ref w_hl #0:1e1 @10:19 __wait_ms
ref w_hl #0:1e4 @10:1e _LCD_write_cmd
ref w_hl #0:1e8 @10:25 __wait_ms
ref w_hl #0:1eb @10:2a _LCD_write_cmd
ref w_hl #0:1ef @10:31 __wait_ms
ref w_hl #0:1f2 @10:36 _LCD_write_cmd
ref w_hl #0:1f6 @10:3d __wait_ms
ref w_hl #0:1f9 @10:42 _LCD_write_cmd
ref w_hl #0:1fd @10:49 __wait_ms
ref w_hl #0:200 @10:4e _LCD_write_cmd
ref w_hl #0:204 @10:55 __wait_ms
ref w_hl #0:207 @10:5a _LCD_write_cmd
ref w_hl #0:20b @10:61 __wait_ms
ref w_hl #0:20e @10:66 _LCD_write_cmd
ref w_hl #0:212 @10:6d __wait_ms
ref byte #0:22c @13:1 @12:0 0 +
ref w_hl #0:22d @13:3 __st_a_r47
ref byte #0:231 @13:7 @12:0 4 +
ref rbyte #0:234 @13:a @13:12
ref w_hl #0:237 @13:e _LCD_write_cmd
ref rbyte #0:238 @13:11 @13:41
ref w_hl #0:23c @13:15 _LCD_write_cmd
ref rbyte #0:23d @13:18 @13:41
ref byte #0:240 @13:1a @12:0 0 +
ref byte #0:241 @13:1d @12:0 0 + 1 +
ref byte #0:242 @13:20 @12:0 0 + 2 +
ref byte #0:243 @13:23 @12:0 0 + 3 +
ref w_hl #0:249 @13:2c __movel_8_4
ref w_hl #0:24a @13:2f __add_i4
ref byte #0:24b @13:32 @12:0 0 +
ref w_hl #0:24c @13:34 __st_a_r47
ref w_hl #0:24d @13:37 __movel_8_4
ref w_hl #0:24e @13:3a __gen_read32_i1
ref w_hl #0:24f @13:3d _LCD_write_dat
ref byte #0:251 @13:40 @12:0 4 +
ref byte #0:255 @13:42 @12:0 0 +
ref w_hl #0:256 @13:44 __ld_a_r47
ref w_hl #0:257 @13:47 __gen_read32_i1
ref rbyte #0:259 @13:4b @13:55
ref byte #0:25b @13:4f @12:0 4 +
ref rbyte #0:25f @13:54 @13:19
ref rbyte #0:261 @13:56 @13:5c
ref w_hl #0:265 @13:5a _LCD_write_dat
ref byte #0:269 @13:5d @12:0 4 +
ref byte #0:26c @13:62 @12:0 4 +
ref rbyte #0:271 @13:69 @13:57
objectdebug
dtx ; *** 'C:\uC51\bin\uc51.exe': uC/51 - ANSI C compiler
dtx ; *** Standard 'i8051', V1.25, Jan 24 2004 (C) WWW.WICKENHAEUSER.COM
dtx ; sourcefile: 'lcd.c', time: Thu Dec 14 11:33:35 2006
dtx 
dtx  .hide
dtx  .show
dtx XDS=0
dtx COS=1
dtx NES=2
dtx INS=2
dtx .macro __line
dtx lcall $0006 ; uC/51 debugger
dtx .endmacro
dtx  .export _LCD_write_dat ; void LCD_write_dat(unsigned char)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __LCD_write_dat
dtx _LCD_write_dat: ; void LCD_write_dat(unsigned char)
dtx  ; parameter 'dat' in 'R7' moved and assigned to local '?LCD_write_dat_dat'
dco @5:0 u:2  mov ?LCD_write_dat_dat,R7
dhl #include "i2c.h"
dhl 
dhl #define LCD_RS   0x20
dhl #define LCD_R_Wn 0x40
dhl #define LCD_E 0x80
dhl 
dhl #define LCD_I2C_DAT_ADR 0x42
dhl #define LCD_I2C_CTL_ADR 0x40
dhl 
dhl unsigned char LCD_ctl_reg;
dhl 
dhl void LCD_init (void);
dhl 
dhl /*
dhl void LCD_wait(void)
dhl {
dhl         unsigned int x;
dhl         x=0xfffe;
dhl         while (x>0) {x--;}
dhl }*/
dhl 
dhl #define LCD_wait()
dhl 
dhl void LCD_write_dat (unsigned char dat)
dhl {
dco @5:2 u:3  lcall _I2C_start
dhl         I2C_start();
dhl         I2C_send (LCD_I2C_DAT_ADR);             // select IC8 to write to LCD-data
dco @5:5 u:2  mov R7,#66
dco @5:7 u:3  lcall _I2C_send
dhl         I2C_send (dat);                         // put data on LCD-data lines
dco @5:a u:2  mov R7,?LCD_write_dat_dat
dco @5:c u:3  lcall _I2C_send
dhl         I2C_stop  ();
dco @5:f u:3  lcall _I2C_stop
dhl         I2C_start();
dco @5:12 u:3  lcall _I2C_start
dhl         I2C_send (LCD_I2C_CTL_ADR);             // select IC6 to write to control lines
dco @5:15 u:2  mov R7,#64
dco @5:17 u:3  lcall _I2C_send
dhl         LCD_ctl_reg |= LCD_RS;          // Registerselect '1' : select data
dco @5:1a u:3  mov DPTR,#_LCD_ctl_reg
dco @5:1d u:1  movx A,@DPTR
dco @5:1e u:1  mov R7,A
dco @5:1f u:2  orl A,#32
dco @5:21 u:1  mov R7,A
dco @5:22 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:25 u:1  mov A,R7
dco @5:26 u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @5:27 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:2a u:1  movx A,@DPTR
dco @5:2b u:1  mov R7,A
dco @5:2c u:3  lcall _I2C_send
dhl         LCD_ctl_reg &= ~LCD_R_Wn;       // R/Wn '0' : write
dco @5:2f u:3  mov DPTR,#_LCD_ctl_reg
dco @5:32 u:1  movx A,@DPTR
dco @5:33 u:1  mov R7,A
dco @5:34 u:2  anl A,#191
dco @5:36 u:1  mov R7,A
dco @5:37 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:3a u:1  mov A,R7
dco @5:3b u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @5:3c u:3  mov DPTR,#_LCD_ctl_reg
dco @5:3f u:1  movx A,@DPTR
dco @5:40 u:1  mov R7,A
dco @5:41 u:3  lcall _I2C_send
dhl         LCD_ctl_reg |= LCD_E;           // Enable '1' : validate cycle
dco @5:44 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:47 u:1  movx A,@DPTR
dco @5:48 u:1  mov R7,A
dco @5:49 u:2  orl A,#128
dco @5:4b u:1  mov R7,A
dco @5:4c u:3  mov DPTR,#_LCD_ctl_reg
dco @5:4f u:1  mov A,R7
dco @5:50 u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @5:51 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:54 u:1  movx A,@DPTR
dco @5:55 u:1  mov R7,A
dco @5:56 u:3  lcall _I2C_send
dhl         LCD_ctl_reg &= ~LCD_E;          // Enable '0' : end of cycle
dco @5:59 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:5c u:1  movx A,@DPTR
dco @5:5d u:1  mov R7,A
dco @5:5e u:2  anl A,#127
dco @5:60 u:1  mov R7,A
dco @5:61 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:64 u:1  mov A,R7
dco @5:65 u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @5:66 u:3  mov DPTR,#_LCD_ctl_reg
dco @5:69 u:1  movx A,@DPTR
dco @5:6a u:1  mov R7,A
dco @5:6b u:3  lcall _I2C_send
dhl         I2C_stop();
dco @5:6e u:3  lcall _I2C_stop
dco @5:71 u:1  ret
dtx ; end of function LCD_write_dat
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:1 bytes
dtx 
dtx  .export _LCD_wait_ready ; void LCD_wait_ready(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __LCD_wait_ready
dtx _LCD_wait_ready: ; void LCD_wait_ready(void)
dtx  ; variable 'dat' allocated as 'auto'
dhl                 
dhl }
dhl 
dhl void LCD_wait_ready(void)
dhl {
dco @9:0 u:3  mov ?LCD_wait_ready_dat,#128
dco @9:3 u:3  ljmp ?4
dtx ?3:
dhl         unsigned char dat;
dhl         dat = 0x80;
dhl         while ((dat &0x80)!=0)
dhl         {
dco @9:6 u:3  lcall _I2C_start
dhl                 
dhl                 I2C_start();
dhl                 I2C_send (LCD_I2C_DAT_ADR);             // select IC8 to write to LCD-data
dco @9:9 u:2  mov R7,#66
dco @9:b u:3  lcall _I2C_send
dhl                 I2C_send (0xff);                // set all outputs to high (and input)
dco @9:e u:2  mov R7,#255
dco @9:10 u:3  lcall _I2C_send
dhl                 I2C_stop  ();
dco @9:13 u:3  lcall _I2C_stop
dhl 
dhl                 I2C_start();
dco @9:16 u:3  lcall _I2C_start
dhl             I2C_send (LCD_I2C_CTL_ADR);         // select IC6 to write to control lines
dco @9:19 u:2  mov R7,#64
dco @9:1b u:3  lcall _I2C_send
dhl                 LCD_ctl_reg &= ~LCD_RS;                 // RS '0' : Control register
dco @9:1e u:3  mov DPTR,#_LCD_ctl_reg
dco @9:21 u:1  movx A,@DPTR
dco @9:22 u:1  mov R7,A
dco @9:23 u:2  anl A,#223
dco @9:25 u:1  mov R7,A
dco @9:26 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:29 u:1  mov A,R7
dco @9:2a u:1  movx @DPTR,A
dhl         I2C_send (LCD_ctl_reg);
dco @9:2b u:3  mov DPTR,#_LCD_ctl_reg
dco @9:2e u:1  movx A,@DPTR
dco @9:2f u:1  mov R7,A
dco @9:30 u:3  lcall _I2C_send
dhl                 LCD_ctl_reg |= LCD_R_Wn;                // R/Wn '1' : read
dco @9:33 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:36 u:1  movx A,@DPTR
dco @9:37 u:1  mov R7,A
dco @9:38 u:2  orl A,#64
dco @9:3a u:1  mov R7,A
dco @9:3b u:3  mov DPTR,#_LCD_ctl_reg
dco @9:3e u:1  mov A,R7
dco @9:3f u:1  movx @DPTR,A
dhl                 I2C_send (LCD_ctl_reg);                 // select control register to read
dco @9:40 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:43 u:1  movx A,@DPTR
dco @9:44 u:1  mov R7,A
dco @9:45 u:3  lcall _I2C_send
dhl                 LCD_ctl_reg |= LCD_E;                   // Enable '1' : validate cycle
dco @9:48 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:4b u:1  movx A,@DPTR
dco @9:4c u:1  mov R7,A
dco @9:4d u:2  orl A,#128
dco @9:4f u:1  mov R7,A
dco @9:50 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:53 u:1  mov A,R7
dco @9:54 u:1  movx @DPTR,A
dhl         I2C_send (LCD_ctl_reg);
dco @9:55 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:58 u:1  movx A,@DPTR
dco @9:59 u:1  mov R7,A
dco @9:5a u:3  lcall _I2C_send
dhl                 I2C_stop();
dco @9:5d u:3  lcall _I2C_stop
dhl         
dhl                 I2C_start();
dco @9:60 u:3  lcall _I2C_start
dhl                 I2C_send (LCD_I2C_DAT_ADR+1);   // select IC8 to read from LCD-data
dco @9:63 u:2  mov R7,#67
dco @9:65 u:3  lcall _I2C_send
dhl                 dat=I2C_get(1);                                 // read status
dco @9:68 u:2  mov R7,#1
dco @9:6a u:3  lcall _I2C_get
dco @9:6d u:2  mov ?LCD_wait_ready_dat,R7
dhl                 I2C_stop();
dco @9:6f u:3  lcall _I2C_stop
dhl 
dhl                 I2C_start();
dco @9:72 u:3  lcall _I2C_start
dhl             I2C_send (LCD_I2C_CTL_ADR);         // select IC6 to write to control lines
dco @9:75 u:2  mov R7,#64
dco @9:77 u:3  lcall _I2C_send
dhl                 LCD_ctl_reg &= ~LCD_E;                  // Enable '0' : end of cycle
dco @9:7a u:3  mov DPTR,#_LCD_ctl_reg
dco @9:7d u:1  movx A,@DPTR
dco @9:7e u:1  mov R7,A
dco @9:7f u:2  anl A,#127
dco @9:81 u:1  mov R7,A
dco @9:82 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:85 u:1  mov A,R7
dco @9:86 u:1  movx @DPTR,A
dhl         I2C_send (LCD_ctl_reg);
dco @9:87 u:3  mov DPTR,#_LCD_ctl_reg
dco @9:8a u:1  movx A,@DPTR
dco @9:8b u:1  mov R7,A
dco @9:8c u:3  lcall _I2C_send
dhl                 I2C_stop();
dco @9:8f u:3  lcall _I2C_stop
dhl         }               
dtx ?4:
dtx 
dco @9:92 u:2  mov R7,?LCD_wait_ready_dat
dco @9:94 u:3  anl AR7,#128
dco @9:97 u:1  mov A,R7
dco @9:98 u:2  jz ?_1
dco @9:9a u:3  ljmp ?3
dtx ?_1:
dco @9:9d u:1  ret
dtx ; end of function LCD_wait_ready
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:1 bytes
dtx 
dtx  .export _LCD_write_cmd ; void LCD_write_cmd(unsigned char)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __LCD_write_cmd
dtx _LCD_write_cmd: ; void LCD_write_cmd(unsigned char)
dtx  ; parameter 'dat' in 'R7' moved and assigned to local '?LCD_write_cmd_dat'
dco @c:0 u:2  mov ?LCD_write_cmd_dat,R7
dhl }
dhl 
dhl void LCD_write_cmd (unsigned char dat)
dhl {
dco @c:2 u:3  lcall _I2C_start
dhl         I2C_start();
dhl         I2C_send (LCD_I2C_DAT_ADR);             // select IC8 to write to LCD-data
dco @c:5 u:2  mov R7,#66
dco @c:7 u:3  lcall _I2C_send
dhl         I2C_send (dat);                 // put data on LCD-data lines
dco @c:a u:2  mov R7,?LCD_write_cmd_dat
dco @c:c u:3  lcall _I2C_send
dhl         I2C_stop  ();
dco @c:f u:3  lcall _I2C_stop
dhl         I2C_start();
dco @c:12 u:3  lcall _I2C_start
dhl         I2C_send (LCD_I2C_CTL_ADR);             // select IC6 to write to control lines
dco @c:15 u:2  mov R7,#64
dco @c:17 u:3  lcall _I2C_send
dhl         LCD_ctl_reg &= ~LCD_RS;                 // RS '0' : Control register
dco @c:1a u:3  mov DPTR,#_LCD_ctl_reg
dco @c:1d u:1  movx A,@DPTR
dco @c:1e u:1  mov R7,A
dco @c:1f u:2  anl A,#223
dco @c:21 u:1  mov R7,A
dco @c:22 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:25 u:1  mov A,R7
dco @c:26 u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @c:27 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:2a u:1  movx A,@DPTR
dco @c:2b u:1  mov R7,A
dco @c:2c u:3  lcall _I2C_send
dhl         LCD_ctl_reg &= ~LCD_R_Wn;               // R/Wn '0' : write
dco @c:2f u:3  mov DPTR,#_LCD_ctl_reg
dco @c:32 u:1  movx A,@DPTR
dco @c:33 u:1  mov R7,A
dco @c:34 u:2  anl A,#191
dco @c:36 u:1  mov R7,A
dco @c:37 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:3a u:1  mov A,R7
dco @c:3b u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @c:3c u:3  mov DPTR,#_LCD_ctl_reg
dco @c:3f u:1  movx A,@DPTR
dco @c:40 u:1  mov R7,A
dco @c:41 u:3  lcall _I2C_send
dhl     I2C_send (LCD_ctl_reg);
dco @c:44 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:47 u:1  movx A,@DPTR
dco @c:48 u:1  mov R7,A
dco @c:49 u:3  lcall _I2C_send
dhl         LCD_ctl_reg |= LCD_E;           // Enable '1' : validate cycle
dco @c:4c u:3  mov DPTR,#_LCD_ctl_reg
dco @c:4f u:1  movx A,@DPTR
dco @c:50 u:1  mov R7,A
dco @c:51 u:2  orl A,#128
dco @c:53 u:1  mov R7,A
dco @c:54 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:57 u:1  mov A,R7
dco @c:58 u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @c:59 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:5c u:1  movx A,@DPTR
dco @c:5d u:1  mov R7,A
dco @c:5e u:3  lcall _I2C_send
dhl         LCD_ctl_reg &= ~LCD_E;          // Enable '0' : end of cycle
dco @c:61 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:64 u:1  movx A,@DPTR
dco @c:65 u:1  mov R7,A
dco @c:66 u:2  anl A,#127
dco @c:68 u:1  mov R7,A
dco @c:69 u:3  mov DPTR,#_LCD_ctl_reg
dco @c:6c u:1  mov A,R7
dco @c:6d u:1  movx @DPTR,A
dhl     I2C_send (LCD_ctl_reg);
dco @c:6e u:3  mov DPTR,#_LCD_ctl_reg
dco @c:71 u:1  movx A,@DPTR
dco @c:72 u:1  mov R7,A
dco @c:73 u:3  lcall _I2C_send
dhl         I2C_stop();
dco @c:76 u:3  lcall _I2C_stop
dco @c:79 u:1  ret
dtx ; end of function LCD_write_cmd
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:1 bytes
dtx 
dtx  .export _LCD_init ; void LCD_init(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __LCD_init
dtx _LCD_init: ; void LCD_init(void)
dhl         LCD_wait();             // Wait until command is executed
dhl }
dhl 
dhl void LCD_init(void)
dhl {
dco @10:0 u:3  mov DPTR,#_LCD_ctl_reg
dco @10:3 u:1  clr A
dco @10:4 u:1  movx @DPTR,A
dhl   LCD_ctl_reg = 0x00;     // initialize control-lines
dhl   LCD_wait_ready ();
dco @10:5 u:3  lcall _LCD_wait_ready
dhl   _wait_ms (35);          // wait for more than 30mSec after Power supply to LCD
dco @10:8 u:2  mov R6,#0
dco @10:a u:2  mov R7,#35
dco @10:c u:3  lcall __wait_ms
dhl                           // rises above 4,5 volt
dhl   LCD_write_cmd (0x38);   // Function Set : 8 bit, 2 lines, 5x7 dots
dco @10:f u:2  mov R7,#56
dco @10:11 u:3  lcall _LCD_write_cmd
dhl   _wait_ms (2);
dco @10:14 u:2  mov R6,#0
dco @10:16 u:2  mov R7,#2
dco @10:18 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x38);   // Function Set : 8 bit, 2 lines, 5x7 dots
dco @10:1b u:2  mov R7,#56
dco @10:1d u:3  lcall _LCD_write_cmd
dhl   _wait_ms (2);
dco @10:20 u:2  mov R6,#0
dco @10:22 u:2  mov R7,#2
dco @10:24 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x0c);   // Display ON/OFF : display ON, cursor blink OFF, cursor OFF
dco @10:27 u:2  mov R7,#12
dco @10:29 u:3  lcall _LCD_write_cmd
dhl   _wait_ms (1);
dco @10:2c u:2  mov R6,#0
dco @10:2e u:2  mov R7,#1
dco @10:30 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x01);   // Clear Display
dco @10:33 u:2  mov R7,#1
dco @10:35 u:3  lcall _LCD_write_cmd
dhl   _wait_ms (2);
dco @10:38 u:2  mov R6,#0
dco @10:3a u:2  mov R7,#2
dco @10:3c u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x02);   // Return Home
dco @10:3f u:2  mov R7,#2
dco @10:41 u:3  lcall _LCD_write_cmd
dhl   _wait_ms (2);
dco @10:44 u:2  mov R6,#0
dco @10:46 u:2  mov R7,#2
dco @10:48 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x06);   // Entry Mode : Increment, Shift OFF
dco @10:4b u:2  mov R7,#6
dco @10:4d u:3  lcall _LCD_write_cmd
dhl   _wait_ms(1);
dco @10:50 u:2  mov R6,#0
dco @10:52 u:2  mov R7,#1
dco @10:54 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x40);
dco @10:57 u:2  mov R7,#64
dco @10:59 u:3  lcall _LCD_write_cmd
dhl   _wait_ms(1);
dco @10:5c u:2  mov R6,#0
dco @10:5e u:2  mov R7,#1
dco @10:60 u:3  lcall __wait_ms
dhl   LCD_write_cmd (0x80);
dco @10:63 u:2  mov R7,#128
dco @10:65 u:3  lcall _LCD_write_cmd
dhl   _wait_ms(1);
dco @10:68 u:2  mov R6,#0
dco @10:6a u:2  mov R7,#1
dco @10:6c u:3  lcall __wait_ms
dco @10:6f u:1  ret
dtx ; end of function LCD_init
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .export _LCD_write_line ; void LCD_write_line(char *, unsigned char)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __LCD_write_line
dtx _LCD_write_line: ; void LCD_write_line(char *, unsigned char)
dtx  ; parameter 'str' in 'RL4567' moved and assigned to local '?LCD_write_line_str'
dtx  ; parameter 'line' in 'R3'
dco @13:0 u:2  mov A,#?LCD_write_line_str
dco @13:2 u:3  lcall __st_a_r47
dtx  ; variable 'nr' allocated as 'auto'
dhl 
dhl }
dhl 
dhl void LCD_write_line(char *str,unsigned char line)
dhl {
dco @13:5 u:1  clr A
dco @13:6 u:2  mov ?LCD_write_line_nr,A
dhl         unsigned char nr=0;
dhl         if (line==0) LCD_write_cmd (0x80);      // DDRAM pointer 0   (first line)
dco @13:8 u:1  mov A,R3
dco @13:9 u:2  jnz ?9
dtx 
dco @13:b u:2  mov R7,#128
dco @13:d u:3  lcall _LCD_write_cmd
dco @13:10 u:2  sjmp ?12
dtx ?9:
dhl         else LCD_write_cmd (0xc0);                      // DDRAM pointer x40 (line nr 1)
dco @13:12 u:2  mov R7,#192
dco @13:14 u:3  lcall _LCD_write_cmd
dco @13:17 u:2  sjmp ?12
dtx ?11:
dhl         while ((*str!=0)&&(nr<16)) {LCD_write_dat (*str++);nr++;} // write to the LCD-data register as
dco @13:19 u:3  mov AR8,?LCD_write_line_str
dco @13:1c u:3  mov AR9,?LCD_write_line_str+1
dco @13:1f u:3  mov AR10,?LCD_write_line_str+2
dco @13:22 u:3  mov AR11,?LCD_write_line_str+3
dco @13:25 u:1  clr A
dco @13:26 u:1  mov R0,A
dco @13:27 u:1  mov R1,A
dco @13:28 u:1  mov R2,A
dco @13:29 u:2  mov R3,#1
dco @13:2b u:3  lcall __movel_8_4
dco @13:2e u:3  lcall __add_i4
dco @13:31 u:2  mov A,#?LCD_write_line_str
dco @13:33 u:3  lcall __st_a_r47
dco @13:36 u:3  lcall __movel_8_4
dco @13:39 u:3  lcall __gen_read32_i1
dco @13:3c u:3  lcall _LCD_write_dat
dtx 
dco @13:3f u:2  inc ?LCD_write_line_nr
dtx 
dtx ?12:
dtx 
dco @13:41 u:2  mov A,#?LCD_write_line_str
dco @13:43 u:3  lcall __ld_a_r47
dco @13:46 u:3  lcall __gen_read32_i1
dco @13:49 u:1  mov A,R7
dco @13:4a u:2  jz ?14
dco @13:4c u:2  mov R5,#16
dco @13:4e u:2  mov R7,?LCD_write_line_nr
dco @13:50 u:1  clr C
dco @13:51 u:1  mov A,R7
dco @13:52 u:1  subb A,R5
dco @13:53 u:2  jc ?11
dtx ?14:
dco @13:55 u:2  sjmp ?16
dtx ?15:
dhl                                                                                 // long as the string 
dhl         while (nr++<16) {LCD_write_dat (' ');} // fill the rest of the line with ' '
dco @13:57 u:2  mov R7,#32
dco @13:59 u:3  lcall _LCD_write_dat
dtx 
dtx ?16:
dtx 
dco @13:5c u:2  mov R5,?LCD_write_line_nr
dco @13:5e u:2  mov R7,AR5
dco @13:60 u:1  inc R7
dco @13:61 u:2  mov ?LCD_write_line_nr,R7
dco @13:63 u:2  mov R7,#16
dco @13:65 u:1  clr C
dco @13:66 u:1  mov A,R5
dco @13:67 u:1  subb A,R7
dco @13:68 u:2  jc ?15
dco @13:6a u:1  ret
dtx ; end of function LCD_write_line
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:5 bytes
dtx 
dtx  .import __wait_ms ; int _wait_ms()
dtx  .segment bss, sclass xram, notext
dtx  .export _LCD_ctl_reg ; xdata unsigned char LCD_ctl_reg
dtx _LCD_ctl_reg: ; xdata unsigned char LCD_ctl_reg
dco @14:0 u:1  .ds.b 1
dtx  .import _I2C_get ; unsigned char I2C_get(unsigned char)
dtx  .import _I2C_send ; unsigned char I2C_send(unsigned char)
dtx  .import _I2C_stop ; void I2C_stop(void)
dtx  .import _I2C_start ; void I2C_start(void)
dtx  .end
dhl }
def:_LCD_ctl_reg @14:0
def:_LCD_wait_ready @9:0
def:_LCD_write_line @13:0
def:_LCD_write_dat @5:0
def:_LCD_write_cmd @c:0
def:_LCD_init @10:0
objectend
