-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 5.1 (Build Build 176 10/26/2005)
-- Created on Wed Jan 25 22:33:03 2006

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY to_seven_segment IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		val : IN STD_LOGIC_VECTOR(3 downto 0);
		segments_out : OUT STD_LOGIC_VECTOR(6 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END to_seven_segment;


--  Architecture Body

ARCHITECTURE to_seven_segment_architecture OF to_seven_segment IS

	
BEGIN
  CASE_PROC : PROCESS (val)
  BEGIN
    CASE val is
      WHEN "0000" =>					-- val = 0?
        segments_out <= "1111110";		
      WHEN "0001" =>					-- val = 1?
        segments_out <= "0110000";
      WHEN "0010" =>					-- val = 2?
        segments_out <= "1101101";		
      WHEN "0011" =>					-- val = 3?
        segments_out <= "1111001";		
      WHEN "0100" =>					-- val = 4?
        segments_out <= "0110011";		
      WHEN "0101" =>					-- val = 5?
        segments_out <= "1011011";		
      WHEN "0110" =>					-- val = 6
        segments_out <= "1011111";		
      WHEN "0111" =>					-- val = 7
        segments_out <= "1110000";		
      WHEN "1000" =>					-- val = 8?
        segments_out <= "1111111";		
      WHEN "1001" =>					-- val = 9
        segments_out <= "1111011";		
      WHEN "1010" =>					-- val = 10? (A in hexadecimal notation)
        segments_out <= "1110111";		
      WHEN "1011" =>					-- val = 11? (B in hexadecimal notation)
        segments_out <= "0011111";		
      WHEN "1100" =>					-- val = 12? (C in hexadecimal notation)
        segments_out <= "1001110";		
      WHEN "1101" =>					-- val = 13? (D in hexadecimal notation)
        segments_out <= "0111101";		
      WHEN "1110" =>					-- val = 14? (E in hexadecimal notation)
        segments_out <= "1001111";		
      WHEN "1111" =>					-- val = 10? (F in hexadecimal notation)
        segments_out <= "1000111";		
      WHEN others =>
        segments_out <= "0000001";
    END CASE;
  END PROCESS;
END to_seven_segment_architecture;
