-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 5.1 (Build Build 176 10/26/2005)
-- Created on Wed Jan 25 22:17:18 2006

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;			-- is needed, because we want to use some conversion and a mathematical
-- function from this library.

--  Entity Declaration

ENTITY calculate_sum IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		a : IN STD_LOGIC_VECTOR(3 downto 0);
		b : IN STD_LOGIC_VECTOR(3 downto 0);
		sum : OUT STD_LOGIC_VECTOR(3 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END calculate_sum;


--  Architecture Body

ARCHITECTURE calculate_sum_architecture OF calculate_sum IS

	
BEGIN
  sum <= std_logic_vector ( UNSIGNED (a) + UNSIGNED (b(3 downto 0)));
  -- convert both values to an unsigned type UNSIGNED (a(3 downto 0)) and UNSIGNED (b(3 downto 0))
  -- then add both values using a simple '+'-character
  -- Finally convert the result (which is of type UNSIGNED) back to a std_logic_vector.

  -- converting to and from type UNSIGNED and the addition-function ('+') are both defined in 
  -- library numeric_std.
END calculate_sum_architecture;
