-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 5.1 (Build Build 176 10/26/2005)
-- Created on Wed Jan 25 22:04:12 2006

LIBRARY ieee;
USE ieee.std_logic_1164.all;				--  The standard library. Always needed if you want to synthesize.
USE ieee.numeric_std.all;					--	Make some conversion and mathematical functions available

--  Entity Declaration

ENTITY pulse_generator IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		clk : IN STD_LOGIC;
		slow_clk : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END pulse_generator;


--  Architecture Body

ARCHITECTURE pulse_generator_architecture OF pulse_generator IS

signal counter : natural range 50000 downto 0;		-- create an positive integer which can hold values between 0 and 500000

BEGIN

COUNT : process (clk)
BEGIN
  if (clk'event and clk='1') then
    if (counter = 49999) then				-- if counter has got value of 499999 then
      counter <=0;							-- set the counter to 0
      slow_clk <= '1';					-- and make the output active ('1')
    else									-- else
      counter <= counter+1;					-- increment the value of counter
      slow_clk <='0';					-- and the output should become '0'
    end if; -- counter = 499999
  end if; -- positive edge clk
END PROCESS;

END pulse_generator_architecture;
