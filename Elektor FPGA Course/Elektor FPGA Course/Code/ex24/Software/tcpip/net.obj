objectfile:net.obj
time:Wed Dec 13 13:00:40 2006
cpuname:i8051
import:_Init_Mac
import:__st_dptr_r03
import:__st_dptr_r67
import:__st_dptr_r45
import:__movel_8_4
import:__st_dptr_r47
import:_strlen
import:__ld_r0_r03
import:__add_i4
import:_RequestSend_Phy
import:_net_match_ulong
import:_init_rx
import:_Read_Frame_long_Phy
import:_Read_Frame_word_Phy
import:_find_RX_Buffer
import:__cmp_i4
import:__wait_ms
import:__ld_a_r47
import:__ld_dptr_r03
import:__ld_dptr_r67
import:__ld_dptr_r45
import:__ld_dptr_r47
import:_ip_check
import:_net_match_uint
import:__bxor_i4
import:__st_a_r03
import:__st_a_r47
import:_Write_Frame_long_Phy
import:_Write_Frame_word_Phy
import:_CommitSend_Phy
import:_ip_check_more
import:_bmove
import:__sub_i4
import:_Write_Frame_xdata_Phy
import:__band_i4
import:_Read_Frame_xdata_Phy
import:_xram_fast_copy
import:__mul_i2
import:__movel_0_12
import:__movel_4_8
export:_send_TCP @27:0
export:_send_request_ARP @11:0
export:_state_machine_TCP @30:0
export:_timer0int @62:0
export:_process_IP @40:0
export:_Init_net @66:0
export:_send_match_ok_TCP @2d:0
export:_subnet_ip @67:2d4
export:_rx_bd @58:0
export:_send_upd @23:0
export:_process_ARP @19:0
export:_remote_mac @67:200
export:_pseudo_hdr @67:1da
export:_open_socket_udp @54:0
export:_final_timeout_socket @33:0
export:_my_ip @67:2dc
export:_close_socket_udp @57:0
export:_tx_bufleft @0:6
export:_process_UDP @20:0
export:_net_timer @68:1
export:_close_socket_tcp @51:0
export:_retransmit_socket @36:0
export:_process_TCP @3d:0
export:_match_socket @67:0
export:_send_incomming_reset_TCP @2a:0
export:_remote_ip @67:2d8
export:_free_tx_buf @6:0
export:_gateway_mac @67:1fa
export:_rcv_len @67:206
export:_poll_net @5e:0
export:_periodical_socket @39:0
export:_rcv_buf @67:208
export:_tx_buffers @67:32
export:_net_service_cnt @68:0
export:_hhdr @67:1e6
export:_uc_socket @67:26c
export:_process_ICMP @1d:0
export:_send_socket_udp @43:0
export:_gateway_ip @67:2d0
export:_hframe @67:1c6
export:_send_socket_tcp @46:0
export:_free_match_socket @9:0
export:_my_mac @0:0
export:_stringsend_socket_tcp @4e:0
export:_notready_socket_tcp @49:0
export:_allocate_tx_buf @3:0
segment:data @0:m u:7 c:xram
00 06 98 01 00 00 04
segment:_allocate_tx_buf_formal_near @1:m s:0 u:0 n f c:dram
segment:_allocate_tx_buf_local_near @2:m s:0 u:0 n f c:dram
segment:__allocate_tx_buf @3:m u:47
7c 00 7d 00 90 00 00 e0 ff 60 00 e4 fb 85 04 83
85 05 82 e0 ff 70 00 85 04 83 85 05 82 74 01 f0
90 00 00 e0 ff 1f 90 00 00 ef f0 74 01 2d ff e4
3c fe 80 00 0b 74 65 2d fd e4 3c fc 7f 04 c3 eb
9f 40 00 e4 fe ff 22
segment:_free_tx_buf_formal_near @4:m s:0 u:0 n f c:dram
segment:_free_tx_buf_local_near @5:m s:0 u:0 n f c:dram
segment:__free_tx_buf @6:m u:23
ef 1f 70 00 1e 85 06 83 85 07 82 e0 fd 60 00 85
06 83 85 07 82 e4 f0 90 00 00 e0 fd 0d 90 00 00
ed f0 22
segment:_free_match_socket_formal_near @7:m s:0 u:0 n f c:dram
segment:_free_match_socket_local_near @8:m s:0 u:0 n f c:dram
segment:__free_match_socket @9:m u:4f
90 00 00 12 00 00 ee 4f 60 00 90 00 00 e4 f0 a3
f0 90 00 00 12 00 00 12 00 00 90 00 00 12 00 00
ee 4f 60 00 90 00 00 e4 f0 a3 f0 90 00 00 12 00
00 12 00 00 90 00 00 12 00 00 ee 4f 60 00 90 00
00 e4 f0 a3 f0 90 00 00 12 00 00 12 00 00 22
segment:_send_request_ARP_formal_near @a:m s:0 u:0 n f c:dram
segment:_send_request_ARP_local_near @b:m s:4 u:0 n f c:dram
segment:_RequestSend_Phy_formal_near @c:m s:0 u:0 n f c:dram
segment:_Write_Frame_long_Phy_formal_near @d:m s:0 u:0 n f c:dram
segment:_Write_Frame_word_Phy_formal_near @e:m s:0 u:0 n f c:dram
segment:_Write_Frame_xdata_Phy_formal_near @f:m s:0 u:0 n f c:dram
segment:_CommitSend_Phy_formal_near @10:m s:0 u:0 n f c:dram
segment:__send_request_ARP @11:m u:a0
74 00 12 00 00 7e 00 7f 2a 12 00 00 7c ff 7d ff
7e ff 7f ff 12 00 00 7e ff 7f ff 12 00 00 7c 00
7d 06 7e 00 7f 00 12 00 00 7e 08 7f 06 12 00 00
7c 00 7d 01 7e 08 7f 00 12 00 00 7c 06 7d 04 7e
00 7f 01 12 00 00 7c 00 7d 06 7e 00 7f 00 12 00
00 90 00 00 12 00 00 12 00 00 7c ff 7d ff 7e ff
7f ff 12 00 00 7e ff 7f ff 12 00 00 90 00 00 12
00 00 74 00 12 00 00 12 00 00 90 00 00 12 00 00
12 00 00 ec 4d 4e 4f 60 00 90 00 00 12 00 00 12
00 00 80 00 74 00 12 00 00 12 00 00 12 00 00 22
segment:_process_ARP_formal_near @12:m s:0 u:0 n f c:dram
segment:_process_ARP_local_near @13:m s:3 u:0 n f c:dram
segment:_net_match_ulong_formal_near @14:m s:0 u:0 n f c:dram
segment:_net_match_uint_formal_near @15:m s:0 u:0 n f c:dram
segment:_Read_Frame_word_Phy_formal_near @16:m s:0 u:0 n f c:dram
segment:_Read_Frame_xdata_Phy_formal_near @17:m s:0 u:0 n f c:dram
segment:_xram_fast_copy_formal_near @18:m s:0 u:0 n f c:dram
segment:__process_ARP @19:m u:1d0
7c 00 7d 01 7e 08 7f 00 12 00 00 ef 60 00 7e a2
7f 00 02 00 00 7e 06 7f 04 12 00 00 ef 60 00 7e
a2 7f 00 02 00 00 12 00 00 8e 00 8f 00 7c 00 7d
14 7e 00 7f 00 12 00 00 7c 00 7d 02 ae 00 af 00
d3 ef 9d ee 9c 40 00 7e a3 7f 00 02 00 00 ae 00
af 00 ef 64 01 4e 60 00 02 00 00 90 00 00 12 00
00 90 00 00 12 00 00 c3 12 00 00 60 00 7e a4 7f
00 02 00 00 7e 00 7f 2a 12 00 00 7c 00 7d 06 7e
00 7f 00 12 00 00 7c 00 7d 06 7e 00 7f 00 12 00
00 7e 08 7f 06 12 00 00 7c 00 7d 01 7e 08 7f 00
12 00 00 7c 06 7d 04 7e 00 7f 02 12 00 00 7c 00
7d 06 7e 00 7f 00 12 00 00 90 00 00 12 00 00 12
00 00 7c 00 7d 0a 7e 00 7f 00 12 00 00 12 00 00
7e a0 7f 00 02 00 00 75 00 00 75 00 00 e4 f5 00
85 00 83 85 00 82 e0 ff 70 00 02 00 00 ae 00 af
00 0f ef 70 00 0e 85 06 83 85 07 82 e0 ff bf 06
00 80 00 02 00 00 ae 00 af 00 74 08 2f ff e4 3e
fe 8e 83 8f 82 12 00 00 12 00 00 90 00 00 12 00
00 12 00 00 c3 12 00 00 60 00 90 00 00 12 00 00
12 00 00 12 00 00 90 00 00 12 00 00 12 00 00 ec
4d 4e 4f 70 00 02 00 00 90 00 00 12 00 00 90 00
00 12 00 00 c3 12 00 00 60 00 02 00 00 7a 00 7b
06 ae 00 af 00 74 02 2f fd e4 3e fc 7e 00 7f 00
12 00 00 ae 00 af 00 0f ef 70 00 0e 85 06 83 85
07 82 74 07 f0 ae 00 af 00 74 18 2f ff e4 3e fe
85 06 83 85 07 82 e4 f0 ae 00 af 00 74 19 2f ff
e4 3e fe 85 06 83 85 07 82 74 01 f0 7e a5 7f 00
80 00 05 00 74 32 25 00 f5 00 e4 35 00 f5 00 7d
02 af 00 c3 ef 9d 50 00 02 00 00 7e a1 7f 00 22
segment:_process_ICMP_formal_near @1a:m s:0 u:0 n f c:dram
segment:_process_ICMP_local_near @1b:m s:2 u:0 n f c:dram
segment:_ip_check_formal_near @1c:m s:0 u:0 n f c:dram
segment:__process_ICMP @1d:m u:11d
8e 00 8f 00 7c 00 7d 14 ae 00 af 00 d3 ef 9d ee
9c 40 00 75 00 00 75 00 14 ac 00 ad 00 7e 00 7f
00 12 00 00 90 00 00 e0 ff 70 00 7e b0 7f 00 02
00 00 90 00 00 e0 ff bf 08 00 80 00 02 00 00 90
00 00 e4 f0 90 00 00 e4 f0 a3 f0 ac 00 ad 00 7e
00 7f 00 12 00 00 ef f4 ff ee f4 fe 90 00 00 12
00 00 90 00 00 74 45 f0 a3 e4 f0 ae 00 af 00 74
14 2f ff e4 3e fe 90 00 00 12 00 00 90 00 00 e4
f0 a3 f0 90 00 00 74 40 f0 a3 e4 f0 90 00 00 74
64 f0 90 00 00 74 01 f0 90 00 00 e4 f0 a3 f0 90
00 00 12 00 00 90 00 00 12 00 00 90 00 00 12 00
00 90 00 00 12 00 00 7c 00 7d 14 7e 00 7f 00 12
00 00 ef f4 ff ee f4 fe 90 00 00 12 00 00 ae 00
af 00 74 22 2f ff e4 3e fe 12 00 00 7c 00 7d 06
7e 00 7f 00 12 00 00 7c 00 7d 06 7e 00 7f 00 12
00 00 7e 08 7f 00 12 00 00 7c 00 7d 14 7e 00 7f
00 12 00 00 ac 00 ad 00 7e 00 7f 00 12 00 00 12
00 00 7e b1 7f 00 80 00 7e b2 7f 00 22
segment:_process_UDP_formal_near @1e:m s:0 u:0 n f c:dram
segment:_process_UDP_local_near @1f:m s:c u:0 n f c:dram
segment:__process_UDP @20:m u:10d
8e 00 8f 00 12 00 00 8e 00 8f 00 12 00 00 8e 00
8f 00 ae 00 af 00 12 00 00 ef 60 00 7e e1 7f 00
02 00 00 12 00 00 75 00 00 75 00 00 e4 f5 00 f5
00 85 00 83 85 00 82 e0 ff bf 01 00 80 00 02 00
00 ae 00 af 00 74 0e 2f ff e4 3e fe 8e 83 8f 82
12 00 00 ae 00 af 00 ed 6f 70 00 ec 6e 60 00 02
00 00 ae 00 af 00 74 0c 2f fd e4 3e fc ae 00 af
00 8c 83 8d 82 12 00 00 ae 00 af 00 74 08 2f fb
e4 3e fa 90 00 00 12 00 00 8a 83 8b 82 12 00 00
7a 00 7b 06 ae 00 af 00 74 02 2f fd e4 3e fc 7e
00 7f 00 12 00 00 74 f8 25 00 f5 00 74 ff 35 00
f5 00 7c 00 7d 64 ae 00 af 00 d3 ef 9d ee 9c 50
00 ac 00 ad 00 7e 00 7f 00 12 00 00 ae 00 af 00
90 00 00 12 00 00 ae 00 af 00 e4 2f ff 74 e2 3e
fe 80 00 05 00 e5 00 70 00 05 00 74 32 25 00 f5
00 e4 35 00 f5 00 7c 00 7d 02 ae 00 af 00 c3 ef
9d ee 9c 50 00 02 00 00 7e e0 7f 00 22
segment:_send_upd_formal_near @21:m s:8 u:0 n f c:dram
segment:_send_upd_local_near @22:m s:6 u:0 n f c:dram
segment:__send_upd @23:m u:de
8c 00 8d 00 8e 00 8f 00 8a 00 8b 00 78 00 12 00
00 90 00 00 74 45 f0 a3 e4 f0 ae 00 af 00 74 1c
2f ff e4 3e fe 90 00 00 12 00 00 90 00 00 e4 f0
a3 f0 90 00 00 74 40 f0 a3 e4 f0 90 00 00 74 64
f0 90 00 00 74 11 f0 90 00 00 e4 f0 a3 f0 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 12 00 00
7c 00 7d 14 7e 00 7f 00 12 00 00 ef f4 ff ee f4
fe 90 00 00 12 00 00 ae 00 af 00 74 2a 2f ff e4
3e fe 12 00 00 7c 00 7d 06 ae 00 af 00 12 00 00
7c 00 7d 06 7e 00 7f 00 12 00 00 7e 08 7f 00 12
00 00 7c 00 7d 14 7e 00 7f 00 12 00 00 ae 00 af
00 12 00 00 ae 00 af 00 12 00 00 ae 00 af 00 74
08 2f ff e4 3e fe 12 00 00 e4 fe ff 12 00 00 ac
00 ad 00 ae 00 af 00 12 00 00 12 00 00 22
segment:_send_TCP_formal_near @24:m s:4 u:0 n f c:dram
segment:_send_TCP_local_near @25:m s:6 u:0 n f c:dram
segment:_ip_check_more_formal_near @26:m s:0 u:0 n f c:dram
segment:__send_TCP @27:m u:13a
8c 00 8d 00 8e 00 8f 00 8a 00 8b 00 90 00 00 74
50 f0 90 00 00 e4 f0 a3 f0 90 00 00 12 00 00 90
00 00 12 00 00 74 00 12 00 00 90 00 00 12 00 00
90 00 00 e4 f0 a3 74 06 f0 ae 00 af 00 74 14 2f
ff e4 3e fe 90 00 00 12 00 00 ac 00 ad 00 ae 00
af 00 12 00 00 aa 06 ab 07 7c 00 7d 0c 7e 00 7f
00 12 00 00 aa 06 ab 07 7c 00 7d 14 7e 00 7f 00
12 00 00 ef f4 ff ee f4 fe 90 00 00 12 00 00 90
00 00 74 45 f0 a3 e4 f0 ae 00 af 00 74 28 2f ff
e4 3e fe 90 00 00 12 00 00 90 00 00 e4 f0 a3 f0
90 00 00 74 40 f0 a3 e4 f0 90 00 00 74 64 f0 90
00 00 74 06 f0 90 00 00 e4 f0 a3 f0 90 00 00 12
00 00 90 00 00 12 00 00 74 00 12 00 00 90 00 00
12 00 00 7c 00 7d 14 7e 00 7f 00 12 00 00 ef f4
ff ee f4 fe 90 00 00 12 00 00 ae 00 af 00 74 36
2f ff e4 3e fe 12 00 00 7c 00 7d 06 ae 00 af 00
12 00 00 7c 00 7d 06 7e 00 7f 00 12 00 00 7e 08
7f 00 12 00 00 7c 00 7d 14 7e 00 7f 00 12 00 00
7c 00 7d 14 7e 00 7f 00 12 00 00 ac 00 ad 00 ae
00 af 00 12 00 00 12 00 00 22
segment:_send_incomming_reset_TCP_formal_near @28:m s:0 u:0 n f c:dram
segment:_send_incomming_reset_TCP_local_near @29:m s:2 u:0 n f c:dram
segment:__send_incomming_reset_TCP @2a:m u:8c
8c 00 8d 00 12 00 00 aa 06 ab 07 90 00 00 12 00
00 90 00 00 12 00 00 90 00 00 12 00 00 90 00 00
12 00 00 90 00 00 e4 f0 a3 f0 e4 f9 f8 90 00 00
12 00 00 12 00 00 12 00 00 90 00 00 e0 ff 54 03
ff 60 00 05 0b e5 0b 70 00 05 0a e5 0a 70 00 05
09 e5 09 70 00 05 08 90 00 00 12 00 00 90 00 00
12 00 00 12 00 00 90 00 00 12 00 00 90 00 00 74
14 f0 85 0c 00 85 0d 00 85 0e 00 85 0f 00 aa 00
ab 00 e4 fc fd e4 fe ff 12 00 00 22
segment:_send_match_ok_TCP_formal_near @2b:m s:0 u:0 n f c:dram
segment:_send_match_ok_TCP_local_near @2c:m s:0 u:0 n f c:dram
segment:__send_match_ok_TCP @2d:m u:8a
a8 04 a9 05 8e 0c 8f 0d 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 12 00 00
90 00 00 e4 f0 a3 74 64 f0 90 00 00 e0 f5 08 a3
e0 f5 09 a3 e0 f5 0a a3 e0 f5 0b eb 54 02 ff 60
00 e5 0b 15 0b 70 00 e5 0a 15 0a 70 00 e5 09 15
09 70 00 15 08 12 00 00 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 eb f0 90
00 00 12 00 00 74 00 12 00 00 7a 00 7b 00 ac 00
ad 01 ae 0c af 0d 12 00 00 22
segment:_state_machine_TCP_formal_near @2e:m s:0 u:0 n f c:dram
segment:_state_machine_TCP_local_near @2f:m s:2 u:0 n f c:dram
segment:__state_machine_TCP @30:m u:3b7
8e 00 8f 00 90 00 00 e0 ff 54 04 ff 60 00 12 00
00 90 00 00 e4 f0 7e f9 7f 00 02 00 00 90 00 00
74 06 f0 90 00 00 e0 fd 7f 04 d3 ed 9f 40 00 02
00 00 90 00 00 ed 2d 50 00 05 83 25 82 f5 82 50
00 05 83 74 01 93 c0 e0 e4 93 c0 e0 22 90 00 00
e0 ff 54 02 ff 70 00 02 00 00 90 00 00 12 00 00
90 00 00 12 00 00 90 00 00 12 00 00 90 00 00 12
00 00 90 00 00 12 00 00 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 ae 00 af 00 ab 07
aa 06 e4 f9 f8 90 00 00 12 00 00 12 00 00 e4 f8
f9 fa 7b 01 12 00 00 90 00 00 12 00 00 af 00 7e
00 90 00 00 12 00 00 90 00 00 e4 f0 a3 f0 7b 12
e4 fc fd e4 fe ff 12 00 00 90 00 00 74 01 f0 90
00 00 e4 f0 7e f2 7f 00 02 00 00 90 00 00 e0 ff
54 10 ff 70 00 02 00 00 7c 00 7d 64 ae 00 af 00
d3 ef 9d ee 9c 40 00 75 00 00 75 00 64 90 00 00
12 00 00 90 00 00 12 00 00 c3 12 00 00 60 00 7e
f3 7f 00 02 00 00 90 00 00 74 02 f0 ae 00 af 00
ab 07 aa 06 e4 f9 f8 90 00 00 12 00 00 12 00 00
90 00 00 12 00 00 ac 00 ad 00 7e 00 7f 00 12 00
00 ae 00 af 00 90 00 00 12 00 00 90 00 00 12 00
00 ee 4f 60 00 90 00 00 12 00 00 90 00 00 12 00
00 c3 12 00 00 70 00 90 00 00 12 00 00 12 00 00
90 00 00 12 00 00 12 00 00 90 00 00 12 00 00 12
00 00 90 00 00 e4 f0 a3 f0 90 00 00 e4 f0 a3 f0
90 00 00 e4 f0 a3 f0 02 00 00 90 00 00 12 00 00
ee 4f 60 00 90 00 00 12 00 00 90 00 00 12 00 00
c3 12 00 00 70 00 90 00 00 12 00 00 12 00 00 90
00 00 12 00 00 12 00 00 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 12 00 00
90 00 00 12 00 00 90 00 00 12 00 00 90 00 00 e4
f0 a3 f0 90 00 00 e4 f0 a3 f0 02 00 00 90 00 00
12 00 00 ee 4f 60 00 90 00 00 12 00 00 90 00 00
12 00 00 c3 12 00 00 70 00 90 00 00 12 00 00 12
00 00 90 00 00 12 00 00 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 12 00 00
90 00 00 12 00 00 90 00 00 12 00 00 90 00 00 12
00 00 90 00 00 12 00 00 90 00 00 12 00 00 90 00
00 12 00 00 90 00 00 12 00 00 90 00 00 e4 f0 a3
f0 90 00 00 e0 ff 54 01 ff 70 00 e5 00 45 00 70
00 90 00 00 e0 ff 54 02 ff 70 00 02 00 00 7b 10
e4 fc fd e4 fe ff 12 00 00 80 00 90 00 00 e0 ff
54 01 ff 60 00 e4 f8 f9 fa 7b 01 90 00 00 12 00
00 12 00 00 90 00 00 12 00 00 7b 19 e4 fc fd e4
fe ff 12 00 00 e4 f8 f9 fa 7b 01 90 00 00 12 00
00 12 00 00 90 00 00 12 00 00 90 00 00 74 04 f0
90 00 00 12 00 00 ee 4f 70 00 90 00 00 e4 f0 7e
f5 7f 00 02 00 00 90 00 00 e0 ff 54 10 ff 70 00
02 00 00 90 00 00 12 00 00 90 00 00 12 00 00 c3
12 00 00 60 00 7e f3 7f 00 02 00 00 90 00 00 e0
ff 54 01 ff 60 00 e4 f8 f9 fa 7b 01 90 00 00 12
00 00 12 00 00 90 00 00 12 00 00 7b 10 e4 fc fd
e4 fe ff 12 00 00 12 00 00 90 00 00 e4 f0 90 00
00 e4 f0 7e fb 7f 00 02 00 00 90 00 00 e0 ff 54
10 ff 60 00 90 00 00 12 00 00 90 00 00 12 00 00
c3 12 00 00 60 00 7e f3 7f 00 80 00 90 00 00 e4
f0 12 00 00 90 00 00 e4 f0 7e fc 7f 00 80 00 12
00 00 90 00 00 e4 f0 90 00 00 12 00 00 7c 00 7d
00 ae 00 af 00 12 00 00 7e f8 7f 00 22 00 00 00
00 00 00 00 00 00 00
segment:_final_timeout_socket_formal_near @31:m s:0 u:0 n f c:dram
segment:_final_timeout_socket_local_near @32:m s:0 u:0 n f c:dram
segment:__final_timeout_socket @33:m u:2b
90 00 00 e0 ff bf 02 00 7b 04 e4 fc fd e4 fe ff
12 00 00 12 00 00 90 00 00 e4 f0 7e fa 7f 00 80
00 90 00 00 e4 f0 7e d0 7f 00 22
segment:_retransmit_socket_formal_near @34:m s:0 u:0 n f c:dram
segment:_retransmit_socket_local_near @35:m s:4 u:0 n f c:dram
segment:__retransmit_socket @36:m u:108
90 00 00 e0 ff bf 02 00 80 00 02 00 00 90 00 00
e0 fd 7f 01 c3 ed 9f 50 00 02 00 00 7f 04 d3 ed
9f 40 00 02 00 00 90 00 00 ed 2d 50 00 05 83 25
82 f5 82 50 00 05 83 74 01 93 c0 e0 e4 93 c0 e0
22 7b 12 e4 fc fd e4 fe ff 12 00 00 7e f1 7f 00
02 00 00 90 00 00 12 00 00 ee 4f 60 00 90 00 00
e0 f5 00 a3 e0 f5 00 a3 e0 f5 00 a3 e0 f5 00 90
00 00 12 00 00 ab 07 aa 06 e4 f9 f8 90 00 00 12
00 00 12 00 00 90 00 00 12 00 00 7b 18 90 00 00
12 00 00 90 00 00 12 00 00 12 00 00 74 00 12 00
00 90 00 00 12 00 00 7e f1 7f 00 02 00 00 90 00
00 74 28 f0 e4 fe ff 02 00 00 7b 19 e4 fc fd e4
fe ff 12 00 00 7e f1 7f 00 80 00 90 00 00 e0 ff
bf 01 00 90 00 00 e0 ff 64 06 70 00 90 00 00 12
00 00 12 00 00 7e e3 7f 00 80 00 90 00 00 e4 f0
90 00 00 74 28 f0 e4 fe ff 80 00 7e d1 7f 00 22
00 00 00 00 00 00 00 00
segment:_periodical_socket_formal_near @37:m s:0 u:0 n f c:dram
segment:_periodical_socket_local_near @38:m s:1 u:0 n f c:dram
segment:__periodical_socket @39:m u:37
90 00 00 e0 ff 1f ef 60 00 90 00 00 ef f0 e4 fe
ff 80 00 90 00 00 74 06 f0 90 00 00 e0 ff 0f 8f
00 74 04 65 00 70 00 12 00 00 80 00 af 00 90 00
00 ef f0 12 00 00 22
segment:_process_TCP_formal_near @3a:m s:0 u:0 n f c:dram
segment:_process_TCP_local_near @3b:m s:7 u:0 n f c:dram
segment:_Read_Frame_long_Phy_formal_near @3c:m s:0 u:0 n f c:dram
segment:__process_TCP @3d:m u:1e7
8e 00 8f 00 7c 00 7d 14 7e 00 7f 00 12 00 00 74
ec 25 00 f5 00 74 ff 35 00 f5 00 90 00 00 e0 ff
74 b0 2f ff 8f 00 80 00 74 f0 25 00 f5 00 74 fc
25 00 f5 00 74 ff 35 00 f5 00 12 00 00 e5 00 70
00 75 00 00 75 00 00 e4 f5 00 85 00 83 85 00 82
e0 ff bf 02 00 80 00 02 00 00 ae 00 af 00 74 08
2f ff e4 3e fe 8e 83 8f 82 12 00 00 90 00 00 12
00 00 c3 12 00 00 60 00 02 00 00 ae 00 af 00 74
0c 2f ff e4 3e fe 8e 83 8f 82 12 00 00 90 00 00
12 00 00 ed 6f 70 00 ec 6e 60 00 02 00 00 ae 00
af 00 74 0e 2f ff e4 3e fe 8e 83 8f 82 12 00 00
90 00 00 12 00 00 ed 6f 70 00 ec 6e 60 00 80 00
7a 00 7b 32 7c 00 7d 00 ae 00 af 00 12 00 00 ae
00 af 00 12 00 00 8e 00 8f 00 7a 00 7b 32 ac 00
ad 00 7e 00 7f 00 12 00 00 af 00 ad 07 7c 00 ae
00 af 00 ed 2f ff ec 3e fe 02 00 00 05 00 74 32
25 00 f5 00 e4 35 00 f5 00 7d 02 af 00 c3 ef 9d
50 00 02 00 00 90 00 00 e0 ff 54 02 ff 70 00 7e
f8 7f 00 02 00 00 75 00 00 75 00 00 e4 f5 00 85
00 83 85 00 82 e0 ff bf 02 00 80 00 02 00 00 ae
00 af 00 0f ef 70 00 0e 85 06 83 85 07 82 e0 ff
60 00 02 00 00 ae 00 af 00 74 0e 2f ff e4 3e fe
8e 83 8f 82 12 00 00 90 00 00 12 00 00 ed 6f 70
00 ec 6e 60 00 80 00 7a 00 7b 32 7c 00 7d 00 ae
00 af 00 12 00 00 ae 00 af 00 12 00 00 8e 00 8f
00 7a 00 7b 32 ac 00 ad 00 7e 00 7f 00 12 00 00
e5 00 45 00 60 00 af 00 ad 07 7c 00 ae 00 af 00
ed 2f ff ec 3e fe 80 00 05 00 74 32 25 00 f5 00
e4 35 00 f5 00 7d 02 af 00 c3 ef 9d 50 00 02 00
00 90 00 00 12 00 00 7c 00 7d 00 ae 00 af 00 12
00 00 7e f0 7f 00 22
segment:_process_IP_formal_near @3e:m s:0 u:0 n f c:dram
segment:_process_IP_local_near @3f:m s:5 u:0 n f c:dram
segment:__process_IP @40:m u:d7
12 00 00 8e 00 8f 00 7f 00 53 06 f0 ef 70 00 ee
64 40 60 00 7e c0 7f 00 02 00 00 12 00 00 8e 00
8f 00 12 00 00 12 00 00 53 06 3f ee 4f 60 00 7e
c1 7f 00 02 00 00 12 00 00 8f 00 12 00 00 12 00
00 90 00 00 12 00 00 12 00 00 74 ec 25 00 f5 00
74 ff 35 00 f5 00 ae 00 af 00 7d 00 ee 54 0f fc
7f 08 ae 04 ed 8f f0 05 f0 80 00 ce c3 13 ce 13
d5 f0 00 ff 74 fb 2f ff 74 ff 3e fe 8e 00 8f 00
80 00 12 00 00 74 fc 25 00 f5 00 74 ff 35 00 f5
00 ac 00 ad 00 74 ff 2d ff 74 ff 3c fe 8e 00 8f
00 ec 4d 70 00 74 01 65 00 70 00 ae 00 af 00 12
00 00 80 00 74 06 65 00 70 00 ae 00 af 00 12 00
00 80 00 74 11 65 00 70 00 ae 00 af 00 12 00 00
80 00 7e c2 7f 00 22
segment:_send_socket_udp_formal_near @41:m s:0 u:0 n f c:dram
segment:_send_socket_udp_local_near @42:m s:0 u:0 n f c:dram
segment:__send_socket_udp @43:m u:79
a8 04 a9 05 8a 08 8b 09 e4 fe fc 7d 32 12 00 00
7c 00 7d 00 ed 2f fb ec 3e fa 85 02 83 85 03 82
e0 ff 64 01 60 00 7e e1 7f 00 80 00 74 0c 2b ff
e4 3a fe 8e 83 8f 82 12 00 00 8e 00 8f 00 74 0e
2b ff e4 3a fe 8e 83 8f 82 12 00 00 8e 00 8f 00
74 08 2b ff e4 3a fe 8e 83 8f 82 12 00 00 74 00
12 00 00 74 02 2b fb e4 3a fa ac 08 ad 09 ae 00
af 01 12 00 00 e4 fe ff 22
segment:_send_socket_tcp_formal_near @44:m s:0 u:0 n f c:dram
segment:_send_socket_tcp_local_near @45:m s:6 u:0 n f c:dram
segment:__send_socket_tcp @46:m u:152
8a 00 8b 00 8c 00 8d 00 e4 fe fc 7d 32 12 00 00
7c 00 7d 00 ed 2f ff ec 3e fe 8e 00 8f 00 7a 00
7b 32 7c 00 7d 00 ae 00 af 00 12 00 00 90 00 00
e0 ff bf 02 00 90 00 00 e0 ff 64 02 60 00 7e f0
7f 00 02 00 00 e5 00 45 00 70 00 ae 00 af 00 12
00 00 e4 fe ff 02 00 00 90 00 00 12 00 00 ee 4f
70 00 ae 00 af 00 90 00 00 12 00 00 ae 00 af 00
90 00 00 12 00 00 ae 00 af 00 ab 07 aa 06 e4 f9
f8 90 00 00 12 00 00 12 00 00 90 00 00 12 00 00
02 00 00 90 00 00 12 00 00 ee 4f 70 00 ae 00 af
00 90 00 00 12 00 00 ae 00 af 00 90 00 00 12 00
00 ae 00 af 00 ab 07 aa 06 e4 f9 f8 90 00 00 12
00 00 12 00 00 90 00 00 12 00 00 80 00 90 00 00
12 00 00 ee 4f 70 00 ae 00 af 00 90 00 00 12 00
00 ae 00 af 00 90 00 00 12 00 00 ae 00 af 00 ab
07 aa 06 e4 f9 f8 90 00 00 12 00 00 12 00 00 90
00 00 12 00 00 80 00 7e f4 7f 00 80 00 7b 18 ac
00 ad 00 ae 00 af 00 12 00 00 ae 00 af 00 ab 07
aa 06 e4 f9 f8 90 00 00 12 00 00 12 00 00 90 00
00 12 00 00 90 00 00 e4 f0 90 00 00 74 06 f0 7a
00 7b 32 ac 00 ad 00 7e 00 7f 00 12 00 00 e4 fe
ff 22
segment:_notready_socket_tcp_formal_near @47:m s:0 u:0 n f c:dram
segment:_notready_socket_tcp_local_near @48:m s:0 u:0 n f c:dram
segment:__notready_socket_tcp @49:m u:7f
a9 05 ad 07 e4 fc fe 7f 32 12 00 00 7a 00 7b 00
eb 2f fd ea 3e fc 85 04 83 85 05 82 e0 ff bf 02
00 74 01 2d ff e4 3c fe 85 06 83 85 07 82 e0 ff
64 02 60 00 7e f0 7f 00 02 00 00 90 00 00 e0 ff
70 00 7e d2 7f 00 80 00 e9 60 00 74 1a 2d ff e4
3c fe 8e 83 8f 82 12 00 00 ee 4f 60 00 7e f4 7f
00 80 00 74 2a 2d ff e4 3c fe 8e 83 8f 82 12 00
00 ee 4f 60 00 7e f4 7f 00 80 00 e4 fe ff 22
segment:_stringsend_socket_tcp_formal_near @4a:m s:0 u:0 n f c:dram
segment:_stringsend_socket_tcp_local_near @4b:m s:9 u:0 n f c:dram
segment:_strlen_formal_near @4c:m s:0 u:0 n f c:dram
segment:_bmove_formal_near @4d:m s:2 u:0 n f c:dram
segment:__stringsend_socket_tcp @4e:m u:73
74 00 12 00 00 8f 00 7d 01 af 00 12 00 00 ee 4f
60 00 7e f0 7f 00 02 00 00 74 00 12 00 00 12 00
00 8e 00 8f 00 7c 00 7d 64 ae 00 af 00 d3 ef 9d
ee 9c 40 00 7e d3 7f 00 80 00 12 00 00 8e 00 8f
00 e5 00 45 00 70 00 7e d2 7f 00 80 00 85 00 00
85 00 00 ae 00 af 00 ab 07 aa 06 78 00 74 00 12
00 00 12 00 00 aa 00 ab 00 ac 00 ad 00 af 00 12
00 00 22
segment:_close_socket_tcp_formal_near @4f:m s:0 u:0 n f c:dram
segment:_close_socket_tcp_local_near @50:m s:2 u:0 n f c:dram
segment:__close_socket_tcp @51:m u:8f
e4 fe fc 7d 32 12 00 00 7c 00 7d 00 ed 2f ff ec
3e fe 8e 00 8f 00 7a 00 7b 32 7c 00 7d 00 ae 00
af 00 12 00 00 90 00 00 e0 ff bf 02 00 90 00 00
e0 ff 70 00 7e f0 7f 00 02 00 00 90 00 00 12 00
00 ee 4f 60 00 7e f4 7f 00 80 00 7b 19 e4 fc fd
e4 fe ff 12 00 00 e4 f8 f9 fa 7b 01 90 00 00 12
00 00 12 00 00 90 00 00 12 00 00 90 00 00 74 03
f0 90 00 00 e4 f0 90 00 00 74 06 f0 7a 00 7b 32
ac 00 ad 00 7e 00 7f 00 12 00 00 e4 fe ff 22
segment:_open_socket_udp_formal_near @52:m s:2 u:0 n f c:dram
segment:_open_socket_udp_local_near @53:m s:6 u:0 n f c:dram
segment:__open_socket_udp @54:m u:b2
74 00 12 00 00 e4 fe fc 7d 32 12 00 00 7c 00 7d
00 ed 2f ff ec 3e fe 8e 00 8f 00 7a 00 7b 32 7c
00 7d 00 ae 00 af 00 12 00 00 90 00 00 e0 ff bf
01 00 90 00 00 e0 ff 60 00 7e e4 7f 00 02 00 00
74 00 12 00 00 90 00 00 12 00 00 ae 00 af 00 90
00 00 12 00 00 78 ff 79 ff 7a ff 7b ff 74 00 12
00 00 c3 12 00 00 60 00 74 00 12 00 00 12 00 00
90 00 00 74 06 f0 90 00 00 e4 f0 90 00 00 74 06
f0 80 00 7f 06 90 00 00 74 ff f0 a3 df 00 90 00
00 74 07 f0 90 00 00 e4 f0 90 00 00 74 01 f0 7a
00 7b 32 ac 00 ad 00 7e 00 7f 00 12 00 00 e4 fe
ff 22
segment:_close_socket_udp_formal_near @55:m s:0 u:0 n f c:dram
segment:_close_socket_udp_local_near @56:m s:2 u:0 n f c:dram
segment:__close_socket_udp @57:m u:52
e4 fe fc 7d 32 12 00 00 7c 00 7d 00 ed 2f ff ec
3e fe 8e 00 8f 00 7a 00 7b 32 7c 00 7d 00 ae 00
af 00 12 00 00 90 00 00 e0 ff bf 01 00 90 00 00
e0 ff 70 00 7e e4 7f 00 80 00 90 00 00 e4 f0 7a
00 7b 32 ac 00 ad 00 7e 00 7f 00 12 00 00 e4 fe
ff 22
segment:neardata @58:m u:2 c:dram
00 00
segment:_poll_net_formal_near @59:m s:0 u:0 n f c:dram
segment:_poll_net_local_near @5a:m s:5 u:0 n f c:dram
segment:_Init_Mac_formal_near @5b:m s:0 u:0 n f c:dram
segment:_find_RX_Buffer_formal_near @5c:m s:0 u:0 n f c:dram
segment:_init_rx_formal_near @5d:m s:0 u:0 n f c:dram
segment:__poll_net @5e:m u:27c
90 d0 07 e0 ff 54 10 ff 60 00 12 00 00 75 00 00
75 00 00 90 d0 07 e0 ff 54 03 ff 60 00 90 d4 00
e4 f0 a3 f0 90 d0 07 74 03 f0 90 d0 07 e0 ff 54
0c ff 70 00 02 00 00 e5 00 45 00 70 00 12 00 00
8e 00 8f 00 e5 00 45 00 60 00 02 00 00 e4 fe ff
02 00 00 e4 fb 80 00 ae 00 af 00 74 08 2f fd e4
3e fc 8c 00 8d 00 7e d4 7f a0 ed 6f 70 00 ec 6e
60 00 80 00 7e d4 7f 00 74 08 2f ff e4 3e fe 8e
00 8f 00 ad 03 ab 05 0b 7f 04 c3 e5 05 95 07 50
00 ae 00 af 00 74 02 2f ff e4 3e fe 8e 83 8f 82
12 00 00 7f 00 53 06 80 ee 4f 60 00 02 00 00 ae
00 af 00 74 02 2f ff e4 3e fe 8e 83 8f 82 12 00
00 7f 00 53 06 80 ee 4f 60 00 e4 fe ff 02 00 00
12 00 00 12 00 00 12 00 00 7c 00 7d 06 7e 00 7f
00 12 00 00 12 00 00 8e 00 8f 00 7c 05 7d dc ae
00 af 00 d3 ef 9d ee 9c 50 00 7e aa 7f aa 12 00
00 ef 60 00 e4 fe ff 02 00 00 7c 03 e4 fd fe ff
12 00 00 ef 60 00 e4 fe ff 02 00 00 12 00 00 8e
00 8f 00 e4 f5 00 f5 00 ae 00 af 00 bf 06 00 be
08 00 12 00 00 8e 00 8f 00 80 00 ae 00 af 00 bf
00 00 be 08 00 12 00 00 8e 00 8f 00 e4 fc fd ae
00 af 00 8e 83 8f 82 12 00 00 74 02 25 00 f5 09
e4 35 00 f5 08 ae 08 af 09 8e 83 8f 82 12 00 00
7f 00 53 06 20 43 06 80 ef fd ee 44 40 fc ae 08
af 09 8e 83 8f 82 12 00 00 aa 00 ab 00 ae 00 af
00 74 08 2f fd e4 3e fc 8c 00 8d 00 7e d4 7f 00
74 28 2f ff e4 3e fe ed 6f 70 00 ec 6e 60 00 80
00 7e d4 7f 00 74 08 2f ff e4 3e fe 8e 00 8f 00
ae 00 af 00 eb 6f 70 00 ea 6e 60 00 ae 00 af 00
74 02 2f ff e4 3e fe 8e 83 8f 82 12 00 00 7f 00
53 06 80 ee 4f 60 00 90 d0 07 74 0c f0 ae 00 af
00 02 00 00 e5 00 60 00 02 00 00 05 00 75 00 0f
75 00 00 75 00 00 e4 f5 00 ae 00 af 00 0f ef 70
00 0e 85 06 83 85 07 82 e0 ff 60 00 7a 00 7b 32
7c 00 7d 00 ae 00 af 00 12 00 00 12 00 00 8e 00
8f 00 7a 00 7b 32 ac 00 ad 00 7e 00 7f 00 12 00
00 e5 00 45 00 60 00 af 00 ad 07 7c 00 ae 00 af
00 ed 2f ff ec 3e fe 80 00 05 00 74 32 25 00 f5
00 e4 35 00 f5 00 7d 02 af 00 c3 ef 9d 50 00 02
00 00 7e d4 7f 00 80 00 e4 fe ff 22
segment:_irq_timer0int @5f:b u:3
02 00 00
segment:_timer0int_formal_near @60:m s:0 u:0 n f c:dram
segment:_timer0int_local_near @61:m s:0 u:0 n f c:dram
segment:__timer0int @62:m u:18
c0 07 c0 e0 c0 d0 53 d0 e7 af 00 ef 60 00 1f 8f
00 d0 d0 d0 e0 d0 07 32
segment:_Init_net_formal_near @63:m s:0 u:0 n f c:dram
segment:_Init_net_local_near @64:m s:0 u:0 n f c:dram
segment:_formal_near @65:m s:0 u:0 n f c:dram
segment:__Init_net @66:m u:23
12 00 00 ee 4f 60 00 7f 01 80 00 c2 af 53 89 f0
43 89 01 d2 8c d2 a9 d2 af 7e 00 7f 64 12 00 00
e4 ff 22
segment:bss @67:m u:2e0 n c:xram
segment:nearbss @68:m u:2 n c:dram
sgraph:_allocate_tx_buf_formal_near _allocate_tx_buf_local_near __allocate_tx_buf
sgraph:_free_tx_buf_formal_near _free_tx_buf_local_near __free_tx_buf
sgraph:_free_match_socket_formal_near _free_match_socket_local_near __free_match_socket
sgraph:_free_match_socket_local_near _free_tx_buf_formal_near __free_match_socket 0
sgraph:_free_match_socket_local_near _free_tx_buf_formal_near __free_match_socket 0
sgraph:_free_match_socket_local_near _free_tx_buf_formal_near __free_match_socket 0
sgraph:_send_request_ARP_formal_near _send_request_ARP_local_near __send_request_ARP
sgraph:_send_request_ARP_local_near _CommitSend_Phy_formal_near __send_request_ARP 0
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 0
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_word_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_xdata_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_word_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_xdata_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_word_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _Write_Frame_long_Phy_formal_near __send_request_ARP 4
sgraph:_send_request_ARP_local_near _RequestSend_Phy_formal_near __send_request_ARP 4
sgraph:_process_ARP_formal_near _process_ARP_local_near __process_ARP
sgraph:_process_ARP_local_near _xram_fast_copy_formal_near __process_ARP 3
sgraph:_process_ARP_local_near _CommitSend_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_xdata_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_long_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_xdata_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_long_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_long_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_word_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_xdata_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Write_Frame_xdata_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _RequestSend_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _Read_Frame_xdata_Phy_formal_near __process_ARP 2
sgraph:_process_ARP_local_near _Read_Frame_word_Phy_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _net_match_uint_formal_near __process_ARP 0
sgraph:_process_ARP_local_near _net_match_ulong_formal_near __process_ARP 0
sgraph:_process_ICMP_formal_near _process_ICMP_local_near __process_ICMP
sgraph:_process_ICMP_local_near _CommitSend_Phy_formal_near __process_ICMP 0
sgraph:_process_ICMP_local_near _Write_Frame_xdata_Phy_formal_near __process_ICMP 0
sgraph:_process_ICMP_local_near _Write_Frame_xdata_Phy_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _Write_Frame_word_Phy_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _Write_Frame_xdata_Phy_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _Write_Frame_xdata_Phy_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _RequestSend_Phy_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _ip_check_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _ip_check_formal_near __process_ICMP 2
sgraph:_process_ICMP_local_near _Read_Frame_xdata_Phy_formal_near __process_ICMP 2
sgraph:_process_UDP_formal_near _process_UDP_local_near __process_UDP
sgraph:_process_UDP_local_near _Read_Frame_xdata_Phy_formal_near __process_UDP c
sgraph:_process_UDP_local_near _xram_fast_copy_formal_near __process_UDP a
sgraph:_process_UDP_local_near _Read_Frame_word_Phy_formal_near __process_UDP 6
sgraph:_process_UDP_local_near _net_match_uint_formal_near __process_UDP 6
sgraph:_process_UDP_local_near _Read_Frame_word_Phy_formal_near __process_UDP 4
sgraph:_process_UDP_local_near _Read_Frame_word_Phy_formal_near __process_UDP 2
sgraph:_send_upd_formal_near _send_upd_local_near __send_upd
sgraph:_send_upd_local_near _CommitSend_Phy_formal_near __send_upd 0
sgraph:_send_upd_local_near _Write_Frame_xdata_Phy_formal_near __send_upd 0
sgraph:_send_upd_local_near _Write_Frame_word_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_word_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_word_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_word_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_xdata_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_word_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_xdata_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _Write_Frame_xdata_Phy_formal_near __send_upd 4
sgraph:_send_upd_local_near _RequestSend_Phy_formal_near __send_upd 6
sgraph:_send_upd_local_near _ip_check_formal_near __send_upd 6
sgraph:_send_TCP_formal_near _send_TCP_local_near __send_TCP
sgraph:_send_TCP_local_near _CommitSend_Phy_formal_near __send_TCP 0
sgraph:_send_TCP_local_near _Write_Frame_xdata_Phy_formal_near __send_TCP 0
sgraph:_send_TCP_local_near _Write_Frame_xdata_Phy_formal_near __send_TCP 4
sgraph:_send_TCP_local_near _Write_Frame_xdata_Phy_formal_near __send_TCP 4
sgraph:_send_TCP_local_near _Write_Frame_word_Phy_formal_near __send_TCP 4
sgraph:_send_TCP_local_near _Write_Frame_xdata_Phy_formal_near __send_TCP 4
sgraph:_send_TCP_local_near _Write_Frame_xdata_Phy_formal_near __send_TCP 4
sgraph:_send_TCP_local_near _RequestSend_Phy_formal_near __send_TCP 6
sgraph:_send_TCP_local_near _ip_check_formal_near __send_TCP 6
sgraph:_send_TCP_local_near _ip_check_more_formal_near __send_TCP 6
sgraph:_send_TCP_local_near _ip_check_more_formal_near __send_TCP 6
sgraph:_send_TCP_local_near _ip_check_formal_near __send_TCP 6
sgraph:_send_incomming_reset_TCP_formal_near _send_incomming_reset_TCP_local_near __send_incomming_reset_TCP
sgraph:_send_incomming_reset_TCP_local_near _send_TCP_formal_near __send_incomming_reset_TCP 2
sgraph:_send_match_ok_TCP_formal_near _send_match_ok_TCP_local_near __send_match_ok_TCP
sgraph:_send_match_ok_TCP_local_near _send_TCP_formal_near __send_match_ok_TCP 0
sgraph:_state_machine_TCP_formal_near _state_machine_TCP_local_near __state_machine_TCP
sgraph:_state_machine_TCP_local_near _send_incomming_reset_TCP_formal_near __state_machine_TCP 0
sgraph:_state_machine_TCP_local_near _free_match_socket_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_match_socket_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_match_socket_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _send_match_ok_TCP_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _send_match_ok_TCP_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _send_match_ok_TCP_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_tx_buf_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _Read_Frame_xdata_Phy_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _send_match_ok_TCP_formal_near __state_machine_TCP 2
sgraph:_state_machine_TCP_local_near _free_match_socket_formal_near __state_machine_TCP 2
sgraph:_final_timeout_socket_formal_near _final_timeout_socket_local_near __final_timeout_socket
sgraph:_final_timeout_socket_local_near _free_match_socket_formal_near __final_timeout_socket 0
sgraph:_final_timeout_socket_local_near _send_match_ok_TCP_formal_near __final_timeout_socket 0
sgraph:_retransmit_socket_formal_near _retransmit_socket_local_near __retransmit_socket
sgraph:_retransmit_socket_local_near _send_request_ARP_formal_near __retransmit_socket 0
sgraph:_retransmit_socket_local_near _send_match_ok_TCP_formal_near __retransmit_socket 0
sgraph:_retransmit_socket_local_near _send_match_ok_TCP_formal_near __retransmit_socket 4
sgraph:_retransmit_socket_local_near _send_match_ok_TCP_formal_near __retransmit_socket 0
sgraph:_periodical_socket_formal_near _periodical_socket_local_near __periodical_socket
sgraph:_periodical_socket_local_near _retransmit_socket_formal_near __periodical_socket 0
sgraph:_periodical_socket_local_near _final_timeout_socket_formal_near __periodical_socket 1
sgraph:_process_TCP_formal_near _process_TCP_local_near __process_TCP
sgraph:_process_TCP_local_near _send_incomming_reset_TCP_formal_near __process_TCP 0
sgraph:_process_TCP_local_near _xram_fast_copy_formal_near __process_TCP 7
sgraph:_process_TCP_local_near _state_machine_TCP_formal_near __process_TCP 5
sgraph:_process_TCP_local_near _xram_fast_copy_formal_near __process_TCP 5
sgraph:_process_TCP_local_near _xram_fast_copy_formal_near __process_TCP 7
sgraph:_process_TCP_local_near _state_machine_TCP_formal_near __process_TCP 5
sgraph:_process_TCP_local_near _xram_fast_copy_formal_near __process_TCP 5
sgraph:_process_TCP_local_near _Read_Frame_long_Phy_formal_near __process_TCP 3
sgraph:_process_TCP_local_near _Read_Frame_xdata_Phy_formal_near __process_TCP 2
sgraph:_process_IP_formal_near _process_IP_local_near __process_IP
sgraph:_process_IP_local_near _process_UDP_formal_near __process_IP 0
sgraph:_process_IP_local_near _process_TCP_formal_near __process_IP 5
sgraph:_process_IP_local_near _process_ICMP_formal_near __process_IP 5
sgraph:_process_IP_local_near _Read_Frame_long_Phy_formal_near __process_IP 5
sgraph:_process_IP_local_near _Read_Frame_long_Phy_formal_near __process_IP 5
sgraph:_process_IP_local_near _Read_Frame_long_Phy_formal_near __process_IP 5
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 5
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 4
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 4
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 4
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 2
sgraph:_process_IP_local_near _Read_Frame_word_Phy_formal_near __process_IP 0
sgraph:_send_socket_udp_formal_near _send_socket_udp_local_near __send_socket_udp
sgraph:_send_socket_udp_local_near _send_upd_formal_near __send_socket_udp 0
sgraph:_send_socket_tcp_formal_near _send_socket_tcp_local_near __send_socket_tcp
sgraph:_send_socket_tcp_local_near _xram_fast_copy_formal_near __send_socket_tcp 0
sgraph:_send_socket_tcp_local_near _send_match_ok_TCP_formal_near __send_socket_tcp 6
sgraph:_send_socket_tcp_local_near _free_tx_buf_formal_near __send_socket_tcp 6
sgraph:_send_socket_tcp_local_near _xram_fast_copy_formal_near __send_socket_tcp 6
sgraph:_notready_socket_tcp_formal_near _notready_socket_tcp_local_near __notready_socket_tcp
sgraph:_stringsend_socket_tcp_formal_near _stringsend_socket_tcp_local_near __stringsend_socket_tcp
sgraph:_stringsend_socket_tcp_local_near _send_socket_tcp_formal_near __stringsend_socket_tcp 0
sgraph:_stringsend_socket_tcp_local_near _bmove_formal_near __stringsend_socket_tcp 9
sgraph:_stringsend_socket_tcp_local_near _allocate_tx_buf_formal_near __stringsend_socket_tcp 7
sgraph:_stringsend_socket_tcp_local_near _strlen_formal_near __stringsend_socket_tcp 5
sgraph:_stringsend_socket_tcp_local_near _notready_socket_tcp_formal_near __stringsend_socket_tcp 5
sgraph:_close_socket_tcp_formal_near _close_socket_tcp_local_near __close_socket_tcp
sgraph:_close_socket_tcp_local_near _xram_fast_copy_formal_near __close_socket_tcp 0
sgraph:_close_socket_tcp_local_near _send_match_ok_TCP_formal_near __close_socket_tcp 2
sgraph:_close_socket_tcp_local_near _xram_fast_copy_formal_near __close_socket_tcp 2
sgraph:_open_socket_udp_formal_near _open_socket_udp_local_near __open_socket_udp
sgraph:_open_socket_udp_local_near _xram_fast_copy_formal_near __open_socket_udp 0
sgraph:_open_socket_udp_local_near _send_request_ARP_formal_near __open_socket_udp 6
sgraph:_open_socket_udp_local_near _xram_fast_copy_formal_near __open_socket_udp 6
sgraph:_close_socket_udp_formal_near _close_socket_udp_local_near __close_socket_udp
sgraph:_close_socket_udp_local_near _xram_fast_copy_formal_near __close_socket_udp 0
sgraph:_close_socket_udp_local_near _xram_fast_copy_formal_near __close_socket_udp 2
sgraph:_poll_net_formal_near _poll_net_local_near __poll_net
sgraph:_poll_net_local_near _xram_fast_copy_formal_near __poll_net 5
sgraph:_poll_net_local_near _periodical_socket_formal_near __poll_net 3
sgraph:_poll_net_local_near _xram_fast_copy_formal_near __poll_net 3
sgraph:_poll_net_local_near _process_IP_formal_near __poll_net 4
sgraph:_poll_net_local_near _process_ARP_formal_near __poll_net 4
sgraph:_poll_net_local_near _Read_Frame_word_Phy_formal_near __poll_net 2
sgraph:_poll_net_local_near _net_match_ulong_formal_near __poll_net 2
sgraph:_poll_net_local_near _net_match_uint_formal_near __poll_net 2
sgraph:_poll_net_local_near _Read_Frame_word_Phy_formal_near __poll_net 0
sgraph:_poll_net_local_near _Read_Frame_xdata_Phy_formal_near __poll_net 0
sgraph:_poll_net_local_near _Read_Frame_long_Phy_formal_near __poll_net 0
sgraph:_poll_net_local_near _Read_Frame_word_Phy_formal_near __poll_net 0
sgraph:_poll_net_local_near _init_rx_formal_near __poll_net 0
sgraph:_poll_net_local_near _find_RX_Buffer_formal_near __poll_net 0
sgraph:_poll_net_local_near _Init_Mac_formal_near __poll_net 0
sgraph:_timer0int_formal_near _timer0int_local_near __timer0int
sgraph:_Init_net_formal_near _Init_net_local_near __Init_net
sgraph:_Init_net_local_near _Init_Mac_formal_near __Init_net 0
src:tcpip\net.s51 #0
src:C:\uC51\include\reg51.def #1
src:C:\uC51\include\reg52.def #2
src:C:\uC51\include\reg51.def #3
ref byte #0:4b @3:1 _tx_buffers 8 >> 255 &
ref byte #0:4c @3:3 _tx_buffers 255 &
ref w_hl #0:4f @3:5 _tx_bufleft
ref rbyte #0:52 @3:a @3:43
ref rbyte #0:5d @3:16 @3:34
ref w_hl #0:64 @3:21 _tx_bufleft
ref w_hl #0:68 @3:27 _tx_bufleft
ref rbyte #0:72 @3:33 @3:46
ref rbyte #0:81 @3:42 @3:d
ref rbyte #0:97 @6:3 @6:5
ref rbyte #0:a0 @6:e @6:22
ref w_hl #0:a7 @6:18 _tx_bufleft
ref w_hl #0:ab @6:1e _tx_bufleft
ref w_hl #0:c4 @9:1 _match_socket 42 +
ref w_hl #0:c5 @9:4 __ld_dptr_r67
ref rbyte #0:c8 @9:9 @9:1a
ref w_hl #0:ca @9:b _match_socket 42 +
ref w_hl #0:d0 @9:12 _match_socket 48 +
ref w_hl #0:d1 @9:15 __ld_dptr_r67
ref w_hl #0:d2 @9:18 _free_tx_buf
ref w_hl #0:d6 @9:1b _match_socket 34 +
ref w_hl #0:d7 @9:1e __ld_dptr_r67
ref rbyte #0:da @9:23 @9:34
ref w_hl #0:dc @9:25 _match_socket 34 +
ref w_hl #0:e2 @9:2c _match_socket 40 +
ref w_hl #0:e3 @9:2f __ld_dptr_r67
ref w_hl #0:e4 @9:32 _free_tx_buf
ref w_hl #0:e8 @9:35 _match_socket 26 +
ref w_hl #0:e9 @9:38 __ld_dptr_r67
ref rbyte #0:ec @9:3d @9:4e
ref w_hl #0:ee @9:3f _match_socket 26 +
ref w_hl #0:f4 @9:46 _match_socket 32 +
ref w_hl #0:f5 @9:49 __ld_dptr_r67
ref w_hl #0:f6 @9:4c _free_tx_buf
ref byte #0:124 @11:1 @b:0 0 +
ref w_hl #0:125 @11:3 __st_a_r47
ref w_hl #0:129 @11:a _RequestSend_Phy
ref w_hl #0:12f @11:15 _Write_Frame_long_Phy
ref w_hl #0:133 @11:1c _Write_Frame_word_Phy
ref byte #0:137 @11:23 _my_mac 8 >> 255 &
ref byte #0:138 @11:25 _my_mac 255 &
ref w_hl #0:139 @11:27 _Write_Frame_xdata_Phy
ref w_hl #0:13d @11:2e _Write_Frame_word_Phy
ref w_hl #0:143 @11:39 _Write_Frame_long_Phy
ref w_hl #0:149 @11:44 _Write_Frame_long_Phy
ref byte #0:14d @11:4b _my_mac 8 >> 255 &
ref byte #0:14e @11:4d _my_mac 255 &
ref w_hl #0:14f @11:4f _Write_Frame_xdata_Phy
ref w_hl #0:151 @11:52 _my_ip
ref w_hl #0:152 @11:55 __ld_dptr_r47
ref w_hl #0:153 @11:58 _Write_Frame_long_Phy
ref w_hl #0:159 @11:63 _Write_Frame_long_Phy
ref w_hl #0:15d @11:6a _Write_Frame_word_Phy
ref w_hl #0:15f @11:6d _my_ip
ref w_hl #0:160 @11:70 __ld_dptr_r03
ref byte #0:161 @11:73 @b:0 0 +
ref w_hl #0:162 @11:75 __ld_a_r47
ref w_hl #0:163 @11:78 __bxor_i4
ref w_hl #0:164 @11:7b _subnet_ip
ref w_hl #0:165 @11:7e __ld_dptr_r03
ref w_hl #0:166 @11:81 __band_i4
ref rbyte #0:16b @11:88 @11:94
ref w_hl #0:16d @11:8a _gateway_ip
ref w_hl #0:16e @11:8d __ld_dptr_r47
ref w_hl #0:16f @11:90 _Write_Frame_long_Phy
ref rbyte #0:171 @11:93 @11:9c
ref byte #0:174 @11:95 @b:0 0 +
ref w_hl #0:175 @11:97 __ld_a_r47
ref w_hl #0:176 @11:9a _Write_Frame_long_Phy
ref w_hl #0:17a @11:9d _CommitSend_Phy
ref w_hl #0:1ae @19:9 _net_match_ulong
ref rbyte #0:1b0 @19:d @19:15
ref w_hl #0:1b4 @19:13 @19:1cf
ref w_hl #0:1b9 @19:1a _net_match_uint
ref rbyte #0:1bb @19:1e @19:26
ref w_hl #0:1bf @19:24 @19:1cf
ref w_hl #0:1c2 @19:27 _Read_Frame_word_Phy
ref byte #0:1c4 @19:2a @13:0 0 +
ref byte #0:1c5 @19:2c @13:0 0 + 1 +
ref byte #0:1c9 @19:32 _hframe 8 >> 255 &
ref byte #0:1ca @19:34 _hframe 255 &
ref w_hl #0:1cb @19:36 _Read_Frame_xdata_Phy
ref byte #0:1cf @19:3d @13:0 0 +
ref byte #0:1d0 @19:3f @13:0 0 + 1 +
ref rbyte #0:1d6 @19:46 @19:4e
ref w_hl #0:1da @19:4c @19:1cf
ref byte #0:1dd @19:4f @13:0 0 +
ref byte #0:1de @19:51 @13:0 0 + 1 +
ref rbyte #0:1e2 @19:57 @19:5b
ref w_hl #0:1e3 @19:59 @19:d7
ref w_hl #0:1e6 @19:5c _my_ip
ref w_hl #0:1e7 @19:5f __ld_dptr_r03
ref w_hl #0:1e8 @19:62 _hframe 16 +
ref w_hl #0:1e9 @19:65 __ld_dptr_r47
ref w_hl #0:1eb @19:69 __cmp_i4
ref rbyte #0:1ec @19:6c @19:74
ref w_hl #0:1f0 @19:72 @19:1cf
ref w_hl #0:1f5 @19:79 _RequestSend_Phy
ref byte #0:1f9 @19:80 _remote_mac 8 >> 255 &
ref byte #0:1fa @19:82 _remote_mac 255 &
ref w_hl #0:1fb @19:84 _Write_Frame_xdata_Phy
ref byte #0:1ff @19:8b _my_mac 8 >> 255 &
ref byte #0:200 @19:8d _my_mac 255 &
ref w_hl #0:201 @19:8f _Write_Frame_xdata_Phy
ref w_hl #0:205 @19:96 _Write_Frame_word_Phy
ref w_hl #0:20b @19:a1 _Write_Frame_long_Phy
ref w_hl #0:211 @19:ac _Write_Frame_long_Phy
ref byte #0:215 @19:b3 _my_mac 8 >> 255 &
ref byte #0:216 @19:b5 _my_mac 255 &
ref w_hl #0:217 @19:b7 _Write_Frame_xdata_Phy
ref w_hl #0:219 @19:ba _my_ip
ref w_hl #0:21a @19:bd __ld_dptr_r47
ref w_hl #0:21b @19:c0 _Write_Frame_long_Phy
ref byte #0:21f @19:c7 _hframe 8 >> 255 &
ref byte #0:220 @19:c9 _hframe 255 &
ref w_hl #0:221 @19:cb _Write_Frame_xdata_Phy
ref w_hl #0:223 @19:ce _CommitSend_Phy
ref w_hl #0:227 @19:d5 @19:1cf
ref byte #0:22b @19:d8 @13:0 0 +
ref byte #0:22b @19:d9 _uc_socket 8 >> 255 &
ref byte #0:22c @19:db @13:0 0 + 1 +
ref byte #0:22c @19:dc _uc_socket 255 &
ref byte #0:230 @19:df @13:0 2 +
ref byte #0:233 @19:e1 @13:0 0 +
ref byte #0:234 @19:e4 @13:0 0 + 1 +
ref rbyte #0:237 @19:e9 @19:ed
ref w_hl #0:238 @19:eb @19:1b2
ref byte #0:23a @19:ee @13:0 0 +
ref byte #0:23b @19:f0 @13:0 0 + 1 +
ref rbyte #0:23e @19:f4 @19:f6
ref rbyte #0:245 @19:100 @19:103
ref rbyte #0:246 @19:102 @19:106
ref w_hl #0:248 @19:104 @19:1b2
ref byte #0:24b @19:107 @13:0 0 +
ref byte #0:24c @19:109 @13:0 0 + 1 +
ref w_hl #0:255 @19:116 __ld_dptr_r47
ref w_hl #0:256 @19:119 __movel_4_8
ref w_hl #0:257 @19:11c _hframe 6 +
ref w_hl #0:258 @19:11f __ld_dptr_r03
ref w_hl #0:259 @19:122 __movel_8_4
ref w_hl #0:25b @19:126 __cmp_i4
ref rbyte #0:25c @19:129 @19:15d
ref w_hl #0:25d @19:12b _my_ip
ref w_hl #0:25e @19:12e __ld_dptr_r03
ref w_hl #0:25f @19:131 __movel_8_4
ref w_hl #0:260 @19:134 __bxor_i4
ref w_hl #0:261 @19:137 _subnet_ip
ref w_hl #0:262 @19:13a __ld_dptr_r03
ref w_hl #0:263 @19:13d __band_i4
ref rbyte #0:268 @19:144 @19:148
ref w_hl #0:269 @19:146 @19:1b2
ref w_hl #0:26b @19:149 _gateway_ip
ref w_hl #0:26c @19:14c __ld_dptr_r03
ref w_hl #0:26d @19:14f _hframe 6 +
ref w_hl #0:26e @19:152 __ld_dptr_r47
ref w_hl #0:270 @19:156 __cmp_i4
ref rbyte #0:271 @19:159 @19:15d
ref w_hl #0:272 @19:15b @19:1b2
ref byte #0:278 @19:162 @13:0 0 +
ref byte #0:279 @19:164 @13:0 0 + 1 +
ref byte #0:280 @19:16d _hframe 8 >> 255 &
ref byte #0:281 @19:16f _hframe 255 &
ref w_hl #0:282 @19:171 _xram_fast_copy
ref byte #0:284 @19:174 @13:0 0 +
ref byte #0:285 @19:176 @13:0 0 + 1 +
ref rbyte #0:288 @19:17a @19:17c
ref byte #0:290 @19:186 @13:0 0 +
ref byte #0:291 @19:188 @13:0 0 + 1 +
ref byte #0:29d @19:199 @13:0 0 +
ref byte #0:29e @19:19b @13:0 0 + 1 +
ref rbyte #0:2ac @19:1b1 @19:1cf
ref byte #0:2b1 @19:1b3 @13:0 2 +
ref byte #0:2b3 @19:1b7 @13:0 0 + 1 +
ref byte #0:2b4 @19:1b9 @13:0 0 + 1 +
ref byte #0:2b6 @19:1bc @13:0 0 +
ref byte #0:2b7 @19:1be @13:0 0 +
ref byte #0:2ba @19:1c2 @13:0 2 +
ref rbyte #0:2be @19:1c7 @19:1cb
ref w_hl #0:2bf @19:1c9 @19:e0
ref byte #0:2e8 @1d:1 @1b:0 0 +
ref byte #0:2e9 @1d:3 @1b:0 0 + 1 +
ref byte #0:2ed @1d:9 @1b:0 0 +
ref byte #0:2ee @1d:b @1b:0 0 + 1 +
ref rbyte #0:2f4 @1d:12 @1d:19
ref byte #0:2f6 @1d:14 @1b:0 0 +
ref byte #0:2f7 @1d:17 @1b:0 0 + 1 +
ref byte #0:2fa @1d:1a @1b:0 0 +
ref byte #0:2fb @1d:1c @1b:0 0 + 1 +
ref byte #0:2fc @1d:1e _hframe 8 >> 255 &
ref byte #0:2fd @1d:20 _hframe 255 &
ref w_hl #0:2fe @1d:22 _Read_Frame_xdata_Phy
ref w_hl #0:300 @1d:25 _hframe
ref rbyte #0:303 @1d:2a @1d:32
ref w_hl #0:307 @1d:30 @1d:11c
ref w_hl #0:30a @1d:33 _hframe
ref rbyte #0:30d @1d:39 @1d:3c
ref rbyte #0:30e @1d:3b @1d:3f
ref w_hl #0:310 @1d:3d @1d:118
ref w_hl #0:313 @1d:40 _hframe
ref w_hl #0:317 @1d:45 _hframe 2 +
ref byte #0:31d @1d:4c @1b:0 0 +
ref byte #0:31e @1d:4e @1b:0 0 + 1 +
ref byte #0:31f @1d:50 _hframe 8 >> 255 &
ref byte #0:320 @1d:52 _hframe 255 &
ref w_hl #0:321 @1d:54 _ip_check
ref w_hl #0:328 @1d:5d _hframe 2 +
ref w_hl #0:329 @1d:60 __st_dptr_r67
ref w_hl #0:32b @1d:63 _hhdr
ref byte #0:332 @1d:6c @1b:0 0 +
ref byte #0:333 @1d:6e @1b:0 0 + 1 +
ref w_hl #0:33a @1d:77 _hhdr 2 +
ref w_hl #0:33b @1d:7a __st_dptr_r67
ref w_hl #0:33d @1d:7d _hhdr 4 +
ref w_hl #0:343 @1d:84 _hhdr 6 +
ref w_hl #0:34a @1d:8d _hhdr 8 +
ref w_hl #0:34e @1d:93 _hhdr 9 +
ref w_hl #0:352 @1d:99 _hhdr 10 +
ref w_hl #0:358 @1d:a0 _my_ip
ref w_hl #0:359 @1d:a3 __ld_dptr_r47
ref w_hl #0:35a @1d:a6 _hhdr 12 +
ref w_hl #0:35b @1d:a9 __st_dptr_r47
ref w_hl #0:35d @1d:ac _remote_ip
ref w_hl #0:35e @1d:af __ld_dptr_r47
ref w_hl #0:35f @1d:b2 _hhdr 16 +
ref w_hl #0:360 @1d:b5 __st_dptr_r47
ref byte #0:364 @1d:bc _hhdr 8 >> 255 &
ref byte #0:365 @1d:be _hhdr 255 &
ref w_hl #0:366 @1d:c0 _ip_check
ref w_hl #0:36d @1d:c9 _hhdr 10 +
ref w_hl #0:36e @1d:cc __st_dptr_r67
ref byte #0:370 @1d:cf @1b:0 0 +
ref byte #0:371 @1d:d1 @1b:0 0 + 1 +
ref w_hl #0:378 @1d:da _RequestSend_Phy
ref byte #0:37c @1d:e1 _remote_mac 8 >> 255 &
ref byte #0:37d @1d:e3 _remote_mac 255 &
ref w_hl #0:37e @1d:e5 _Write_Frame_xdata_Phy
ref byte #0:382 @1d:ec _my_mac 8 >> 255 &
ref byte #0:383 @1d:ee _my_mac 255 &
ref w_hl #0:384 @1d:f0 _Write_Frame_xdata_Phy
ref w_hl #0:388 @1d:f7 _Write_Frame_word_Phy
ref byte #0:38c @1d:fe _hhdr 8 >> 255 &
ref byte #0:38d @1d:100 _hhdr 255 &
ref w_hl #0:38e @1d:102 _Write_Frame_xdata_Phy
ref byte #0:390 @1d:105 @1b:0 0 +
ref byte #0:391 @1d:107 @1b:0 0 + 1 +
ref byte #0:392 @1d:109 _hframe 8 >> 255 &
ref byte #0:393 @1d:10b _hframe 255 &
ref w_hl #0:394 @1d:10d _Write_Frame_xdata_Phy
ref w_hl #0:396 @1d:110 _CommitSend_Phy
ref rbyte #0:39a @1d:117 @1d:11c
ref byte #0:3c0 @20:1 @1f:0 0 +
ref byte #0:3c1 @20:3 @1f:0 0 + 1 +
ref w_hl #0:3c3 @20:5 _Read_Frame_word_Phy
ref byte #0:3c5 @20:8 @1f:0 2 +
ref byte #0:3c6 @20:a @1f:0 2 + 1 +
ref w_hl #0:3c8 @20:c _Read_Frame_word_Phy
ref byte #0:3ca @20:f @1f:0 4 +
ref byte #0:3cb @20:11 @1f:0 4 + 1 +
ref byte #0:3cd @20:13 @1f:0 0 +
ref byte #0:3ce @20:15 @1f:0 0 + 1 +
ref w_hl #0:3cf @20:17 _net_match_uint
ref rbyte #0:3d1 @20:1b @20:23
ref w_hl #0:3d5 @20:21 @20:10c
ref w_hl #0:3d8 @20:24 _Read_Frame_word_Phy
ref byte #0:3db @20:27 @1f:0 6 +
ref byte #0:3db @20:28 _uc_socket 8 >> 255 &
ref byte #0:3dc @20:2a @1f:0 6 + 1 +
ref byte #0:3dc @20:2b _uc_socket 255 &
ref byte #0:3e0 @20:2e @1f:0 8 +
ref byte #0:3e1 @20:30 @1f:0 8 + 1 +
ref byte #0:3e4 @20:32 @1f:0 6 +
ref byte #0:3e5 @20:35 @1f:0 6 + 1 +
ref rbyte #0:3e8 @20:3b @20:3e
ref rbyte #0:3e9 @20:3d @20:41
ref w_hl #0:3eb @20:3f @20:e3
ref byte #0:3ee @20:42 @1f:0 6 +
ref byte #0:3ef @20:44 @1f:0 6 + 1 +
ref w_hl #0:3f8 @20:51 __ld_dptr_r45
ref byte #0:3f9 @20:54 @1f:0 4 +
ref byte #0:3fa @20:56 @1f:0 4 + 1 +
ref rbyte #0:3fd @20:5a @20:5f
ref rbyte #0:400 @20:5e @20:62
ref w_hl #0:402 @20:60 @20:e3
ref byte #0:405 @20:63 @1f:0 6 +
ref byte #0:406 @20:65 @1f:0 6 + 1 +
ref byte #0:40d @20:6e @1f:0 2 +
ref byte #0:40e @20:70 @1f:0 2 + 1 +
ref w_hl #0:411 @20:76 __st_dptr_r67
ref byte #0:413 @20:79 @1f:0 6 +
ref byte #0:414 @20:7b @1f:0 6 + 1 +
ref w_hl #0:41b @20:84 _remote_ip
ref w_hl #0:41c @20:87 __ld_dptr_r47
ref w_hl #0:41f @20:8e __st_dptr_r47
ref byte #0:423 @20:95 @1f:0 6 +
ref byte #0:424 @20:97 @1f:0 6 + 1 +
ref byte #0:42b @20:a0 _remote_mac 8 >> 255 &
ref byte #0:42c @20:a2 _remote_mac 255 &
ref w_hl #0:42d @20:a4 _xram_fast_copy
ref byte #0:431 @20:a9 @1f:0 0 + 1 +
ref byte #0:432 @20:ab @1f:0 10 + 1 +
ref byte #0:434 @20:af @1f:0 0 +
ref byte #0:435 @20:b1 @1f:0 10 +
ref byte #0:439 @20:b7 @1f:0 10 +
ref byte #0:43a @20:b9 @1f:0 10 + 1 +
ref rbyte #0:441 @20:c0 @20:108
ref byte #0:443 @20:c2 @1f:0 10 +
ref byte #0:444 @20:c4 @1f:0 10 + 1 +
ref byte #0:445 @20:c6 _rcv_buf 8 >> 255 &
ref byte #0:446 @20:c8 _rcv_buf 255 &
ref w_hl #0:447 @20:ca _Read_Frame_xdata_Phy
ref byte #0:449 @20:cd @1f:0 10 +
ref byte #0:44a @20:cf @1f:0 10 + 1 +
ref w_hl #0:44b @20:d1 _rcv_len
ref w_hl #0:44c @20:d4 __st_dptr_r67
ref byte #0:44e @20:d7 @1f:0 8 +
ref byte #0:44f @20:d9 @1f:0 8 + 1 +
ref rbyte #0:456 @20:e2 @20:10c
ref byte #0:45b @20:e4 @1f:0 8 + 1 +
ref byte #0:45c @20:e6 @1f:0 8 + 1 +
ref rbyte #0:45d @20:e8 @20:eb
ref byte #0:45e @20:ea @1f:0 8 +
ref byte #0:461 @20:ee @1f:0 6 + 1 +
ref byte #0:462 @20:f0 @1f:0 6 + 1 +
ref byte #0:464 @20:f3 @1f:0 6 +
ref byte #0:465 @20:f5 @1f:0 6 +
ref byte #0:469 @20:fb @1f:0 8 +
ref byte #0:46a @20:fd @1f:0 8 + 1 +
ref rbyte #0:470 @20:104 @20:108
ref w_hl #0:471 @20:106 @20:31
ref byte #0:4a9 @23:1 @22:0 0 +
ref byte #0:4aa @23:3 @22:0 0 + 1 +
ref byte #0:4ab @23:5 @22:0 2 +
ref byte #0:4ac @23:7 @22:0 2 + 1 +
ref byte #0:4ad @23:9 @22:0 4 +
ref byte #0:4ae @23:b @22:0 4 + 1 +
ref byte #0:4af @23:d @21:0 0 +
ref w_hl #0:4b0 @23:f __ld_r0_r03
ref w_hl #0:4b2 @23:12 _hhdr
ref byte #0:4b9 @23:1b @22:0 0 +
ref byte #0:4ba @23:1d @22:0 0 + 1 +
ref w_hl #0:4c1 @23:26 _hhdr 2 +
ref w_hl #0:4c2 @23:29 __st_dptr_r67
ref w_hl #0:4c4 @23:2c _hhdr 4 +
ref w_hl #0:4ca @23:33 _hhdr 6 +
ref w_hl #0:4d1 @23:3c _hhdr 8 +
ref w_hl #0:4d5 @23:42 _hhdr 9 +
ref w_hl #0:4d9 @23:48 _hhdr 10 +
ref w_hl #0:4df @23:4f _my_ip
ref w_hl #0:4e0 @23:52 __ld_dptr_r47
ref w_hl #0:4e1 @23:55 _hhdr 12 +
ref w_hl #0:4e2 @23:58 __st_dptr_r47
ref w_hl #0:4e4 @23:5b _hhdr 16 +
ref w_hl #0:4e5 @23:5e __st_dptr_r03
ref byte #0:4e9 @23:65 _hhdr 8 >> 255 &
ref byte #0:4ea @23:67 _hhdr 255 &
ref w_hl #0:4eb @23:69 _ip_check
ref w_hl #0:4f2 @23:72 _hhdr 10 +
ref w_hl #0:4f3 @23:75 __st_dptr_r67
ref byte #0:4f5 @23:78 @22:0 0 +
ref byte #0:4f6 @23:7a @22:0 0 + 1 +
ref w_hl #0:4fd @23:83 _RequestSend_Phy
ref byte #0:501 @23:8a @22:0 4 +
ref byte #0:502 @23:8c @22:0 4 + 1 +
ref w_hl #0:503 @23:8e _Write_Frame_xdata_Phy
ref byte #0:507 @23:95 _my_mac 8 >> 255 &
ref byte #0:508 @23:97 _my_mac 255 &
ref w_hl #0:509 @23:99 _Write_Frame_xdata_Phy
ref w_hl #0:50d @23:a0 _Write_Frame_word_Phy
ref byte #0:511 @23:a7 _hhdr 8 >> 255 &
ref byte #0:512 @23:a9 _hhdr 255 &
ref w_hl #0:513 @23:ab _Write_Frame_xdata_Phy
ref byte #0:515 @23:ae @21:0 4 +
ref byte #0:516 @23:b0 @21:0 4 + 1 +
ref w_hl #0:517 @23:b2 _Write_Frame_word_Phy
ref byte #0:519 @23:b5 @21:0 6 +
ref byte #0:51a @23:b7 @21:0 6 + 1 +
ref w_hl #0:51b @23:b9 _Write_Frame_word_Phy
ref byte #0:51d @23:bc @22:0 0 +
ref byte #0:51e @23:be @22:0 0 + 1 +
ref w_hl #0:525 @23:c7 _Write_Frame_word_Phy
ref w_hl #0:52a @23:cd _Write_Frame_word_Phy
ref byte #0:52c @23:d0 @22:0 0 +
ref byte #0:52d @23:d2 @22:0 0 + 1 +
ref byte #0:52e @23:d4 @22:0 2 +
ref byte #0:52f @23:d6 @22:0 2 + 1 +
ref w_hl #0:530 @23:d8 _Write_Frame_xdata_Phy
ref w_hl #0:532 @23:db _CommitSend_Phy
ref byte #0:560 @27:1 @25:0 0 +
ref byte #0:561 @27:3 @25:0 0 + 1 +
ref byte #0:562 @27:5 @25:0 2 +
ref byte #0:563 @27:7 @25:0 2 + 1 +
ref byte #0:564 @27:9 @25:0 4 +
ref byte #0:565 @27:b @25:0 4 + 1 +
ref w_hl #0:567 @27:d _hframe 12 +
ref w_hl #0:56b @27:13 _hframe 16 +
ref w_hl #0:571 @27:1a _my_ip
ref w_hl #0:572 @27:1d __ld_dptr_r47
ref w_hl #0:573 @27:20 _pseudo_hdr
ref w_hl #0:574 @27:23 __st_dptr_r47
ref byte #0:576 @27:26 @24:0 0 +
ref w_hl #0:577 @27:28 __ld_a_r47
ref w_hl #0:578 @27:2b _pseudo_hdr 4 +
ref w_hl #0:579 @27:2e __st_dptr_r47
ref w_hl #0:57b @27:31 _pseudo_hdr 8 +
ref byte #0:582 @27:3a @25:0 0 +
ref byte #0:583 @27:3c @25:0 0 + 1 +
ref w_hl #0:58a @27:45 _pseudo_hdr 10 +
ref w_hl #0:58b @27:48 __st_dptr_r67
ref byte #0:58d @27:4b @25:0 0 +
ref byte #0:58e @27:4d @25:0 0 + 1 +
ref byte #0:58f @27:4f @25:0 2 +
ref byte #0:590 @27:51 @25:0 2 + 1 +
ref w_hl #0:591 @27:53 _ip_check
ref byte #0:598 @27:5e _pseudo_hdr 8 >> 255 &
ref byte #0:599 @27:60 _pseudo_hdr 255 &
ref w_hl #0:59a @27:62 _ip_check_more
ref byte #0:59f @27:6d _hframe 8 >> 255 &
ref byte #0:5a0 @27:6f _hframe 255 &
ref w_hl #0:5a1 @27:71 _ip_check_more
ref w_hl #0:5a8 @27:7a _hframe 16 +
ref w_hl #0:5a9 @27:7d __st_dptr_r67
ref w_hl #0:5ab @27:80 _hhdr
ref byte #0:5b2 @27:89 @25:0 0 +
ref byte #0:5b3 @27:8b @25:0 0 + 1 +
ref w_hl #0:5ba @27:94 _hhdr 2 +
ref w_hl #0:5bb @27:97 __st_dptr_r67
ref w_hl #0:5bd @27:9a _hhdr 4 +
ref w_hl #0:5c3 @27:a1 _hhdr 6 +
ref w_hl #0:5ca @27:aa _hhdr 8 +
ref w_hl #0:5ce @27:b0 _hhdr 9 +
ref w_hl #0:5d2 @27:b6 _hhdr 10 +
ref w_hl #0:5d8 @27:bd _my_ip
ref w_hl #0:5d9 @27:c0 __ld_dptr_r47
ref w_hl #0:5da @27:c3 _hhdr 12 +
ref w_hl #0:5db @27:c6 __st_dptr_r47
ref byte #0:5dd @27:c9 @24:0 0 +
ref w_hl #0:5de @27:cb __ld_a_r47
ref w_hl #0:5df @27:ce _hhdr 16 +
ref w_hl #0:5e0 @27:d1 __st_dptr_r47
ref byte #0:5e4 @27:d8 _hhdr 8 >> 255 &
ref byte #0:5e5 @27:da _hhdr 255 &
ref w_hl #0:5e6 @27:dc _ip_check
ref w_hl #0:5ed @27:e5 _hhdr 10 +
ref w_hl #0:5ee @27:e8 __st_dptr_r67
ref byte #0:5f0 @27:eb @25:0 0 +
ref byte #0:5f1 @27:ed @25:0 0 + 1 +
ref w_hl #0:5f8 @27:f6 _RequestSend_Phy
ref byte #0:5fc @27:fd @25:0 4 +
ref byte #0:5fd @27:ff @25:0 4 + 1 +
ref w_hl #0:5fe @27:101 _Write_Frame_xdata_Phy
ref byte #0:602 @27:108 _my_mac 8 >> 255 &
ref byte #0:603 @27:10a _my_mac 255 &
ref w_hl #0:604 @27:10c _Write_Frame_xdata_Phy
ref w_hl #0:608 @27:113 _Write_Frame_word_Phy
ref byte #0:60c @27:11a _hhdr 8 >> 255 &
ref byte #0:60d @27:11c _hhdr 255 &
ref w_hl #0:60e @27:11e _Write_Frame_xdata_Phy
ref byte #0:612 @27:125 _hframe 8 >> 255 &
ref byte #0:613 @27:127 _hframe 255 &
ref w_hl #0:614 @27:129 _Write_Frame_xdata_Phy
ref byte #0:616 @27:12c @25:0 0 +
ref byte #0:617 @27:12e @25:0 0 + 1 +
ref byte #0:618 @27:130 @25:0 2 +
ref byte #0:619 @27:132 @25:0 2 + 1 +
ref w_hl #0:61a @27:134 _Write_Frame_xdata_Phy
ref w_hl #0:61c @27:137 _CommitSend_Phy
ref byte #0:630 @2a:1 @29:0 0 +
ref byte #0:631 @2a:3 @29:0 0 + 1 +
ref w_hl #0:632 @2a:5 __movel_0_12
ref w_hl #0:636 @2a:c _hframe 2 +
ref w_hl #0:637 @2a:f __ld_dptr_r45
ref w_hl #0:63a @2a:12 _hframe
ref w_hl #0:63b @2a:15 __ld_dptr_r67
ref w_hl #0:63c @2a:18 _hframe 2 +
ref w_hl #0:63d @2a:1b __st_dptr_r67
ref w_hl #0:63f @2a:1e _hframe
ref w_hl #0:640 @2a:21 __st_dptr_r45
ref w_hl #0:642 @2a:24 _hframe 14 +
ref w_hl #0:64b @2a:2e _hframe 4 +
ref w_hl #0:64c @2a:31 __ld_dptr_r47
ref w_hl #0:64d @2a:34 __add_i4
ref w_hl #0:64f @2a:37 __movel_4_8
ref w_hl #0:651 @2a:3a _hframe 13 +
ref rbyte #0:656 @2a:42 @2a:57
ref rbyte #0:65a @2a:48 @2a:57
ref rbyte #0:65d @2a:4e @2a:57
ref rbyte #0:660 @2a:54 @2a:57
ref w_hl #0:665 @2a:58 _hframe 8 +
ref w_hl #0:666 @2a:5b __ld_dptr_r47
ref w_hl #0:667 @2a:5e _hframe 4 +
ref w_hl #0:668 @2a:61 __st_dptr_r47
ref w_hl #0:66a @2a:64 __movel_8_4
ref w_hl #0:66b @2a:67 _hframe 8 +
ref w_hl #0:66c @2a:6a __st_dptr_r47
ref w_hl #0:66e @2a:6d _hframe 13 +
ref byte #0:672 @2a:74 @24:0
ref byte #0:673 @2a:77 @24:0 1 +
ref byte #0:674 @2a:7a @24:0 2 +
ref byte #0:675 @2a:7d @24:0 3 +
ref byte #0:676 @2a:7f @29:0 0 +
ref byte #0:677 @2a:81 @29:0 0 + 1 +
ref w_hl #0:67e @2a:89 _send_TCP
ref w_hl #0:696 @2d:9 _match_socket 14 +
ref w_hl #0:697 @2d:c __ld_dptr_r67
ref w_hl #0:698 @2d:f _hframe
ref w_hl #0:699 @2d:12 __st_dptr_r67
ref w_hl #0:69b @2d:15 _match_socket 12 +
ref w_hl #0:69c @2d:18 __ld_dptr_r67
ref w_hl #0:69d @2d:1b _hframe 2 +
ref w_hl #0:69e @2d:1e __st_dptr_r67
ref w_hl #0:6a0 @2d:21 _hframe 14 +
ref w_hl #0:6a8 @2d:2a _match_socket 20 +
ref rbyte #0:6b8 @2d:40 @2d:55
ref rbyte #0:6bc @2d:46 @2d:55
ref rbyte #0:6bf @2d:4c @2d:55
ref rbyte #0:6c2 @2d:52 @2d:55
ref w_hl #0:6c7 @2d:56 __movel_8_4
ref w_hl #0:6c8 @2d:59 _hframe 4 +
ref w_hl #0:6c9 @2d:5c __st_dptr_r47
ref w_hl #0:6cb @2d:5f _match_socket 16 +
ref w_hl #0:6cc @2d:62 __ld_dptr_r47
ref w_hl #0:6cd @2d:65 _hframe 8 +
ref w_hl #0:6ce @2d:68 __st_dptr_r47
ref w_hl #0:6d0 @2d:6b _hframe 13 +
ref w_hl #0:6d4 @2d:70 _match_socket 8 +
ref w_hl #0:6d5 @2d:73 __ld_dptr_r47
ref byte #0:6d6 @2d:76 @24:0
ref w_hl #0:6d7 @2d:78 __st_a_r47
ref byte #0:6d8 @2d:7b _match_socket 2 + 8 >> 255 &
ref byte #0:6d9 @2d:7d _match_socket 2 + 255 &
ref w_hl #0:6de @2d:87 _send_TCP
ref byte #0:70e @30:1 @2f:0 0 +
ref byte #0:70f @30:3 @2f:0 0 + 1 +
ref w_hl #0:711 @30:5 _hframe 13 +
ref rbyte #0:716 @30:d @30:1d
ref w_hl #0:718 @30:f _free_match_socket
ref w_hl #0:71a @30:12 _match_socket 1 +
ref w_hl #0:720 @30:1b @30:3ac
ref w_hl #0:723 @30:1e _match_socket 25 +
ref w_hl #0:727 @30:24 _match_socket 1 +
ref rbyte #0:72e @30:2e @30:32
ref w_hl #0:72f @30:30 @30:38f
ref w_hl #0:731 @30:33 @30:3ad
ref rbyte #0:734 @30:38 @30:3b
ref rbyte #0:739 @30:40 @30:43
ref w_hl #0:746 @30:4e _hframe 13 +
ref rbyte #0:74b @30:56 @30:5a
ref w_hl #0:74d @30:58 @30:38f
ref w_hl #0:750 @30:5b _remote_mac
ref w_hl #0:751 @30:5e __ld_dptr_r47
ref w_hl #0:752 @30:61 _match_socket 2 +
ref w_hl #0:753 @30:64 __st_dptr_r47
ref w_hl #0:755 @30:67 _remote_mac 4 +
ref w_hl #0:756 @30:6a __ld_dptr_r67
ref w_hl #0:757 @30:6d _match_socket 2 + 4 +
ref w_hl #0:758 @30:70 __st_dptr_r67
ref w_hl #0:75a @30:73 _remote_ip
ref w_hl #0:75b @30:76 __ld_dptr_r47
ref w_hl #0:75c @30:79 _match_socket 8 +
ref w_hl #0:75d @30:7c __st_dptr_r47
ref w_hl #0:75f @30:7f _hframe
ref w_hl #0:760 @30:82 __ld_dptr_r67
ref w_hl #0:761 @30:85 _match_socket 12 +
ref w_hl #0:762 @30:88 __st_dptr_r67
ref byte #0:764 @30:8b @2f:0 0 +
ref byte #0:765 @30:8d @2f:0 0 + 1 +
ref w_hl #0:76b @30:96 _hframe 4 +
ref w_hl #0:76c @30:99 __ld_dptr_r47
ref w_hl #0:76d @30:9c __add_i4
ref w_hl #0:773 @30:a5 __add_i4
ref w_hl #0:774 @30:a8 _match_socket 16 +
ref w_hl #0:775 @30:ab __st_dptr_r47
ref byte #0:777 @30:ae _net_service_cnt
ref w_hl #0:779 @30:b2 _match_socket 20 +
ref w_hl #0:77a @30:b5 __st_dptr_r67
ref w_hl #0:77c @30:b8 _match_socket 20 + 2 +
ref w_hl #0:789 @30:c7 _send_match_ok_TCP
ref w_hl #0:78b @30:ca _match_socket 1 +
ref w_hl #0:78f @30:d0 _match_socket 24 +
ref w_hl #0:795 @30:d9 @30:3ac
ref w_hl #0:798 @30:dc _hframe 13 +
ref rbyte #0:79d @30:e4 @30:e8
ref w_hl #0:79f @30:e6 @30:38f
ref byte #0:7a4 @30:ed @2f:0 0 +
ref byte #0:7a5 @30:ef @2f:0 0 + 1 +
ref rbyte #0:7ab @30:f6 @30:fd
ref byte #0:7ad @30:f8 @2f:0 0 +
ref byte #0:7ae @30:fb @2f:0 0 + 1 +
ref w_hl #0:7b1 @30:fe _hframe 4 +
ref w_hl #0:7b2 @30:101 __ld_dptr_r03
ref w_hl #0:7b3 @30:104 _match_socket 16 +
ref w_hl #0:7b4 @30:107 __ld_dptr_r47
ref w_hl #0:7b6 @30:10b __cmp_i4
ref rbyte #0:7b7 @30:10e @30:116
ref w_hl #0:7bb @30:114 @30:3ac
ref w_hl #0:7be @30:117 _match_socket 1 +
ref byte #0:7c2 @30:11d @2f:0 0 +
ref byte #0:7c3 @30:11f @2f:0 0 + 1 +
ref w_hl #0:7c9 @30:128 _match_socket 16 +
ref w_hl #0:7ca @30:12b __ld_dptr_r47
ref w_hl #0:7cb @30:12e __add_i4
ref w_hl #0:7cc @30:131 _match_socket 16 +
ref w_hl #0:7cd @30:134 __st_dptr_r47
ref byte #0:7cf @30:137 @2f:0 0 +
ref byte #0:7d0 @30:139 @2f:0 0 + 1 +
ref byte #0:7d1 @30:13b _rcv_buf 8 >> 255 &
ref byte #0:7d2 @30:13d _rcv_buf 255 &
ref w_hl #0:7d3 @30:13f _Read_Frame_xdata_Phy
ref byte #0:7d5 @30:142 @2f:0 0 +
ref byte #0:7d6 @30:144 @2f:0 0 + 1 +
ref w_hl #0:7d7 @30:146 _rcv_len
ref w_hl #0:7d8 @30:149 __st_dptr_r67
ref w_hl #0:7da @30:14c _match_socket 26 +
ref w_hl #0:7db @30:14f __ld_dptr_r67
ref rbyte #0:7de @30:154 @30:19a
ref w_hl #0:7df @30:156 _match_socket 28 +
ref w_hl #0:7e0 @30:159 __ld_dptr_r03
ref w_hl #0:7e1 @30:15c _hframe 8 +
ref w_hl #0:7e2 @30:15f __ld_dptr_r47
ref w_hl #0:7e4 @30:163 __cmp_i4
ref rbyte #0:7e5 @30:166 @30:19a
ref w_hl #0:7e7 @30:168 _match_socket 32 +
ref w_hl #0:7e8 @30:16b __ld_dptr_r67
ref w_hl #0:7e9 @30:16e _free_tx_buf
ref w_hl #0:7eb @30:171 _match_socket 40 +
ref w_hl #0:7ec @30:174 __ld_dptr_r67
ref w_hl #0:7ed @30:177 _free_tx_buf
ref w_hl #0:7ef @30:17a _match_socket 48 +
ref w_hl #0:7f0 @30:17d __ld_dptr_r67
ref w_hl #0:7f1 @30:180 _free_tx_buf
ref w_hl #0:7f3 @30:183 _match_socket 26 +
ref w_hl #0:7f9 @30:18a _match_socket 34 +
ref w_hl #0:7ff @30:191 _match_socket 42 +
ref w_hl #0:805 @30:198 @30:271
ref w_hl #0:808 @30:19b _match_socket 34 +
ref w_hl #0:809 @30:19e __ld_dptr_r67
ref rbyte #0:80c @30:1a3 @30:1fd
ref w_hl #0:80d @30:1a5 _match_socket 36 +
ref w_hl #0:80e @30:1a8 __ld_dptr_r03
ref w_hl #0:80f @30:1ab _hframe 8 +
ref w_hl #0:810 @30:1ae __ld_dptr_r47
ref w_hl #0:812 @30:1b2 __cmp_i4
ref rbyte #0:813 @30:1b5 @30:1fd
ref w_hl #0:815 @30:1b7 _match_socket 40 +
ref w_hl #0:816 @30:1ba __ld_dptr_r67
ref w_hl #0:817 @30:1bd _free_tx_buf
ref w_hl #0:819 @30:1c0 _match_socket 48 +
ref w_hl #0:81a @30:1c3 __ld_dptr_r67
ref w_hl #0:81b @30:1c6 _free_tx_buf
ref w_hl #0:81d @30:1c9 _match_socket 28 +
ref w_hl #0:81e @30:1cc __ld_dptr_r47
ref w_hl #0:81f @30:1cf _match_socket 44 +
ref w_hl #0:820 @30:1d2 __st_dptr_r47
ref w_hl #0:822 @30:1d5 _match_socket 32 +
ref w_hl #0:823 @30:1d8 __ld_dptr_r67
ref w_hl #0:824 @30:1db _match_socket 48 +
ref w_hl #0:825 @30:1de __st_dptr_r67
ref w_hl #0:827 @30:1e1 _match_socket 26 +
ref w_hl #0:828 @30:1e4 __ld_dptr_r67
ref w_hl #0:829 @30:1e7 _match_socket 42 +
ref w_hl #0:82a @30:1ea __st_dptr_r67
ref w_hl #0:82c @30:1ed _match_socket 34 +
ref w_hl #0:832 @30:1f4 _match_socket 26 +
ref w_hl #0:838 @30:1fb @30:271
ref w_hl #0:83b @30:1fe _match_socket 42 +
ref w_hl #0:83c @30:201 __ld_dptr_r67
ref rbyte #0:83f @30:206 @30:271
ref w_hl #0:840 @30:208 _match_socket 44 +
ref w_hl #0:841 @30:20b __ld_dptr_r03
ref w_hl #0:842 @30:20e _hframe 8 +
ref w_hl #0:843 @30:211 __ld_dptr_r47
ref w_hl #0:845 @30:215 __cmp_i4
ref rbyte #0:846 @30:218 @30:271
ref w_hl #0:848 @30:21a _match_socket 48 +
ref w_hl #0:849 @30:21d __ld_dptr_r67
ref w_hl #0:84a @30:220 _free_tx_buf
ref w_hl #0:84c @30:223 _match_socket 36 +
ref w_hl #0:84d @30:226 __ld_dptr_r47
ref w_hl #0:84e @30:229 _match_socket 44 +
ref w_hl #0:84f @30:22c __st_dptr_r47
ref w_hl #0:851 @30:22f _match_socket 40 +
ref w_hl #0:852 @30:232 __ld_dptr_r67
ref w_hl #0:853 @30:235 _match_socket 48 +
ref w_hl #0:854 @30:238 __st_dptr_r67
ref w_hl #0:856 @30:23b _match_socket 34 +
ref w_hl #0:857 @30:23e __ld_dptr_r67
ref w_hl #0:858 @30:241 _match_socket 42 +
ref w_hl #0:859 @30:244 __st_dptr_r67
ref w_hl #0:85b @30:247 _match_socket 28 +
ref w_hl #0:85c @30:24a __ld_dptr_r47
ref w_hl #0:85d @30:24d _match_socket 36 +
ref w_hl #0:85e @30:250 __st_dptr_r47
ref w_hl #0:860 @30:253 _match_socket 32 +
ref w_hl #0:861 @30:256 __ld_dptr_r67
ref w_hl #0:862 @30:259 _match_socket 40 +
ref w_hl #0:863 @30:25c __st_dptr_r67
ref w_hl #0:865 @30:25f _match_socket 26 +
ref w_hl #0:866 @30:262 __ld_dptr_r67
ref w_hl #0:867 @30:265 _match_socket 34 +
ref w_hl #0:868 @30:268 __st_dptr_r67
ref w_hl #0:86a @30:26b _match_socket 26 +
ref w_hl #0:874 @30:272 _hframe 13 +
ref rbyte #0:879 @30:27a @30:29b
ref byte #0:87b @30:27c @2f:0 0 +
ref byte #0:87c @30:27e @2f:0 0 + 1 +
ref rbyte #0:87d @30:280 @30:28e
ref w_hl #0:87e @30:282 _hframe 13 +
ref rbyte #0:883 @30:28a @30:28e
ref w_hl #0:884 @30:28c @30:2e0
ref w_hl #0:88f @30:297 _send_match_ok_TCP
ref rbyte #0:891 @30:29a @30:2e0
ref w_hl #0:894 @30:29c _hframe 13 +
ref rbyte #0:899 @30:2a4 @30:2e0
ref w_hl #0:8a0 @30:2ac _match_socket 16 +
ref w_hl #0:8a1 @30:2af __ld_dptr_r47
ref w_hl #0:8a2 @30:2b2 __add_i4
ref w_hl #0:8a3 @30:2b5 _match_socket 16 +
ref w_hl #0:8a4 @30:2b8 __st_dptr_r47
ref w_hl #0:8ad @30:2c3 _send_match_ok_TCP
ref w_hl #0:8b4 @30:2cc _match_socket 20 +
ref w_hl #0:8b5 @30:2cf __ld_dptr_r47
ref w_hl #0:8b6 @30:2d2 __add_i4
ref w_hl #0:8b7 @30:2d5 _match_socket 20 +
ref w_hl #0:8b8 @30:2d8 __st_dptr_r47
ref w_hl #0:8ba @30:2db _match_socket 1 +
ref w_hl #0:8c1 @30:2e1 _match_socket 42 +
ref w_hl #0:8c2 @30:2e4 __ld_dptr_r67
ref rbyte #0:8c5 @30:2e9 @30:2ef
ref w_hl #0:8c7 @30:2eb _match_socket 24 +
ref w_hl #0:8ce @30:2f4 @30:3ac
ref w_hl #0:8d1 @30:2f7 _hframe 13 +
ref rbyte #0:8d6 @30:2ff @30:303
ref w_hl #0:8d8 @30:301 @30:38f
ref w_hl #0:8db @30:304 _hframe 4 +
ref w_hl #0:8dc @30:307 __ld_dptr_r03
ref w_hl #0:8dd @30:30a _match_socket 16 +
ref w_hl #0:8de @30:30d __ld_dptr_r47
ref w_hl #0:8e0 @30:311 __cmp_i4
ref rbyte #0:8e1 @30:314 @30:31c
ref w_hl #0:8e5 @30:31a @30:3ac
ref w_hl #0:8e8 @30:31d _hframe 13 +
ref rbyte #0:8ed @30:325 @30:34e
ref w_hl #0:8f4 @30:32d _match_socket 16 +
ref w_hl #0:8f5 @30:330 __ld_dptr_r47
ref w_hl #0:8f6 @30:333 __add_i4
ref w_hl #0:8f7 @30:336 _match_socket 16 +
ref w_hl #0:8f8 @30:339 __st_dptr_r47
ref w_hl #0:901 @30:344 _send_match_ok_TCP
ref w_hl #0:903 @30:347 _free_match_socket
ref w_hl #0:905 @30:34a _match_socket 1 +
ref w_hl #0:90b @30:34f _match_socket 24 +
ref w_hl #0:911 @30:358 @30:3ac
ref w_hl #0:914 @30:35b _hframe 13 +
ref rbyte #0:91a @30:363 @30:38f
ref w_hl #0:91c @30:365 _hframe 4 +
ref w_hl #0:91d @30:368 __ld_dptr_r03
ref w_hl #0:91e @30:36b _match_socket 16 +
ref w_hl #0:91f @30:36e __ld_dptr_r47
ref w_hl #0:921 @30:372 __cmp_i4
ref rbyte #0:922 @30:375 @30:37c
ref rbyte #0:926 @30:37b @30:3ac
ref w_hl #0:929 @30:37d _match_socket 1 +
ref w_hl #0:92d @30:382 _free_match_socket
ref w_hl #0:92f @30:385 _match_socket 24 +
ref rbyte #0:935 @30:38e @30:3ac
ref w_hl #0:939 @30:390 _free_match_socket
ref w_hl #0:93b @30:393 _match_socket 1 +
ref w_hl #0:93f @30:398 _remote_ip
ref w_hl #0:940 @30:39b __ld_dptr_r03
ref byte #0:941 @30:39e _remote_mac 8 >> 255 &
ref byte #0:942 @30:3a0 _remote_mac 255 &
ref byte #0:943 @30:3a2 @2f:0 0 +
ref byte #0:944 @30:3a4 @2f:0 0 + 1 +
ref w_hl #0:945 @30:3a6 _send_incomming_reset_TCP
ref w_hl #0:94c @30:3ad @30:4d
ref w_hl #0:94d @30:3af @30:db
ref w_hl #0:94e @30:3b1 @30:db
ref w_hl #0:94f @30:3b3 @30:2f6
ref w_hl #0:950 @30:3b5 @30:35a
ref w_hl #0:962 @33:1 _match_socket
ref rbyte #0:965 @33:7 @33:21
ref w_hl #0:96e @33:11 _send_match_ok_TCP
ref w_hl #0:970 @33:14 _free_match_socket
ref w_hl #0:972 @33:17 _match_socket 1 +
ref rbyte #0:978 @33:20 @33:2a
ref w_hl #0:97b @33:22 _match_socket 1 +
ref w_hl #0:999 @36:1 _match_socket
ref rbyte #0:99c @36:7 @36:a
ref rbyte #0:99d @36:9 @36:d
ref w_hl #0:99f @36:b @36:cb
ref w_hl #0:9a2 @36:e _match_socket 1 +
ref rbyte #0:9a9 @36:18 @36:1c
ref w_hl #0:9aa @36:1a @36:fb
ref rbyte #0:9b0 @36:22 @36:26
ref w_hl #0:9b1 @36:24 @36:fb
ref w_hl #0:9b3 @36:27 @36:100 2 -
ref rbyte #0:9b6 @36:2c @36:2f
ref rbyte #0:9bb @36:34 @36:37
ref w_hl #0:9cf @36:4a _send_match_ok_TCP
ref w_hl #0:9d3 @36:51 @36:ff
ref w_hl #0:9d6 @36:54 _match_socket 42 +
ref w_hl #0:9d7 @36:57 __ld_dptr_r67
ref rbyte #0:9da @36:5c @36:ae
ref w_hl #0:9dd @36:5e _match_socket 20 +
ref byte #0:9df @36:62 @35:0 0 +
ref byte #0:9e2 @36:66 @35:0 0 + 1 +
ref byte #0:9e5 @36:6a @35:0 0 + 2 +
ref byte #0:9e8 @36:6e @35:0 0 + 3 +
ref w_hl #0:9ea @36:70 _match_socket 42 +
ref w_hl #0:9eb @36:73 __ld_dptr_r67
ref w_hl #0:9f1 @36:7d _match_socket 44 +
ref w_hl #0:9f2 @36:80 __ld_dptr_r47
ref w_hl #0:9f3 @36:83 __sub_i4
ref w_hl #0:9f4 @36:86 _match_socket 20 +
ref w_hl #0:9f5 @36:89 __st_dptr_r47
ref w_hl #0:9f8 @36:8e _match_socket 42 +
ref w_hl #0:9f9 @36:91 __ld_dptr_r45
ref w_hl #0:9fa @36:94 _match_socket 48 +
ref w_hl #0:9fb @36:97 __ld_dptr_r67
ref w_hl #0:9fc @36:9a _send_match_ok_TCP
ref byte #0:9fe @36:9d @35:0 0 +
ref w_hl #0:9ff @36:9f __ld_a_r47
ref w_hl #0:a00 @36:a2 _match_socket 20 +
ref w_hl #0:a01 @36:a5 __st_dptr_r47
ref w_hl #0:a05 @36:ac @36:ff
ref w_hl #0:a08 @36:af _match_socket 25 +
ref w_hl #0:a0f @36:b8 @36:ff
ref w_hl #0:a19 @36:c3 _send_match_ok_TCP
ref rbyte #0:a1d @36:ca @36:ff
ref w_hl #0:a21 @36:cc _match_socket
ref rbyte #0:a24 @36:d2 @36:fb
ref w_hl #0:a26 @36:d4 _match_socket 1 +
ref rbyte #0:a2b @36:db @36:eb
ref w_hl #0:a2d @36:dd _match_socket 8 +
ref w_hl #0:a2e @36:e0 __ld_dptr_r47
ref w_hl #0:a2f @36:e3 _send_request_ARP
ref rbyte #0:a33 @36:ea @36:ff
ref w_hl #0:a36 @36:ec _match_socket 24 +
ref w_hl #0:a3a @36:f1 _match_socket 25 +
ref rbyte #0:a41 @36:fa @36:ff
ref w_hl #0:a4a @36:100 @36:41
ref w_hl #0:a4b @36:102 @36:53
ref w_hl #0:a4c @36:104 @36:ba
ref w_hl #0:a4d @36:106 @36:ba
ref w_hl #0:a60 @39:1 _match_socket 25 +
ref rbyte #0:a67 @39:8 @39:13
ref w_hl #0:a69 @39:a _match_socket 25 +
ref rbyte #0:a70 @39:12 @39:36
ref w_hl #0:a73 @39:14 _match_socket 25 +
ref w_hl #0:a77 @39:1a _match_socket 24 +
ref byte #0:a7c @39:20 @38:0 0 +
ref byte #0:a7f @39:24 @38:0 0 +
ref rbyte #0:a80 @39:26 @39:2c
ref w_hl #0:a82 @39:28 _final_timeout_socket
ref rbyte #0:a83 @39:2b @39:36
ref byte #0:a86 @39:2d @38:0 0 +
ref w_hl #0:a87 @39:2f _match_socket 24 +
ref w_hl #0:a8b @39:34 _retransmit_socket
ref byte #0:ab6 @3d:1 @3b:0 0 +
ref byte #0:ab7 @3d:3 @3b:0 0 + 1 +
ref byte #0:abb @3d:9 _hframe 8 >> 255 &
ref byte #0:abc @3d:b _hframe 255 &
ref w_hl #0:abd @3d:d _Read_Frame_xdata_Phy
ref byte #0:ac1 @3d:12 @3b:0 0 + 1 +
ref byte #0:ac2 @3d:14 @3b:0 0 + 1 +
ref byte #0:ac4 @3d:18 @3b:0 0 +
ref byte #0:ac5 @3d:1a @3b:0 0 +
ref w_hl #0:ac7 @3d:1c _hframe 12 +
ref byte #0:ace @3d:25 @3b:0 2 +
ref rbyte #0:acf @3d:27 @3d:3d
ref byte #0:ad3 @3d:2b @3b:0 2 +
ref byte #0:ad4 @3d:2d @3b:0 2 +
ref byte #0:ad7 @3d:31 @3b:0 0 + 1 +
ref byte #0:ad8 @3d:33 @3b:0 0 + 1 +
ref byte #0:ada @3d:37 @3b:0 0 +
ref byte #0:adb @3d:39 @3b:0 0 +
ref w_hl #0:add @3d:3b _Read_Frame_long_Phy
ref byte #0:ae1 @3d:3e @3b:0 2 +
ref rbyte #0:ae2 @3d:40 @3d:28
ref byte #0:ae5 @3d:42 @3b:0 2 +
ref byte #0:ae5 @3d:43 _uc_socket 8 >> 255 &
ref byte #0:ae6 @3d:45 @3b:0 2 + 1 +
ref byte #0:ae6 @3d:46 _uc_socket 255 &
ref byte #0:aea @3d:49 @3b:0 4 +
ref byte #0:aed @3d:4b @3b:0 2 +
ref byte #0:aee @3d:4e @3b:0 2 + 1 +
ref rbyte #0:af1 @3d:54 @3d:57
ref rbyte #0:af2 @3d:56 @3d:5a
ref w_hl #0:af4 @3d:58 @3d:fc
ref byte #0:af7 @3d:5b @3b:0 2 +
ref byte #0:af8 @3d:5d @3b:0 2 + 1 +
ref w_hl #0:b01 @3d:6a __ld_dptr_r47
ref w_hl #0:b02 @3d:6d _remote_ip
ref w_hl #0:b03 @3d:70 __ld_dptr_r03
ref w_hl #0:b05 @3d:74 __cmp_i4
ref rbyte #0:b06 @3d:77 @3d:7b
ref w_hl #0:b07 @3d:79 @3d:fc
ref byte #0:b0a @3d:7c @3b:0 2 +
ref byte #0:b0b @3d:7e @3b:0 2 + 1 +
ref w_hl #0:b14 @3d:8b __ld_dptr_r45
ref w_hl #0:b15 @3d:8e _hframe
ref w_hl #0:b16 @3d:91 __ld_dptr_r67
ref rbyte #0:b19 @3d:96 @3d:9b
ref rbyte #0:b1c @3d:9a @3d:9e
ref w_hl #0:b1e @3d:9c @3d:fc
ref byte #0:b21 @3d:9f @3b:0 2 +
ref byte #0:b22 @3d:a1 @3b:0 2 + 1 +
ref w_hl #0:b2b @3d:ae __ld_dptr_r45
ref w_hl #0:b2c @3d:b1 _hframe 2 +
ref w_hl #0:b2d @3d:b4 __ld_dptr_r67
ref rbyte #0:b30 @3d:b9 @3d:be
ref rbyte #0:b33 @3d:bd @3d:c0
ref rbyte #0:b35 @3d:bf @3d:fc
ref byte #0:b3a @3d:c5 _match_socket 8 >> 255 &
ref byte #0:b3b @3d:c7 _match_socket 255 &
ref byte #0:b3c @3d:c9 @3b:0 2 +
ref byte #0:b3d @3d:cb @3b:0 2 + 1 +
ref w_hl #0:b3e @3d:cd _xram_fast_copy
ref byte #0:b40 @3d:d0 @3b:0 0 +
ref byte #0:b41 @3d:d2 @3b:0 0 + 1 +
ref w_hl #0:b42 @3d:d4 _state_machine_TCP
ref byte #0:b44 @3d:d7 @3b:0 5 +
ref byte #0:b45 @3d:d9 @3b:0 5 + 1 +
ref byte #0:b49 @3d:df @3b:0 2 +
ref byte #0:b4a @3d:e1 @3b:0 2 + 1 +
ref byte #0:b4b @3d:e3 _match_socket 8 >> 255 &
ref byte #0:b4c @3d:e5 _match_socket 255 &
ref w_hl #0:b4d @3d:e7 _xram_fast_copy
ref byte #0:b4f @3d:ea @3b:0 4 +
ref byte #0:b52 @3d:f0 @3b:0 5 +
ref byte #0:b53 @3d:f2 @3b:0 5 + 1 +
ref w_hl #0:b5a @3d:fa @3d:1e6
ref byte #0:b63 @3d:fd @3b:0 4 +
ref byte #0:b65 @3d:101 @3b:0 2 + 1 +
ref byte #0:b66 @3d:103 @3b:0 2 + 1 +
ref byte #0:b68 @3d:106 @3b:0 2 +
ref byte #0:b69 @3d:108 @3b:0 2 +
ref byte #0:b6c @3d:10c @3b:0 4 +
ref rbyte #0:b70 @3d:111 @3d:115
ref w_hl #0:b71 @3d:113 @3d:4a
ref w_hl #0:b74 @3d:116 _hframe 13 +
ref rbyte #0:b79 @3d:11e @3d:126
ref w_hl #0:b7d @3d:124 @3d:1e6
ref byte #0:b81 @3d:127 @3b:0 2 +
ref byte #0:b81 @3d:128 _uc_socket 8 >> 255 &
ref byte #0:b82 @3d:12a @3b:0 2 + 1 +
ref byte #0:b82 @3d:12b _uc_socket 255 &
ref byte #0:b86 @3d:12e @3b:0 4 +
ref byte #0:b89 @3d:130 @3b:0 2 +
ref byte #0:b8a @3d:133 @3b:0 2 + 1 +
ref rbyte #0:b8d @3d:139 @3d:13c
ref rbyte #0:b8e @3d:13b @3d:13f
ref w_hl #0:b90 @3d:13d @3d:1b8
ref byte #0:b93 @3d:140 @3b:0 2 +
ref byte #0:b94 @3d:142 @3b:0 2 + 1 +
ref rbyte #0:b97 @3d:146 @3d:148
ref rbyte #0:b9e @3d:151 @3d:155
ref w_hl #0:b9f @3d:153 @3d:1b8
ref byte #0:ba1 @3d:156 @3b:0 2 +
ref byte #0:ba2 @3d:158 @3b:0 2 + 1 +
ref w_hl #0:bab @3d:165 __ld_dptr_r45
ref w_hl #0:bac @3d:168 _hframe 2 +
ref w_hl #0:bad @3d:16b __ld_dptr_r67
ref rbyte #0:bb0 @3d:170 @3d:175
ref rbyte #0:bb3 @3d:174 @3d:177
ref rbyte #0:bb5 @3d:176 @3d:1b8
ref byte #0:bba @3d:17c _match_socket 8 >> 255 &
ref byte #0:bbb @3d:17e _match_socket 255 &
ref byte #0:bbc @3d:180 @3b:0 2 +
ref byte #0:bbd @3d:182 @3b:0 2 + 1 +
ref w_hl #0:bbe @3d:184 _xram_fast_copy
ref byte #0:bc0 @3d:187 @3b:0 0 +
ref byte #0:bc1 @3d:189 @3b:0 0 + 1 +
ref w_hl #0:bc2 @3d:18b _state_machine_TCP
ref byte #0:bc4 @3d:18e @3b:0 5 +
ref byte #0:bc5 @3d:190 @3b:0 5 + 1 +
ref byte #0:bc9 @3d:196 @3b:0 2 +
ref byte #0:bca @3d:198 @3b:0 2 + 1 +
ref byte #0:bcb @3d:19a _match_socket 8 >> 255 &
ref byte #0:bcc @3d:19c _match_socket 255 &
ref w_hl #0:bcd @3d:19e _xram_fast_copy
ref byte #0:bcf @3d:1a1 @3b:0 5 +
ref byte #0:bd0 @3d:1a3 @3b:0 5 + 1 +
ref rbyte #0:bd1 @3d:1a5 @3d:1b8
ref byte #0:bd3 @3d:1a7 @3b:0 4 +
ref byte #0:bd6 @3d:1ad @3b:0 5 +
ref byte #0:bd7 @3d:1af @3b:0 5 + 1 +
ref rbyte #0:bde @3d:1b7 @3d:1e6
ref byte #0:be5 @3d:1b9 @3b:0 4 +
ref byte #0:be7 @3d:1bd @3b:0 2 + 1 +
ref byte #0:be8 @3d:1bf @3b:0 2 + 1 +
ref byte #0:bea @3d:1c2 @3b:0 2 +
ref byte #0:beb @3d:1c4 @3b:0 2 +
ref byte #0:bee @3d:1c8 @3b:0 4 +
ref rbyte #0:bf2 @3d:1cd @3d:1d1
ref w_hl #0:bf3 @3d:1cf @3d:12f
ref w_hl #0:bf6 @3d:1d2 _remote_ip
ref w_hl #0:bf7 @3d:1d5 __ld_dptr_r03
ref byte #0:bf8 @3d:1d8 _remote_mac 8 >> 255 &
ref byte #0:bf9 @3d:1da _remote_mac 255 &
ref byte #0:bfa @3d:1dc @3b:0 0 +
ref byte #0:bfb @3d:1de @3b:0 0 + 1 +
ref w_hl #0:bfc @3d:1e0 _send_incomming_reset_TCP
ref w_hl #0:c2c @40:1 _Read_Frame_word_Phy
ref byte #0:c2f @40:4 @3f:0 0 +
ref byte #0:c30 @40:6 @3f:0 0 + 1 +
ref rbyte #0:c34 @40:e @40:14
ref rbyte #0:c37 @40:13 @40:1b
ref w_hl #0:c3c @40:19 @40:d6
ref w_hl #0:c3f @40:1c _Read_Frame_word_Phy
ref byte #0:c41 @40:1f @3f:0 2 +
ref byte #0:c42 @40:21 @3f:0 2 + 1 +
ref w_hl #0:c44 @40:23 _Read_Frame_word_Phy
ref w_hl #0:c46 @40:26 _Read_Frame_word_Phy
ref rbyte #0:c4a @40:2e @40:36
ref w_hl #0:c4e @40:34 @40:d6
ref w_hl #0:c51 @40:37 _Read_Frame_word_Phy
ref byte #0:c53 @40:3a @3f:0 4 +
ref w_hl #0:c55 @40:3c _Read_Frame_word_Phy
ref w_hl #0:c57 @40:3f _Read_Frame_long_Phy
ref w_hl #0:c58 @40:42 _remote_ip
ref w_hl #0:c59 @40:45 __st_dptr_r47
ref w_hl #0:c5b @40:48 _Read_Frame_long_Phy
ref byte #0:c5f @40:4d @3f:0 2 + 1 +
ref byte #0:c60 @40:4f @3f:0 2 + 1 +
ref byte #0:c62 @40:53 @3f:0 2 +
ref byte #0:c63 @40:55 @3f:0 2 +
ref byte #0:c65 @40:57 @3f:0 0 +
ref byte #0:c66 @40:59 @3f:0 0 + 1 +
ref rbyte #0:c72 @40:6a @40:70
ref rbyte #0:c7a @40:72 @40:6b
ref byte #0:c85 @40:7d @3f:0 0 +
ref byte #0:c86 @40:7f @3f:0 0 + 1 +
ref rbyte #0:c87 @40:81 @40:91
ref w_hl #0:c8a @40:83 _Read_Frame_long_Phy
ref byte #0:c8d @40:88 @3f:0 2 + 1 +
ref byte #0:c8e @40:8a @3f:0 2 + 1 +
ref byte #0:c90 @40:8e @3f:0 2 +
ref byte #0:c91 @40:90 @3f:0 2 +
ref byte #0:c95 @40:92 @3f:0 0 +
ref byte #0:c96 @40:94 @3f:0 0 + 1 +
ref byte #0:c9d @40:9e @3f:0 0 +
ref byte #0:c9e @40:a0 @3f:0 0 + 1 +
ref rbyte #0:ca1 @40:a4 @40:82
ref byte #0:ca4 @40:a8 @3f:0 4 +
ref rbyte #0:ca5 @40:aa @40:b4
ref byte #0:ca7 @40:ac @3f:0 2 +
ref byte #0:ca8 @40:ae @3f:0 2 + 1 +
ref w_hl #0:ca9 @40:b0 _process_ICMP
ref rbyte #0:caa @40:b3 @40:d6
ref byte #0:cae @40:b7 @3f:0 4 +
ref rbyte #0:caf @40:b9 @40:c3
ref byte #0:cb1 @40:bb @3f:0 2 +
ref byte #0:cb2 @40:bd @3f:0 2 + 1 +
ref w_hl #0:cb3 @40:bf _process_TCP
ref rbyte #0:cb4 @40:c2 @40:d6
ref byte #0:cb8 @40:c6 @3f:0 4 +
ref rbyte #0:cb9 @40:c8 @40:d2
ref byte #0:cbb @40:ca @3f:0 2 +
ref byte #0:cbc @40:cc @3f:0 2 + 1 +
ref w_hl #0:cbd @40:ce _process_UDP
ref rbyte #0:cbe @40:d1 @40:d6
ref w_hl #0:cdf @43:e __mul_i2
ref byte #0:ce0 @43:11 _uc_socket 8 >> 255 &
ref byte #0:ce1 @43:13 _uc_socket 255 &
ref rbyte #0:cef @43:25 @43:2c
ref rbyte #0:cf3 @43:2b @43:78
ref w_hl #0:cfe @43:38 __ld_dptr_r67
ref byte #0:cff @43:3b @21:0 6 +
ref byte #0:d00 @43:3d @21:0 7 +
ref w_hl #0:d09 @43:4a __ld_dptr_r67
ref byte #0:d0a @43:4d @21:0 4 +
ref byte #0:d0b @43:4f @21:0 5 +
ref w_hl #0:d14 @43:5c __ld_dptr_r47
ref byte #0:d15 @43:5f @21:0
ref w_hl #0:d16 @43:61 __st_a_r47
ref w_hl #0:d21 @43:73 _send_upd
ref byte #0:d42 @46:1 @45:0 0 +
ref byte #0:d43 @46:3 @45:0 0 + 1 +
ref byte #0:d44 @46:5 @45:0 2 +
ref byte #0:d45 @46:7 @45:0 2 + 1 +
ref w_hl #0:d4b @46:e __mul_i2
ref byte #0:d4c @46:11 _uc_socket 8 >> 255 &
ref byte #0:d4d @46:13 _uc_socket 255 &
ref byte #0:d55 @46:1b @45:0 4 +
ref byte #0:d56 @46:1d @45:0 4 + 1 +
ref byte #0:d5a @46:23 _match_socket 8 >> 255 &
ref byte #0:d5b @46:25 _match_socket 255 &
ref byte #0:d5c @46:27 @45:0 4 +
ref byte #0:d5d @46:29 @45:0 4 + 1 +
ref w_hl #0:d5e @46:2b _xram_fast_copy
ref w_hl #0:d60 @46:2e _match_socket
ref rbyte #0:d63 @46:34 @46:3e
ref w_hl #0:d64 @46:36 _match_socket 1 +
ref rbyte #0:d68 @46:3d @46:45
ref w_hl #0:d6d @46:43 @46:151
ref byte #0:d70 @46:46 @45:0 0 +
ref byte #0:d71 @46:48 @45:0 0 + 1 +
ref rbyte #0:d72 @46:4a @46:58
ref byte #0:d74 @46:4c @45:0 2 +
ref byte #0:d75 @46:4e @45:0 2 + 1 +
ref w_hl #0:d76 @46:50 _free_tx_buf
ref w_hl #0:d7b @46:56 @46:151
ref w_hl #0:d7e @46:59 _match_socket 42 +
ref w_hl #0:d7f @46:5c __ld_dptr_r67
ref rbyte #0:d82 @46:61 @46:93
ref byte #0:d84 @46:63 @45:0 2 +
ref byte #0:d85 @46:65 @45:0 2 + 1 +
ref w_hl #0:d86 @46:67 _match_socket 48 +
ref w_hl #0:d87 @46:6a __st_dptr_r67
ref byte #0:d89 @46:6d @45:0 0 +
ref byte #0:d8a @46:6f @45:0 0 + 1 +
ref w_hl #0:d8b @46:71 _match_socket 42 +
ref w_hl #0:d8c @46:74 __st_dptr_r67
ref byte #0:d8e @46:77 @45:0 0 +
ref byte #0:d8f @46:79 @45:0 0 + 1 +
ref w_hl #0:d95 @46:82 _match_socket 20 +
ref w_hl #0:d96 @46:85 __ld_dptr_r47
ref w_hl #0:d97 @46:88 __add_i4
ref w_hl #0:d98 @46:8b _match_socket 44 +
ref w_hl #0:d99 @46:8e __st_dptr_r47
ref w_hl #0:d9b @46:91 @46:10d
ref w_hl #0:d9e @46:94 _match_socket 34 +
ref w_hl #0:d9f @46:97 __ld_dptr_r67
ref rbyte #0:da2 @46:9c @46:cd
ref byte #0:da4 @46:9e @45:0 2 +
ref byte #0:da5 @46:a0 @45:0 2 + 1 +
ref w_hl #0:da6 @46:a2 _match_socket 40 +
ref w_hl #0:da7 @46:a5 __st_dptr_r67
ref byte #0:da9 @46:a8 @45:0 0 +
ref byte #0:daa @46:aa @45:0 0 + 1 +
ref w_hl #0:dab @46:ac _match_socket 34 +
ref w_hl #0:dac @46:af __st_dptr_r67
ref byte #0:dae @46:b2 @45:0 0 +
ref byte #0:daf @46:b4 @45:0 0 + 1 +
ref w_hl #0:db5 @46:bd _match_socket 20 +
ref w_hl #0:db6 @46:c0 __ld_dptr_r47
ref w_hl #0:db7 @46:c3 __add_i4
ref w_hl #0:db8 @46:c6 _match_socket 36 +
ref w_hl #0:db9 @46:c9 __st_dptr_r47
ref rbyte #0:dbb @46:cc @46:10d
ref w_hl #0:dbe @46:ce _match_socket 26 +
ref w_hl #0:dbf @46:d1 __ld_dptr_r67
ref rbyte #0:dc2 @46:d6 @46:107
ref byte #0:dc4 @46:d8 @45:0 2 +
ref byte #0:dc5 @46:da @45:0 2 + 1 +
ref w_hl #0:dc6 @46:dc _match_socket 32 +
ref w_hl #0:dc7 @46:df __st_dptr_r67
ref byte #0:dc9 @46:e2 @45:0 0 +
ref byte #0:dca @46:e4 @45:0 0 + 1 +
ref w_hl #0:dcb @46:e6 _match_socket 26 +
ref w_hl #0:dcc @46:e9 __st_dptr_r67
ref byte #0:dce @46:ec @45:0 0 +
ref byte #0:dcf @46:ee @45:0 0 + 1 +
ref w_hl #0:dd5 @46:f7 _match_socket 20 +
ref w_hl #0:dd6 @46:fa __ld_dptr_r47
ref w_hl #0:dd7 @46:fd __add_i4
ref w_hl #0:dd8 @46:100 _match_socket 28 +
ref w_hl #0:dd9 @46:103 __st_dptr_r47
ref rbyte #0:ddb @46:106 @46:10d
ref rbyte #0:de0 @46:10c @46:151
ref byte #0:de6 @46:110 @45:0 0 +
ref byte #0:de7 @46:112 @45:0 0 + 1 +
ref byte #0:de8 @46:114 @45:0 2 +
ref byte #0:de9 @46:116 @45:0 2 + 1 +
ref w_hl #0:dea @46:118 _send_match_ok_TCP
ref byte #0:dec @46:11b @45:0 0 +
ref byte #0:ded @46:11d @45:0 0 + 1 +
ref w_hl #0:df3 @46:126 _match_socket 20 +
ref w_hl #0:df4 @46:129 __ld_dptr_r47
ref w_hl #0:df5 @46:12c __add_i4
ref w_hl #0:df6 @46:12f _match_socket 20 +
ref w_hl #0:df7 @46:132 __st_dptr_r47
ref w_hl #0:df9 @46:135 _match_socket 24 +
ref w_hl #0:dfd @46:13a _match_socket 25 +
ref byte #0:e03 @46:144 @45:0 4 +
ref byte #0:e04 @46:146 @45:0 4 + 1 +
ref byte #0:e05 @46:148 _match_socket 8 >> 255 &
ref byte #0:e06 @46:14a _match_socket 255 &
ref w_hl #0:e07 @46:14c _xram_fast_copy
ref w_hl #0:e21 @49:a __mul_i2
ref byte #0:e22 @49:d _uc_socket 8 >> 255 &
ref byte #0:e23 @49:f _uc_socket 255 &
ref rbyte #0:e30 @49:20 @49:34
ref rbyte #0:e3c @49:33 @49:3b
ref w_hl #0:e41 @49:39 @49:7e
ref w_hl #0:e44 @49:3c _tx_bufleft
ref rbyte #0:e47 @49:41 @49:48
ref rbyte #0:e4b @49:47 @49:7e
ref rbyte #0:e4f @49:4a @49:63
ref w_hl #0:e59 @49:57 __ld_dptr_r67
ref rbyte #0:e5c @49:5c @49:7b
ref rbyte #0:e60 @49:62 @49:7e
ref w_hl #0:e6c @49:6f __ld_dptr_r67
ref rbyte #0:e6f @49:74 @49:7b
ref rbyte #0:e73 @49:7a @49:7e
ref byte #0:e99 @4e:1 @4b:0 0 +
ref w_hl #0:e9a @4e:3 __st_a_r03
ref byte #0:e9b @4e:6 @4b:0 4 +
ref byte #0:e9e @4e:a @4b:0 4 +
ref w_hl #0:e9f @4e:c _notready_socket_tcp
ref rbyte #0:ea2 @4e:11 @4e:19
ref w_hl #0:ea6 @4e:17 @4e:72
ref byte #0:ea9 @4e:1a @4b:0 0 +
ref w_hl #0:eaa @4e:1c __ld_a_r47
ref w_hl #0:eab @4e:1f _strlen
ref byte #0:ead @4e:22 @4b:0 5 +
ref byte #0:eae @4e:24 @4b:0 5 + 1 +
ref byte #0:eb2 @4e:2a @4b:0 5 +
ref byte #0:eb3 @4e:2c @4b:0 5 + 1 +
ref rbyte #0:eb9 @4e:33 @4e:3a
ref rbyte #0:ebd @4e:39 @4e:72
ref w_hl #0:ec0 @4e:3b _allocate_tx_buf
ref byte #0:ec2 @4e:3e @4b:0 7 +
ref byte #0:ec3 @4e:40 @4b:0 7 + 1 +
ref byte #0:ec5 @4e:42 @4b:0 7 +
ref byte #0:ec6 @4e:44 @4b:0 7 + 1 +
ref rbyte #0:ec7 @4e:46 @4e:4d
ref rbyte #0:ecb @4e:4c @4e:72
ref byte #0:ece @4e:4e @4b:0 5 +
ref byte #0:ece @4e:4f @4d:0
ref byte #0:ecf @4e:51 @4b:0 5 + 1 +
ref byte #0:ecf @4e:52 @4d:0 1 +
ref byte #0:ed0 @4e:54 @4b:0 7 +
ref byte #0:ed1 @4e:56 @4b:0 7 + 1 +
ref byte #0:ed5 @4e:5e @4b:0 0 +
ref w_hl #0:ed6 @4e:60 __ld_a_r47
ref w_hl #0:ed7 @4e:63 _bmove
ref byte #0:ed9 @4e:66 @4b:0 5 +
ref byte #0:eda @4e:68 @4b:0 5 + 1 +
ref byte #0:edb @4e:6a @4b:0 7 +
ref byte #0:edc @4e:6c @4b:0 7 + 1 +
ref byte #0:edd @4e:6e @4b:0 4 +
ref w_hl #0:ede @4e:70 _send_socket_tcp
ref w_hl #0:efa @51:6 __mul_i2
ref byte #0:efb @51:9 _uc_socket 8 >> 255 &
ref byte #0:efc @51:b _uc_socket 255 &
ref byte #0:f04 @51:13 @50:0 0 +
ref byte #0:f05 @51:15 @50:0 0 + 1 +
ref byte #0:f09 @51:1b _match_socket 8 >> 255 &
ref byte #0:f0a @51:1d _match_socket 255 &
ref byte #0:f0b @51:1f @50:0 0 +
ref byte #0:f0c @51:21 @50:0 0 + 1 +
ref w_hl #0:f0d @51:23 _xram_fast_copy
ref w_hl #0:f0f @51:26 _match_socket
ref rbyte #0:f12 @51:2c @51:34
ref w_hl #0:f13 @51:2e _match_socket 1 +
ref rbyte #0:f16 @51:33 @51:3b
ref w_hl #0:f1b @51:39 @51:8e
ref w_hl #0:f1e @51:3c _match_socket 42 +
ref w_hl #0:f1f @51:3f __ld_dptr_r67
ref rbyte #0:f22 @51:44 @51:4b
ref rbyte #0:f26 @51:4a @51:8e
ref w_hl #0:f30 @51:54 _send_match_ok_TCP
ref w_hl #0:f37 @51:5d _match_socket 20 +
ref w_hl #0:f38 @51:60 __ld_dptr_r47
ref w_hl #0:f39 @51:63 __add_i4
ref w_hl #0:f3a @51:66 _match_socket 20 +
ref w_hl #0:f3b @51:69 __st_dptr_r47
ref w_hl #0:f3d @51:6c _match_socket 1 +
ref w_hl #0:f41 @51:72 _match_socket 24 +
ref w_hl #0:f45 @51:77 _match_socket 25 +
ref byte #0:f4b @51:81 @50:0 0 +
ref byte #0:f4c @51:83 @50:0 0 + 1 +
ref byte #0:f4d @51:85 _match_socket 8 >> 255 &
ref byte #0:f4e @51:87 _match_socket 255 &
ref w_hl #0:f4f @51:89 _xram_fast_copy
ref byte #0:f6e @54:1 @53:0 0 +
ref w_hl #0:f6f @54:3 __st_a_r03
ref w_hl #0:f75 @54:b __mul_i2
ref byte #0:f76 @54:e _uc_socket 8 >> 255 &
ref byte #0:f77 @54:10 _uc_socket 255 &
ref byte #0:f7f @54:18 @53:0 4 +
ref byte #0:f80 @54:1a @53:0 4 + 1 +
ref byte #0:f84 @54:20 _match_socket 8 >> 255 &
ref byte #0:f85 @54:22 _match_socket 255 &
ref byte #0:f86 @54:24 @53:0 4 +
ref byte #0:f87 @54:26 @53:0 4 + 1 +
ref w_hl #0:f88 @54:28 _xram_fast_copy
ref w_hl #0:f8a @54:2b _match_socket
ref rbyte #0:f8d @54:31 @54:39
ref w_hl #0:f8e @54:33 _match_socket 1 +
ref rbyte #0:f91 @54:38 @54:40
ref w_hl #0:f96 @54:3e @54:b1
ref byte #0:f99 @54:41 @53:0 0 +
ref w_hl #0:f9a @54:43 __ld_a_r47
ref w_hl #0:f9b @54:46 _match_socket 8 +
ref w_hl #0:f9c @54:49 __st_dptr_r47
ref byte #0:f9e @54:4c @52:0 0 +
ref byte #0:f9f @54:4e @52:0 0 + 1 +
ref w_hl #0:fa0 @54:50 _match_socket 12 +
ref w_hl #0:fa1 @54:53 __st_dptr_r67
ref byte #0:fa7 @54:5e @53:0 0 +
ref w_hl #0:fa8 @54:60 __ld_a_r47
ref w_hl #0:faa @54:64 __cmp_i4
ref rbyte #0:fab @54:67 @54:83
ref byte #0:fad @54:69 @53:0 0 +
ref w_hl #0:fae @54:6b __ld_a_r47
ref w_hl #0:faf @54:6e _send_request_ARP
ref w_hl #0:fb1 @54:71 _match_socket 1 +
ref w_hl #0:fb5 @54:77 _match_socket 24 +
ref w_hl #0:fb9 @54:7c _match_socket 25 +
ref rbyte #0:fbd @54:82 @54:9f
ref w_hl #0:fc1 @54:86 _match_socket 2 +
ref rbyte #0:fc9 @54:8d @54:88
ref w_hl #0:fcb @54:8f _match_socket 1 +
ref w_hl #0:fcf @54:95 _match_socket 24 +
ref w_hl #0:fd3 @54:9a _match_socket 25 +
ref byte #0:fdb @54:a4 @53:0 4 +
ref byte #0:fdc @54:a6 @53:0 4 + 1 +
ref byte #0:fdd @54:a8 _match_socket 8 >> 255 &
ref byte #0:fde @54:aa _match_socket 255 &
ref w_hl #0:fdf @54:ac _xram_fast_copy
ref w_hl #0:ffd @57:6 __mul_i2
ref byte #0:ffe @57:9 _uc_socket 8 >> 255 &
ref byte #0:fff @57:b _uc_socket 255 &
ref byte #0:1007 @57:13 @56:0 0 +
ref byte #0:1008 @57:15 @56:0 0 + 1 +
ref byte #0:100c @57:1b _match_socket 8 >> 255 &
ref byte #0:100d @57:1d _match_socket 255 &
ref byte #0:100e @57:1f @56:0 0 +
ref byte #0:100f @57:21 @56:0 0 + 1 +
ref w_hl #0:1010 @57:23 _xram_fast_copy
ref w_hl #0:1012 @57:26 _match_socket
ref rbyte #0:1015 @57:2c @57:34
ref w_hl #0:1016 @57:2e _match_socket 1 +
ref rbyte #0:1019 @57:33 @57:3a
ref rbyte #0:101e @57:39 @57:51
ref w_hl #0:1021 @57:3b _match_socket 1 +
ref byte #0:1027 @57:44 @56:0 0 +
ref byte #0:1028 @57:46 @56:0 0 + 1 +
ref byte #0:1029 @57:48 _match_socket 8 >> 255 &
ref byte #0:102a @57:4a _match_socket 255 &
ref w_hl #0:102b @57:4c _xram_fast_copy
ref rbyte #0:106b @5e:9 @5e:13
ref w_hl #0:106d @5e:b _Init_Mac
ref byte #0:106f @5e:e _rx_bd
ref byte #0:1070 @5e:11 _rx_bd 1 +
ref rbyte #0:1079 @5e:1c @5e:2a
ref rbyte #0:108c @5e:33 @5e:37
ref w_hl #0:108d @5e:35 @5e:1f4
ref byte #0:1090 @5e:38 _rx_bd
ref byte #0:1091 @5e:3a _rx_bd 1 +
ref rbyte #0:1092 @5e:3c @5e:53
ref w_hl #0:1094 @5e:3e _find_RX_Buffer
ref byte #0:1095 @5e:41 _rx_bd
ref byte #0:1096 @5e:43 _rx_bd 1 +
ref byte #0:1098 @5e:45 _rx_bd
ref byte #0:1099 @5e:47 _rx_bd 1 +
ref rbyte #0:109a @5e:49 @5e:4d
ref w_hl #0:109b @5e:4b @5e:d0
ref w_hl #0:10a1 @5e:51 @5e:27b
ref rbyte #0:10a8 @5e:56 @5e:83
ref byte #0:10ab @5e:58 _rx_bd
ref byte #0:10ac @5e:5a _rx_bd 1 +
ref byte #0:10b3 @5e:63 _rx_bd
ref byte #0:10b4 @5e:65 _rx_bd 1 +
ref rbyte #0:10b9 @5e:6d @5e:72
ref rbyte #0:10bc @5e:71 @5e:74
ref rbyte #0:10be @5e:73 @5e:83
ref byte #0:10c9 @5e:80 _rx_bd
ref byte #0:10ca @5e:82 _rx_bd 1 +
ref rbyte #0:10d7 @5e:90 @5e:af
ref byte #0:10d8 @5e:92 _rx_bd
ref byte #0:10d9 @5e:94 _rx_bd 1 +
ref w_hl #0:10e2 @5e:a1 __ld_dptr_r67
ref rbyte #0:10e7 @5e:ab @5e:af
ref w_hl #0:10e8 @5e:ad @5e:57
ref byte #0:10ec @5e:b0 _rx_bd
ref byte #0:10ed @5e:b2 _rx_bd 1 +
ref w_hl #0:10f6 @5e:bf __ld_dptr_r67
ref rbyte #0:10fb @5e:c9 @5e:d0
ref w_hl #0:1100 @5e:ce @5e:27b
ref w_hl #0:1105 @5e:d1 _init_rx
ref w_hl #0:1107 @5e:d4 _Read_Frame_word_Phy
ref w_hl #0:1109 @5e:d7 _Read_Frame_long_Phy
ref byte #0:110d @5e:de _remote_mac 8 >> 255 &
ref byte #0:110e @5e:e0 _remote_mac 255 &
ref w_hl #0:110f @5e:e2 _Read_Frame_xdata_Phy
ref w_hl #0:1111 @5e:e5 _Read_Frame_word_Phy
ref byte #0:1113 @5e:e8 @5a:0 0 +
ref byte #0:1114 @5e:ea @5a:0 0 + 1 +
ref byte #0:1118 @5e:f0 @5a:0 0 +
ref byte #0:1119 @5e:f2 @5a:0 0 + 1 +
ref rbyte #0:111f @5e:f9 @5e:123
ref w_hl #0:1123 @5e:ff _net_match_uint
ref rbyte #0:1125 @5e:103 @5e:10a
ref w_hl #0:112a @5e:108 @5e:27b
ref w_hl #0:1132 @5e:111 _net_match_ulong
ref rbyte #0:1134 @5e:115 @5e:11c
ref w_hl #0:1139 @5e:11a @5e:27b
ref w_hl #0:113c @5e:11d _Read_Frame_word_Phy
ref byte #0:113d @5e:120 @5a:0 0 +
ref byte #0:113e @5e:122 @5a:0 0 + 1 +
ref byte #0:1144 @5e:125 @5a:0 2 +
ref byte #0:1145 @5e:127 @5a:0 2 + 1 +
ref byte #0:1147 @5e:129 @5a:0 0 +
ref byte #0:1148 @5e:12b @5a:0 0 + 1 +
ref rbyte #0:1149 @5e:12e @5e:13b
ref rbyte #0:114a @5e:131 @5e:13b
ref w_hl #0:114c @5e:133 _process_ARP
ref byte #0:114d @5e:136 @5a:0 2 +
ref byte #0:114e @5e:138 @5a:0 2 + 1 +
ref rbyte #0:1150 @5e:13a @5e:14c
ref byte #0:1153 @5e:13c @5a:0 0 +
ref byte #0:1154 @5e:13e @5a:0 0 + 1 +
ref rbyte #0:1155 @5e:141 @5e:14c
ref rbyte #0:1156 @5e:144 @5e:14c
ref w_hl #0:1158 @5e:146 _process_IP
ref byte #0:1159 @5e:149 @5a:0 2 +
ref byte #0:115a @5e:14b @5a:0 2 + 1 +
ref byte #0:1162 @5e:150 _rx_bd
ref byte #0:1163 @5e:152 _rx_bd 1 +
ref w_hl #0:1166 @5e:158 __st_dptr_r45
ref byte #0:1169 @5e:15d _rx_bd 1 +
ref byte #0:116c @5e:162 _rx_bd
ref w_hl #0:1172 @5e:16e __ld_dptr_r67
ref w_hl #0:117f @5e:187 __st_dptr_r45
ref byte #0:1181 @5e:18a _rx_bd
ref byte #0:1182 @5e:18c _rx_bd 1 +
ref byte #0:1185 @5e:18e _rx_bd
ref byte #0:1186 @5e:190 _rx_bd 1 +
ref byte #0:118d @5e:199 _rx_bd
ref byte #0:118e @5e:19b _rx_bd 1 +
ref rbyte #0:1199 @5e:1aa @5e:1af
ref rbyte #0:119c @5e:1ae @5e:1b1
ref rbyte #0:119e @5e:1b0 @5e:1c0
ref byte #0:11a9 @5e:1bd _rx_bd
ref byte #0:11aa @5e:1bf _rx_bd 1 +
ref byte #0:11ae @5e:1c1 _rx_bd
ref byte #0:11af @5e:1c3 _rx_bd 1 +
ref rbyte #0:11b2 @5e:1c7 @5e:1cc
ref rbyte #0:11b5 @5e:1cb @5e:1e7
ref byte #0:11b7 @5e:1cd _rx_bd
ref byte #0:11b8 @5e:1cf _rx_bd 1 +
ref w_hl #0:11c1 @5e:1dc __ld_dptr_r67
ref rbyte #0:11c6 @5e:1e6 @5e:1ed
ref byte #0:11cf @5e:1ee @5a:0 2 +
ref byte #0:11d0 @5e:1f0 @5a:0 2 + 1 +
ref w_hl #0:11d1 @5e:1f2 @5e:27b
ref byte #0:11d4 @5e:1f5 _net_timer
ref rbyte #0:11d5 @5e:1f7 @5e:1fb
ref w_hl #0:11d6 @5e:1f9 @5e:278
ref byte #0:11d9 @5e:1fc _net_service_cnt
ref byte #0:11db @5e:1fe _net_timer
ref byte #0:11de @5e:201 @5a:0 0 +
ref byte #0:11de @5e:202 _uc_socket 8 >> 255 &
ref byte #0:11df @5e:204 @5a:0 0 + 1 +
ref byte #0:11df @5e:205 _uc_socket 255 &
ref byte #0:11e3 @5e:208 @5a:0 2 +
ref byte #0:11e6 @5e:20a @5a:0 0 +
ref byte #0:11e7 @5e:20c @5a:0 0 + 1 +
ref rbyte #0:11ea @5e:210 @5e:212
ref rbyte #0:11f1 @5e:21b @5e:259
ref byte #0:11f5 @5e:221 _match_socket 8 >> 255 &
ref byte #0:11f6 @5e:223 _match_socket 255 &
ref byte #0:11f7 @5e:225 @5a:0 0 +
ref byte #0:11f8 @5e:227 @5a:0 0 + 1 +
ref w_hl #0:11f9 @5e:229 _xram_fast_copy
ref w_hl #0:11fb @5e:22c _periodical_socket
ref byte #0:11fd @5e:22f @5a:0 3 +
ref byte #0:11fe @5e:231 @5a:0 3 + 1 +
ref byte #0:1202 @5e:237 @5a:0 0 +
ref byte #0:1203 @5e:239 @5a:0 0 + 1 +
ref byte #0:1204 @5e:23b _match_socket 8 >> 255 &
ref byte #0:1205 @5e:23d _match_socket 255 &
ref w_hl #0:1206 @5e:23f _xram_fast_copy
ref byte #0:1208 @5e:242 @5a:0 3 +
ref byte #0:1209 @5e:244 @5a:0 3 + 1 +
ref rbyte #0:120a @5e:246 @5e:259
ref byte #0:120c @5e:248 @5a:0 2 +
ref byte #0:120f @5e:24e @5a:0 3 +
ref byte #0:1210 @5e:250 @5a:0 3 + 1 +
ref rbyte #0:1217 @5e:258 @5e:27b
ref byte #0:121c @5e:25a @5a:0 2 +
ref byte #0:121e @5e:25e @5a:0 0 + 1 +
ref byte #0:121f @5e:260 @5a:0 0 + 1 +
ref byte #0:1221 @5e:263 @5a:0 0 +
ref byte #0:1222 @5e:265 @5a:0 0 +
ref byte #0:1225 @5e:269 @5a:0 2 +
ref rbyte #0:1229 @5e:26e @5e:272
ref w_hl #0:122a @5e:270 @5e:209
ref rbyte #0:122f @5e:277 @5e:27b
ref w_hl #0:123a @5f:1 _timer0int
ref byte #0:1246 @62:a _net_timer
ref rbyte #0:1248 @62:d @62:11
ref byte #0:124a @62:10 _net_timer
ref w_hl #0:1260 @66:1 _Init_Mac
ref rbyte #0:1263 @66:6 @66:b
ref rbyte #0:1266 @66:a @66:22
ref w_hl #0:1277 @66:1e __wait_ms
objectdebug
dtx ; *** 'C:\uC51\bin\uc51.exe': uC/51 - ANSI C compiler
dtx ; *** Standard 'i8051', V1.25, Jan 24 2004 (C) WWW.WICKENHAEUSER.COM
dtx ; sourcefile: 'tcpip\net.c', time: Wed Dec 13 13:00:40 2006
dtx 
dtx  .hide
dtx  .show
dtx XDS=0
dtx COS=1
dtx NES=2
dtx INS=2
dtx .macro __line
dtx lcall $0006 ; uC/51 debugger
dtx .endmacro
dtx         .include <reg51.def>
dtx ; **** 8051 standard defs ***
dtx ; common registers to all 8051's
dtx         .hide
dtx         .show
dtx         .include <reg52.def>
dtx ; **** 80C52 (extended) defs ***
dtx 
dtx         .hide
dtx         .show
dtx .macro _irq_vector
dtx         .show
dtx         .segment @1, org @2
dtx         ljmp @3
dtx         .hide
dtx .endmacro
dtx         P0    = $80
dtx         sevseg_ctrl  = $C0;
dtx   sevseg_data0 = $C1;
dtx   sevseg_data1 = $C2;
dtx   sevseg_data2 = $C3;
dtx   sevseg_data3 = $C4;
dtx   sevseg_en    = $C5;
dtx   _sevseg_ctrl  = sevseg_ctrl;
dtx   _sevseg_data0 = sevseg_data0;
dtx   _sevseg_data1 = sevseg_data1;
dtx   _sevseg_data2 = sevseg_data2;
dtx   _sevseg_data3 = sevseg_data3;
dtx   _sevseg_en    = sevseg_en;
dtx 
dtx  .segment data, sclass xram
dtx  .export _my_mac ; xdata unsigned char my_mac[6]
dtx _my_mac: ; xdata unsigned char my_mac[6]
dco @0:0 u:2  .dc.b 0,6
dco @0:2 u:2  .dc.b 152,1
dco @0:4 u:2  .dc.b 0,0
dtx  .export _tx_bufleft ; xdata unsigned char tx_bufleft
dtx _tx_bufleft: ; xdata unsigned char tx_bufleft
dco @0:6 u:1  .dc.b 4
dtx  .export _allocate_tx_buf ; xdata unsigned char *allocate_tx_buf(void)
dtx  .segment _allocate_tx_buf_formal_near, size 0, fill, notext, sclass dram
dtx  .segment _allocate_tx_buf_local_near, size 0, fill, notext, sclass dram
dtx  .sgraph _allocate_tx_buf_formal_near, _allocate_tx_buf_local_near, __allocate_tx_buf
dtx 
dtx  .segment __allocate_tx_buf
dtx _allocate_tx_buf: ; (leaf function) xdata unsigned char *allocate_tx_buf(void)
dhl /*********************************************************************************
dhl * NET.C
dhl * 
dhl * IP/ICMP/ARP/TCP/UDP packet handler 
dhl *
dhl * V3.01 (C) 2004-2005 WWW.WICKENHAEUSER.DE
dhl *
dhl * Please support us:
dhl * ==================
dhl * 
dhl * We offer the uC/51-ANSI-C-Compiler at a very low price. So we do not have a
dhl * large budget for advertisements. Every link to our Internet pages
dhl * (WWW.WICKENHAEUSER.COM, WWW.WICKENHAEUSER.DE, WWW.FLEXGATE.COM, WWW.FLEXGATE.DE)
dhl * is welcome! 
dhl *
dhl **********************************************************************************/
dhl 
dhl #include <stdio.h>
dhl #include <string.h> 
dhl 
dhl #include <reg52.h>
dhl 
dhl #include <irq52.h>
dhl 
dhl #include "net.h"  // Basic network handling (public)
dhl #include "phy.h"  // Physical Network access
dhl #include "open_ether.h"
dhl #include "netutil.h"  // Toolbox
dhl 
dhl /**********************************************************************************
dhl * Private structs
dhl **********************************************************************************/
dhl typedef struct{
dhl  uint vhl_service; // 0x45xx-0x4Fxx
dhl  uint len;  
dhl  uint ident;
dhl  uint frags;
dhl  uchar ttl;
dhl  uchar pcol;
dhl  uint checksum;
dhl  IP_ADR sip;
dhl  IP_ADR dip;
dhl } IP_HDR;
dhl 
dhl /**********************************************************************************
dhl * Private Definitions (not in net.h)
dhl **********************************************************************************/
dhl 
dhl /************ TCP Soecket states *************************/
dhl //#define TCP_CLOSED  0 // 0 for all: Socket closed (and listen)
dhl 
dhl // ** Initial Server States
dhl #define TCP_SYNCON  1   // Confirmed an incomming SYN
dhl //#define TCP_EST  2    // Established, Connection OK
dhl 
dhl // ** Closing
dhl #define TCP_FINSENT  3    // A FIN was sent. Wait for Acknowledge+FIN
dhl #define TCP_FINCON 4    // Confirmed a FIN with FIN+ACK, waiting for last ACK
dhl 
dhl // ** Client States
dhl #ifdef USE_TCP_CLIENT
dhl  #define TCP_SYNSENT  5   // Arp was Ok, send SYN now
dhl #endif
dhl 
dhl /************ UDP Socket states *************************/
dhl 
dhl // #define UDP_EST ARPREC
dhl 
dhl /* TCP-Option-Flags */
dhl #define TFIN 0x01
dhl #define TSYN 0x02
dhl #define TRST 0x04
dhl #define TPUSH 0x08
dhl #define TACK 0x10
dhl #define TURGE 0x20  // Flag ignored
dhl 
dhl 
dhl /**********************************************************************************
dhl * OPTION DEFS: see net.h
dhl **********************************************************************************/
dhl 
dhl /**********************************************************************************
dhl * MAC-Level data
dhl *
dhl * Set a (default) MAC for THIS node
dhl **********************************************************************************/
dhl #ifdef PHY_ETH
dhl MAC my_mac={0x00,0x06,0x98,0x01,0x00,0x00}; // MAC for this machine: M0:M1:M2:M3:M4:M5
dhl MAC remote_mac;  // used as temp.
dhl  #if defined(USE_TCP_CLIENT) || defined(USE_UDP_CLIENT)
dhl   MAC gateway_mac; // optional Gateway for active oen of an "ouside" peer
dhl  #endif
dhl #endif
dhl 
dhl 
dhl /**********************************************************************************
dhl * IP-Header-Level data
dhl *
dhl * Set a IP for THIS node
dhl **********************************************************************************/
dhl IP_ADR  my_ip;    // IP for this machine (public)
dhl IP_ADR remote_ip;   // Last read IP
dhl 
dhl #if defined(USE_TCP_CLIENT) || defined(USE_UDP_CLIENT)
dhl IP_ADR subnet_ip;   // These two IPs require Setup!
dhl IP_ADR gateway_ip;
dhl #endif
dhl 
dhl IP_HDR hhdr;    // Temporary header for sending IP-data
dhl 
dhl /**********************************************************************************
dhl * ICMP/ARP-Level data
dhl *
dhl * ICMP is designed for Standard WIN-pings with 0-32 bytes. Enlarge structs if req.
dhl **********************************************************************************/
dhl 
dhl 
dhl typedef struct{ // Definition
dhl   IP_ADR sip;
dhl   IP_ADR dip;
dhl   uint pcol; // 6 for TCP, 17 for UDP 
dhl   uint len;
dhl } PSEUDO_HDR;
dhl 
dhl PSEUDO_HDR pseudo_hdr;  // Used for TCP/IP-Checksums
dhl 
dhl #ifdef USE_MSS
dhl  #if MAX_TX < 576
dhl   #error Maximum Segment Size (MSS, = MAX_TX) too small, must be >=576!
dhl  #endif
dhl #endif
dhl 
dhl 
dhl #ifdef PHY_ETH
dhl // Same variables for initial examination of incomming frames
dhl typedef struct{ // Size: 20 Bytes
dhl  MAC sender_mac;
dhl  IP_ADR sender_ip;
dhl  MAC target_mac; 
dhl  IP_ADR target_ip;
dhl } ARP_INFO; // The informative Part of an ARP message...
dhl #endif
dhl 
dhl typedef struct{ // Size: 40 Bytes
dhl  uchar type;
dhl  uchar icmp_code;
dhl  uint checksum;
dhl  uint ident; // Commonly unused
dhl  uint sequ; // dto.
dhl #ifdef SHORT_PING
dhl  uchar data[12]; // Save to clip PING DATA for preserve RAM, so PING fits in 20 Bytes...
dhl #else
dhl  uchar data[32]; // large enough for a standard WINDOWS ping...
dhl #endif
dhl } PING_INFO;  // A frame for a standard PING
dhl 
dhl typedef struct{ // Size: 20 Bytes
dhl  uint sport; // Source port
dhl  uint dport; // Destination port
dhl 
dhl  WORD2_LONG seq; // Sequence ('my pointer');
dhl  WORD2_LONG ack; // Acknowledge ('your pointer')
dhl 
dhl  uchar hlen; // TCP header len <<2 (==80 without Options)
dhl  uchar flags; // option Flags TFIN-TURGE
dhl 
dhl  uint window; // window size
dhl  uint checksum; // 
dhl  uint urgent; // urgend pointer (commonly unused)
dhl #ifdef USE_MSS
dhl  unsigned long mss;     // 4 Bytes 2 4 MAX_RX.16
dhl #endif
dhl } TCP_HDR;
dhl 
dhl #ifdef USE_UDP
dhl typedef struct{ // Size: 8 Bytes (Struct. Currently not used)
dhl  uint sport; // Source port
dhl  uint dport; // Destination port
dhl 
dhl  uint mlen; // MessageLen
dhl  uint checksum; // 
dhl } UDP_HDR;
dhl #endif
dhl 
dhl #ifdef SHORT_PING
dhl  #ifdef USE_MSS
dhl         #define HFRAME_SIZE 24 // For short Pings... (extended by 4 Bytes MSS)
dhl  #else
dhl         #define HFRAME_SIZE 20 // For short Pings...
dhl  #endif
dhl #else
dhl  #define HFRAME_SIZE 40 // Large enough for the biggest header
dhl #endif
dhl 
dhl typedef union{
dhl #ifdef PHY_ETH
dhl  ARP_INFO  arp_info; // 2.nd Level      // Size: 20 Bytes
dhl #endif
dhl  PING_INFO ping_info; // 2.nd Level     // Default Size: 40 Bytes (save to clip to 8, if PING_DATA cli
dhl  TCP_HDR  tcp_hdr; // 3.rd Level, remote IP in remote_ip, rest of IP_HDR known. 20 Bytes Standard
dhl #ifdef USE_UDP
dhl  UDP_HDR  udp_hdr; // 3.rd Level        // Size: 8 Bytes
dhl #endif
dhl  uchar bytes[HFRAME_SIZE]; // Bytes of "generic" access
dhl } HFRAME;
dhl 
dhl // A Frame for temporary usage 2.nd and 3.rd level
dhl HFRAME hframe;
dhl 
dhl /**********************************************************************************
dhl * The timer, counts down with about 2 Hz
dhl **********************************************************************************/
dhl uchar near net_timer; // Temporary value, counts down until by an IRQ
dhl uchar near net_service_cnt; // Additional Timer, counts up. twice /sec.
dhl 
dhl /**********************************************************************************
dhl * The 'official' buffers in XRAM
dhl **********************************************************************************/
dhl 
dhl // RX-Buffer (1)
dhl #ifdef PHY_ETH
dhl         uchar rcv_buf[MAX_RX];   // Physical Buffer for receiving data (Mainly HTTP-Header...)
dhl #else
dhl         xdata uchar* rcv_buf;   // [MAX_RX]Pointer to Buffer for receiving data (Mainly HTTP-Header...
dhl #endif
dhl 
dhl uint rcv_len;    // Size of received data (int)
dhl 
dhl // TX-Buffers (x)
dhl uchar tx_buffers[TX_BUFFERS][MAX_TX+1];
dhl uchar tx_bufleft=TX_BUFFERS; // Counts left buffers
dhl 
dhl /**********************************************************************************
dhl * This uC/51 is designed to support a maximum of >8 simultaneous open sockets
dhl *
dhl * ** Only implemented as a fragment until now!
dhl * ** later there will be a bit-mask holding the 'active' sockets
dhl * ** ** Later socket types: SOCKET_NONE(==0), UDP(port), TCP(port), HTTP, TELNET, ...
dhl *
dhl **********************************************************************************/
dhl 
dhl UC_SOCKET match_socket;  // Temporary matching socket (Work-pad!)
dhl 
dhl // *** THE SOCKETS ***
dhl UC_SOCKET uc_socket[MAX_SOCK];  // My (User's) Sockets!
dhl 
dhl 
dhl 
dhl #ifdef DEBUG_REC
dhl /**********************************************************************************
dhl * Debugging Stuff: Records sent and receiced frames
dhl **********************************************************************************/
dhl 
dhl uint rec_no;
dhl typedef struct{
dhl     uchar typ;  // 'R': Received, 'T' Transmitted, 't' Retransmitted, ...
dhl     uint port;
dhl     unsigned long seq;
dhl     unsigned long ack;
dhl     uchar flags;
dhl     uint len;
dhl } REC_FRAME;
dhl 
dhl REC_FRAME rec_frame[MAX_REC_FRAME];
dhl 
dhl 
dhl /**********************************************************************************
dhl * record_frame: Record 1 Frame
dhl **********************************************************************************/
dhl void record_frame(uchar typ, uint port, unsigned long seq, unsigned long ack, uchar flags, uint len){
dhl     xdata REC_FRAME *pr;
dhl     if(rec_no==MAX_REC_FRAME) return;   // FULL!
dhl     pr=rec_frame+rec_no;
dhl     pr->typ=typ;
dhl     pr->port=port;
dhl     pr->seq=seq;
dhl     pr->ack=ack;
dhl     pr->flags=flags;
dhl     pr->len=len;
dhl     rec_no++;   
dhl }
dhl /**********************************************************************************
dhl * Show Frame, return 1  if data available
dhl **********************************************************************************/
dhl uchar show_frame(uint no){
dhl     uchar flags;
dhl     xdata REC_FRAME *pr;
dhl     if(no>=rec_no) return 0;
dhl     pr=rec_frame+no;
dhl     printf("No:%u '%c' P:%u  S:%lu    A:%lu    ",no+1, pr->typ, pr->port,  pr->seq, pr->ack);
dhl     flags=pr->flags;
dhl     if(flags & TFIN) printf("FIN ");
dhl     if(flags & TSYN) printf("SYN ");
dhl     if(flags & TRST) printf("RST ");
dhl     if(flags & TACK) printf("ACK ");
dhl 
dhl     printf("   L:%u\n",pr->len);
dhl     return 1;   // OK!
dhl }
dhl 
dhl 
dhl 
dhl #endif
dhl 
dhl 
dhl 
dhl /**********************************************************************************
dhl * xdata uchar* allocate_tx_buf(void);
dhl *
dhl * Find a free buffer, if one found, allocate it and return startadress,
dhl * return 0 if none available!
dhl **********************************************************************************/
dhl xdata uchar* allocate_tx_buf(void){
dco @3:0 u:2  mov R4,#((_tx_buffers)>>8)&255
dco @3:2 u:2  mov R5,#(_tx_buffers)&255
dtx  ; variable 'pbuf' assigned to register 'RW45'
dhl  uchar ui;
dhl  xdata uchar *pbuf=&tx_buffers[0][0];
dhl 
dhl  if(tx_bufleft) for(ui=0;ui<TX_BUFFERS;ui++,pbuf+=(MAX_TX+1)){
dco @3:4 u:3  mov DPTR,#_tx_bufleft
dco @3:7 u:1  movx A,@DPTR
dco @3:8 u:1  mov R7,A
dco @3:9 u:2  jz ?15
dtx 
dco @3:b u:1  clr A
dco @3:c u:1  mov R3,A
dtx  ; variable 'ui' assigned to register 'R3'
dtx ?17:
dtx 
dco @3:d u:3  mov DPH,AR4
dco @3:10 u:3  mov DPL,AR5
dco @3:13 u:1  movx A,@DPTR
dco @3:14 u:1  mov R7,A
dco @3:15 u:2  jnz ?21
dhl   if(!(*pbuf)) {
dco @3:17 u:3  mov DPH,AR4
dco @3:1a u:3  mov DPL,AR5
dco @3:1d u:2  mov A,#1
dco @3:1f u:1  movx @DPTR,A
dhl    *pbuf=1; // Mark Buffer as allocated
dhl    tx_bufleft--;
dco @3:20 u:3  mov DPTR,#_tx_bufleft
dco @3:23 u:1  movx A,@DPTR
dco @3:24 u:1  mov R7,A
dco @3:25 u:1  dec R7
dco @3:26 u:3  mov DPTR,#_tx_bufleft
dco @3:29 u:1  mov A,R7
dco @3:2a u:1  movx @DPTR,A
dhl    return pbuf+1; // Return Startadress of buffer
dco @3:2b u:2  mov A,#1
dco @3:2d u:1  add A,R5
dco @3:2e u:1  mov R7,A
dco @3:2f u:1  clr A
dco @3:30 u:1  addc A,R4
dco @3:31 u:1  mov R6,A
dco @3:32 u:2  sjmp ?14
dtx ?21:
dhl   }
dhl  }
dco @3:34 u:1  inc R3
dco @3:35 u:2  mov A,#101
dco @3:37 u:1  add A,R5
dco @3:38 u:1  mov R5,A
dco @3:39 u:1  clr A
dco @3:3a u:1  addc A,R4
dco @3:3b u:1  mov R4,A
dtx 
dco @3:3c u:2  mov R7,#4
dco @3:3e u:1  clr C
dco @3:3f u:1  mov A,R3
dco @3:40 u:1  subb A,R7
dco @3:41 u:2  jc ?17
dtx ?15:
dhl  return 0; // Nothing found!
dco @3:43 u:1  clr A
dco @3:44 u:1  mov R6,A
dco @3:45 u:1  mov R7,A
dtx ?14:
dco @3:46 u:1  ret
dtx ; end of function allocate_tx_buf
dtx ; used: R---34567 BR-------- DPTR ACC PSW
dtx 
dtx  .export _free_tx_buf ; void free_tx_buf(xdata unsigned char *)
dtx  .segment _free_tx_buf_formal_near, size 0, fill, notext, sclass dram
dtx  .segment _free_tx_buf_local_near, size 0, fill, notext, sclass dram
dtx  .sgraph _free_tx_buf_formal_near, _free_tx_buf_local_near, __free_tx_buf
dtx 
dtx  .segment __free_tx_buf
dtx _free_tx_buf: ; (leaf function) void free_tx_buf(xdata unsigned char *)
dtx  ; parameter 'pbuf' in 'RW67'
dhl }
dhl 
dhl /**********************************************************************************
dhl * void free_tx_buf(xdata uchar* pbuf)
dhl *
dhl * Free TX-Buffer if not more required
dhl **********************************************************************************/
dhl 
dhl void free_tx_buf(xdata uchar* pbuf){
dco @6:0 u:1  mov A,R7
dco @6:1 u:1  dec R7
dco @6:2 u:2  jnz ?__1
dco @6:4 u:1  dec R6
dtx ?__1:
dtx  ; variable 'pbuf' assigned to register 'RW67'
dhl  pbuf--;   // Pointer to Pos 0(Flag)
dhl  if(*pbuf){
dco @6:5 u:3  mov DPH,AR6
dco @6:8 u:3  mov DPL,AR7
dco @6:b u:1  movx A,@DPTR
dco @6:c u:1  mov R5,A
dco @6:d u:2  jz ?24
dtx 
dco @6:f u:3  mov DPH,AR6
dco @6:12 u:3  mov DPL,AR7
dco @6:15 u:1  clr A
dco @6:16 u:1  movx @DPTR,A
dhl   *pbuf=0; // Buffer now free again... 
dhl   tx_bufleft++; // One more Buffer free...
dco @6:17 u:3  mov DPTR,#_tx_bufleft
dco @6:1a u:1  movx A,@DPTR
dco @6:1b u:1  mov R5,A
dco @6:1c u:1  inc R5
dco @6:1d u:3  mov DPTR,#_tx_bufleft
dco @6:20 u:1  mov A,R5
dco @6:21 u:1  movx @DPTR,A
dhl  }
dtx ?24:
dco @6:22 u:1  ret
dtx ; end of function free_tx_buf
dtx ; used: R----4567 BR-------- DPTR ACC PSW
dtx 
dtx  .export _free_match_socket ; void free_match_socket(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __free_match_socket
dtx _free_match_socket: ; void free_match_socket(void)
dhl }
dhl 
dhl /**********************************************************************************
dhl * void free_match_socket(void);
dhl *
dhl * Function for state transition to TCP_CLOSED for a socket, ensures freeing of the
dhl * buffers!
dhl **********************************************************************************/
dhl void free_match_socket(void){
dco @9:0 u:3  mov DPTR,#_match_socket+42
dco @9:3 u:3  lcall __ld_dptr_r67
dco @9:6 u:1  mov A,R6
dco @9:7 u:1  orl A,R7
dco @9:8 u:2  jz ?28
dhl  if(match_socket.buf_outsize1){
dco @9:a u:3  mov DPTR,#_match_socket+42
dco @9:d u:1  clr A
dco @9:e u:1  movx @DPTR,A
dco @9:f u:1  inc DPTR
dco @9:10 u:1  movx @DPTR,A
dhl   match_socket.buf_outsize1=0;
dhl   free_tx_buf(match_socket.p_outbuf1);   
dco @9:11 u:3  mov DPTR,#_match_socket+48
dco @9:14 u:3  lcall __ld_dptr_r67
dco @9:17 u:3  lcall _free_tx_buf
dhl  }
dtx ?28:
dhl  if(match_socket.buf_outsize2){
dco @9:1a u:3  mov DPTR,#_match_socket+34
dco @9:1d u:3  lcall __ld_dptr_r67
dco @9:20 u:1  mov A,R6
dco @9:21 u:1  orl A,R7
dco @9:22 u:2  jz ?30
dtx 
dco @9:24 u:3  mov DPTR,#_match_socket+34
dco @9:27 u:1  clr A
dco @9:28 u:1  movx @DPTR,A
dco @9:29 u:1  inc DPTR
dco @9:2a u:1  movx @DPTR,A
dhl   match_socket.buf_outsize2=0;
dhl   free_tx_buf(match_socket.p_outbuf2);   
dco @9:2b u:3  mov DPTR,#_match_socket+40
dco @9:2e u:3  lcall __ld_dptr_r67
dco @9:31 u:3  lcall _free_tx_buf
dhl  }
dtx ?30:
dhl  if(match_socket.buf_outsize3){
dco @9:34 u:3  mov DPTR,#_match_socket+26
dco @9:37 u:3  lcall __ld_dptr_r67
dco @9:3a u:1  mov A,R6
dco @9:3b u:1  orl A,R7
dco @9:3c u:2  jz ?32
dtx 
dco @9:3e u:3  mov DPTR,#_match_socket+26
dco @9:41 u:1  clr A
dco @9:42 u:1  movx @DPTR,A
dco @9:43 u:1  inc DPTR
dco @9:44 u:1  movx @DPTR,A
dhl   match_socket.buf_outsize3=0;
dhl   free_tx_buf(match_socket.p_outbuf3);   
dco @9:45 u:3  mov DPTR,#_match_socket+32
dco @9:48 u:3  lcall __ld_dptr_r67
dco @9:4b u:3  lcall _free_tx_buf
dhl  }
dtx ?32:
dco @9:4e u:1  ret
dtx ; end of function free_match_socket
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .export _send_request_ARP ; void send_request_ARP(unsigned long)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_request_ARP
dtx _send_request_ARP: ; void send_request_ARP(unsigned long)
dtx  ; parameter 'ipl' in 'RL4567' moved and assigned to local '?send_request_ARP_ipl'
dco @11:0 u:2  mov A,#?send_request_ARP_ipl
dco @11:2 u:3  lcall __st_a_r47
dhl }
dhl 
dhl #ifdef PHY_ETH
dhl #if defined(USE_TCP_CLIENT) || defined(USE_UDP_CLIENT)
dhl /**********************************************************************************
dhl * void send_request_ARP for a specific Internet
dhl * 
dhl * Send an ARP Request for a specific MAC
dhl **********************************************************************************/
dhl void send_request_ARP(unsigned long ipl){
dco @11:5 u:2  mov R6,#0
dco @11:7 u:2  mov R7,#42
dco @11:9 u:3  lcall _RequestSend_Phy
dhl  // puts("<ARP QUERRY>"); // Inform us...
dhl 
dhl  RequestSend_Phy(42);    // Send Reply
dhl 
dhl  Write_Frame_long_Phy(0xFFFFFFFF);  // To Broadcast
dco @11:c u:2  mov R4,#255
dco @11:e u:2  mov R5,#255
dco @11:10 u:2  mov R6,#255
dco @11:12 u:2  mov R7,#255
dco @11:14 u:3  lcall _Write_Frame_long_Phy
dhl  Write_Frame_word_Phy(0xFFFF);    // To Broadcast
dco @11:17 u:2  mov R6,#255
dco @11:19 u:2  mov R7,#255
dco @11:1b u:3  lcall _Write_Frame_word_Phy
dhl 
dhl  Write_Frame_xdata_Phy(my_mac,6);   // From US (MAC)
dco @11:1e u:2  mov R4,#0
dco @11:20 u:2  mov R5,#6
dco @11:22 u:2  mov R6,#((_my_mac)>>8)&255
dco @11:24 u:2  mov R7,#(_my_mac)&255
dco @11:26 u:3  lcall _Write_Frame_xdata_Phy
dhl 
dhl  Write_Frame_word_Phy(0x0806);   // ARP!
dco @11:29 u:2  mov R6,#8
dco @11:2b u:2  mov R7,#6
dco @11:2d u:3  lcall _Write_Frame_word_Phy
dhl 
dhl  Write_Frame_long_Phy(0x10800);   // Ethernet
dco @11:30 u:2  mov R4,#0
dco @11:32 u:2  mov R5,#1
dco @11:34 u:2  mov R6,#8
dco @11:36 u:2  mov R7,#0
dco @11:38 u:3  lcall _Write_Frame_long_Phy
dhl  Write_Frame_long_Phy(0x6040001);  // Request
dco @11:3b u:2  mov R4,#6
dco @11:3d u:2  mov R5,#4
dco @11:3f u:2  mov R6,#0
dco @11:41 u:2  mov R7,#1
dco @11:43 u:3  lcall _Write_Frame_long_Phy
dhl 
dhl  Write_Frame_xdata_Phy(my_mac,6);   // From US (MAC)
dco @11:46 u:2  mov R4,#0
dco @11:48 u:2  mov R5,#6
dco @11:4a u:2  mov R6,#((_my_mac)>>8)&255
dco @11:4c u:2  mov R7,#(_my_mac)&255
dco @11:4e u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_long_Phy(my_ip.ipl);  // and IP!
dco @11:51 u:3  mov DPTR,#_my_ip
dco @11:54 u:3  lcall __ld_dptr_r47
dco @11:57 u:3  lcall _Write_Frame_long_Phy
dhl 
dhl  // Variable filled out by Host
dhl  Write_Frame_long_Phy(0xFFFFFFFF);  // To Broadcast
dco @11:5a u:2  mov R4,#255
dco @11:5c u:2  mov R5,#255
dco @11:5e u:2  mov R6,#255
dco @11:60 u:2  mov R7,#255
dco @11:62 u:3  lcall _Write_Frame_long_Phy
dhl  Write_Frame_word_Phy(0xFFFF);    // To Broadcast
dco @11:65 u:2  mov R6,#255
dco @11:67 u:2  mov R7,#255
dco @11:69 u:3  lcall _Write_Frame_word_Phy
dhl 
dhl  // If Our Mask and Destin. Mask differs in the significant netbits, querry MAC of Gateway
dhl  if((ipl^my_ip.ipl)&subnet_ip.ipl) {
dco @11:6c u:3  mov DPTR,#_my_ip
dco @11:6f u:3  lcall __ld_dptr_r03
dco @11:72 u:2  mov A,#?send_request_ARP_ipl
dco @11:74 u:3  lcall __ld_a_r47
dco @11:77 u:3  lcall __bxor_i4
dco @11:7a u:3  mov DPTR,#_subnet_ip
dco @11:7d u:3  lcall __ld_dptr_r03
dco @11:80 u:3  lcall __band_i4
dco @11:83 u:1  mov A,R4
dco @11:84 u:1  orl A,R5
dco @11:85 u:1  orl A,R6
dco @11:86 u:1  orl A,R7
dco @11:87 u:2  jz ?35
dtx 
dco @11:89 u:3  mov DPTR,#_gateway_ip
dco @11:8c u:3  lcall __ld_dptr_r47
dco @11:8f u:3  lcall _Write_Frame_long_Phy
dhl   Write_Frame_long_Phy(gateway_ip.ipl); // and IP! (far connection over gatewy)
dhl  }else{
dco @11:92 u:2  sjmp ?36
dtx ?35:
dtx 
dco @11:94 u:2  mov A,#?send_request_ARP_ipl
dco @11:96 u:3  lcall __ld_a_r47
dco @11:99 u:3  lcall _Write_Frame_long_Phy
dhl   Write_Frame_long_Phy(ipl);   // and IP! (local connection)
dhl  }
dtx ?36:
dhl  CommitSend_Phy();      // Start TX
dco @11:9c u:3  lcall _CommitSend_Phy
dco @11:9f u:1  ret
dtx ; end of function send_request_ARP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:4 bytes
dtx 
dtx  .export _process_ARP ; unsigned int process_ARP(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __process_ARP
dtx _process_ARP: ; unsigned int process_ARP(void)
dhl }
dhl #endif
dhl 
dhl /**********************************************************************************
dhl * void process_ARP(void){
dhl * 
dhl * 2.nd-Level-Multiplexer
dhl * process an ARP request or (not implemented until now) an ARP reply
dhl **********************************************************************************/
dhl uint process_ARP(void){
dco @19:0 u:2  mov R4,#0
dco @19:2 u:2  mov R5,#1
dco @19:4 u:2  mov R6,#8
dco @19:6 u:2  mov R7,#0
dco @19:8 u:3  lcall _net_match_ulong
dco @19:b u:1  mov A,R7
dco @19:c u:2  jz ?38
dhl #if defined(USE_TCP_CLIENT) || defined(USE_UDP_CLIENT)
dhl      xdata UC_SOCKET *psock;
dhl      uchar ui;
dhl #endif
dhl 
dhl  uint type;
dhl  if(net_match_ulong(0x10800)) return EVENT_ARP_UNKNOWN; // No ARP!
dco @19:e u:2  mov R6,#162
dco @19:10 u:2  mov R7,#0
dco @19:12 u:3  ljmp ?37
dtx ?38:
dhl  if(net_match_uint(0x604)) return EVENT_ARP_UNKNOWN; // No ARP!
dco @19:15 u:2  mov R6,#6
dco @19:17 u:2  mov R7,#4
dco @19:19 u:3  lcall _net_match_uint
dco @19:1c u:1  mov A,R7
dco @19:1d u:2  jz ?40
dtx 
dco @19:1f u:2  mov R6,#162
dco @19:21 u:2  mov R7,#0
dco @19:23 u:3  ljmp ?37
dtx ?40:
dhl  type=Read_Frame_word_Phy();  
dco @19:26 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'type' allocated as 'auto'
dco @19:29 u:2  mov ?process_ARP_type,R6
dco @19:2b u:2  mov ?process_ARP_type+1,R7
dhl //    sevseg_data1=type&0xff;
dhl //    sevseg_data0=type>>8;
dhl  Read_Frame_xdata_Phy(hframe.bytes,20); // Read informative part of ARP message
dco @19:2d u:2  mov R4,#0
dco @19:2f u:2  mov R5,#20
dco @19:31 u:2  mov R6,#((_hframe)>>8)&255
dco @19:33 u:2  mov R7,#(_hframe)&255
dco @19:35 u:3  lcall _Read_Frame_xdata_Phy
dhl  if(type>2) return EVENT_ARP_NOTYPE; // Unknown Reply
dco @19:38 u:2  mov R4,#0
dco @19:3a u:2  mov R5,#2
dco @19:3c u:2  mov R6,?process_ARP_type
dco @19:3e u:2  mov R7,?process_ARP_type+1
dco @19:40 u:1  setb C
dco @19:41 u:1  mov A,R7
dco @19:42 u:1  subb A,R5
dco @19:43 u:1  mov A,R6
dco @19:44 u:1  subb A,R4
dco @19:45 u:2  jc ?42
dtx 
dco @19:47 u:2  mov R6,#163
dco @19:49 u:2  mov R7,#0
dco @19:4b u:3  ljmp ?37
dtx ?42:
dhl 
dhl  if(type==1){ // ARP Request!
dco @19:4e u:2  mov R6,?process_ARP_type
dco @19:50 u:2  mov R7,?process_ARP_type+1
dco @19:52 u:1  mov A,R7
dco @19:53 u:2  xrl A,#1
dco @19:55 u:1  orl A,R6
dco @19:56 u:2  jz ?_12
dco @19:58 u:3  ljmp ?44
dtx ?_12:
dtx 
dco @19:5b u:3  mov DPTR,#_my_ip
dco @19:5e u:3  lcall __ld_dptr_r03
dco @19:61 u:3  mov DPTR,#_hframe+16
dco @19:64 u:3  lcall __ld_dptr_r47
dco @19:67 u:1  clr C
dco @19:68 u:3  lcall __cmp_i4
dco @19:6b u:2  jz ?46
dhl   if(hframe.arp_info.target_ip.ipl!=my_ip.ipl) return EVENT_ARP_OTHER; // ARP, but not for us...
dco @19:6d u:2  mov R6,#164
dco @19:6f u:2  mov R7,#0
dco @19:71 u:3  ljmp ?37
dtx ?46:
dhl  
dhl   // puts("<ARP request>"); // Inform us...
dhl   RequestSend_Phy(42);   // Send Reply
dco @19:74 u:2  mov R6,#0
dco @19:76 u:2  mov R7,#42
dco @19:78 u:3  lcall _RequestSend_Phy
dhl 
dhl   Write_Frame_xdata_Phy(remote_mac,6);  // Kick packet back...
dco @19:7b u:2  mov R4,#0
dco @19:7d u:2  mov R5,#6
dco @19:7f u:2  mov R6,#((_remote_mac)>>8)&255
dco @19:81 u:2  mov R7,#(_remote_mac)&255
dco @19:83 u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_xdata_Phy(my_mac,6);  // From US (MAC)
dco @19:86 u:2  mov R4,#0
dco @19:88 u:2  mov R5,#6
dco @19:8a u:2  mov R6,#((_my_mac)>>8)&255
dco @19:8c u:2  mov R7,#(_my_mac)&255
dco @19:8e u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_word_Phy(0x0806);  // ARP!
dco @19:91 u:2  mov R6,#8
dco @19:93 u:2  mov R7,#6
dco @19:95 u:3  lcall _Write_Frame_word_Phy
dhl 
dhl   Write_Frame_long_Phy(0x10800);
dco @19:98 u:2  mov R4,#0
dco @19:9a u:2  mov R5,#1
dco @19:9c u:2  mov R6,#8
dco @19:9e u:2  mov R7,#0
dco @19:a0 u:3  lcall _Write_Frame_long_Phy
dhl   Write_Frame_long_Phy(0x6040002); // Response
dco @19:a3 u:2  mov R4,#6
dco @19:a5 u:2  mov R5,#4
dco @19:a7 u:2  mov R6,#0
dco @19:a9 u:2  mov R7,#2
dco @19:ab u:3  lcall _Write_Frame_long_Phy
dhl 
dhl   Write_Frame_xdata_Phy(my_mac,6);  // From US (MAC)
dco @19:ae u:2  mov R4,#0
dco @19:b0 u:2  mov R5,#6
dco @19:b2 u:2  mov R6,#((_my_mac)>>8)&255
dco @19:b4 u:2  mov R7,#(_my_mac)&255
dco @19:b6 u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_long_Phy(my_ip.ipl); // and IP!
dco @19:b9 u:3  mov DPTR,#_my_ip
dco @19:bc u:3  lcall __ld_dptr_r47
dco @19:bf u:3  lcall _Write_Frame_long_Phy
dhl   Write_Frame_xdata_Phy(hframe.bytes,10);  // Kick half packet back...
dco @19:c2 u:2  mov R4,#0
dco @19:c4 u:2  mov R5,#10
dco @19:c6 u:2  mov R6,#((_hframe)>>8)&255
dco @19:c8 u:2  mov R7,#(_hframe)&255
dco @19:ca u:3  lcall _Write_Frame_xdata_Phy
dhl   CommitSend_Phy();     // Start TX
dco @19:cd u:3  lcall _CommitSend_Phy
dhl 
dhl   return EVENT_ARP_REQUEST;    // No Event of interest, but an EVENT
dco @19:d0 u:2  mov R6,#160
dco @19:d2 u:2  mov R7,#0
dco @19:d4 u:3  ljmp ?37
dtx ?44:
dtx  ; variable 'psock' allocated as 'auto'
dhl 
dhl  }else{ // Arp response! For us?
dco @19:d7 u:3  mov ?process_ARP_psock,#((_uc_socket)>>8)&255
dco @19:da u:3  mov ?process_ARP_psock+1,#(_uc_socket)&255
dtx  ; variable 'ui' allocated as 'auto'
dhl #if defined(USE_TCP_CLIENT) || defined(USE_UDP_CLIENT)
dhl  
dhl  //puts("<ARP response>");   
dhl   // Will work with all non-0 type sockets!
dhl       psock=uc_socket;
dhl       for(ui=0;ui<MAX_SOCK;ui++,psock++){
dco @19:dd u:1  clr A
dco @19:de u:2  mov ?process_ARP_ui,A
dtx ?48:
dtx 
dco @19:e0 u:3  mov DPH,?process_ARP_psock
dco @19:e3 u:3  mov DPL,?process_ARP_psock+1
dco @19:e6 u:1  movx A,@DPTR
dco @19:e7 u:1  mov R7,A
dco @19:e8 u:2  jnz ?_14
dco @19:ea u:3  ljmp ?52
dtx ?_14:
dco @19:ed u:2  mov R6,?process_ARP_psock
dco @19:ef u:2  mov R7,?process_ARP_psock+1
dco @19:f1 u:1  inc R7
dco @19:f2 u:1  mov A,R7
dco @19:f3 u:2  jnz ?__2
dco @19:f5 u:1  inc R6
dtx ?__2:
dco @19:f6 u:3  mov DPH,AR6
dco @19:f9 u:3  mov DPL,AR7
dco @19:fc u:1  movx A,@DPTR
dco @19:fd u:1  mov R7,A
dco @19:fe u:3  cjne R7,#6,?_15
dco @19:101 u:2  sjmp ?_16
dtx ?_15:
dco @19:103 u:3  ljmp ?52
dtx ?_16:
dhl           if(psock->socket_type && psock->state==ARPSENT){
dco @19:106 u:2  mov R6,?process_ARP_psock
dco @19:108 u:2  mov R7,?process_ARP_psock+1
dco @19:10a u:2  mov A,#8
dco @19:10c u:1  add A,R7
dco @19:10d u:1  mov R7,A
dco @19:10e u:1  clr A
dco @19:10f u:1  addc A,R6
dco @19:110 u:1  mov R6,A
dco @19:111 u:2  mov DPH,R6
dco @19:113 u:2  mov DPL,R7
dco @19:115 u:3  lcall __ld_dptr_r47
dco @19:118 u:3  lcall __movel_4_8
dco @19:11b u:3  mov DPTR,#_hframe+6
dco @19:11e u:3  lcall __ld_dptr_r03
dco @19:121 u:3  lcall __movel_8_4
dco @19:124 u:1  clr C
dco @19:125 u:3  lcall __cmp_i4
dco @19:128 u:2  jz ?56
dco @19:12a u:3  mov DPTR,#_my_ip
dco @19:12d u:3  lcall __ld_dptr_r03
dco @19:130 u:3  lcall __movel_8_4
dco @19:133 u:3  lcall __bxor_i4
dco @19:136 u:3  mov DPTR,#_subnet_ip
dco @19:139 u:3  lcall __ld_dptr_r03
dco @19:13c u:3  lcall __band_i4
dco @19:13f u:1  mov A,R4
dco @19:140 u:1  orl A,R5
dco @19:141 u:1  orl A,R6
dco @19:142 u:1  orl A,R7
dco @19:143 u:2  jnz ?_18
dco @19:145 u:3  ljmp ?54
dtx ?_18:
dco @19:148 u:3  mov DPTR,#_gateway_ip
dco @19:14b u:3  lcall __ld_dptr_r03
dco @19:14e u:3  mov DPTR,#_hframe+6
dco @19:151 u:3  lcall __ld_dptr_r47
dco @19:154 u:1  clr C
dco @19:155 u:3  lcall __cmp_i4
dco @19:158 u:2  jz ?_19
dco @19:15a u:3  ljmp ?54
dtx ?_19:
dtx ?56:
dhl     // Only ARP-Sockets are of interest if an offered ip is matched
dhl     if((psock->sremote_ip==hframe.arp_info.sender_ip.ipl) || // Either direct IP match
dhl      // Or Response is from Gateway, if subnets differ
dhl        ((  (psock->sremote_ip ^ my_ip.ipl) & subnet_ip.ipl  )&&(hframe.arp_info.sender_ip.ipl==gateway
dco @19:15d u:2  mov R2,#0
dco @19:15f u:2  mov R3,#6
dco @19:161 u:2  mov R6,?process_ARP_psock
dco @19:163 u:2  mov R7,?process_ARP_psock+1
dco @19:165 u:2  mov A,#2
dco @19:167 u:1  add A,R7
dco @19:168 u:1  mov R5,A
dco @19:169 u:1  clr A
dco @19:16a u:1  addc A,R6
dco @19:16b u:1  mov R4,A
dco @19:16c u:2  mov R6,#((_hframe)>>8)&255
dco @19:16e u:2  mov R7,#(_hframe)&255
dco @19:170 u:3  lcall _xram_fast_copy
dhl 
dhl      // Copy MAC
dhl      xram_fast_copy(hframe.arp_info.sender_mac,psock->sremote_mac,6);
dhl      psock->state=ARPREC;       // After ARP was received, UDP connection is established, TCP may star
dco @19:173 u:2  mov R6,?process_ARP_psock
dco @19:175 u:2  mov R7,?process_ARP_psock+1
dco @19:177 u:1  inc R7
dco @19:178 u:1  mov A,R7
dco @19:179 u:2  jnz ?__3
dco @19:17b u:1  inc R6
dtx ?__3:
dco @19:17c u:3  mov DPH,AR6
dco @19:17f u:3  mov DPL,AR7
dco @19:182 u:2  mov A,#7
dco @19:184 u:1  movx @DPTR,A
dhl      psock->retry_cnt=0;
dco @19:185 u:2  mov R6,?process_ARP_psock
dco @19:187 u:2  mov R7,?process_ARP_psock+1
dco @19:189 u:2  mov A,#24
dco @19:18b u:1  add A,R7
dco @19:18c u:1  mov R7,A
dco @19:18d u:1  clr A
dco @19:18e u:1  addc A,R6
dco @19:18f u:1  mov R6,A
dco @19:190 u:3  mov DPH,AR6
dco @19:193 u:3  mov DPL,AR7
dco @19:196 u:1  clr A
dco @19:197 u:1  movx @DPTR,A
dhl      psock->timer=1;  // Start NOW!
dco @19:198 u:2  mov R6,?process_ARP_psock
dco @19:19a u:2  mov R7,?process_ARP_psock+1
dco @19:19c u:2  mov A,#25
dco @19:19e u:1  add A,R7
dco @19:19f u:1  mov R7,A
dco @19:1a0 u:1  clr A
dco @19:1a1 u:1  addc A,R6
dco @19:1a2 u:1  mov R6,A
dco @19:1a3 u:3  mov DPH,AR6
dco @19:1a6 u:3  mov DPL,AR7
dco @19:1a9 u:2  mov A,#1
dco @19:1ab u:1  movx @DPTR,A
dhl 
dhl      return EVENT_ARP_OURREPLY;
dco @19:1ac u:2  mov R6,#165
dco @19:1ae u:2  mov R7,#0
dco @19:1b0 u:2  sjmp ?37
dtx ?54:
dhl     
dhl     }
dhl    }  
dtx ?52:
dhl   }
dco @19:1b2 u:2  inc ?process_ARP_ui
dco @19:1b4 u:2  mov A,#50
dco @19:1b6 u:2  add A,?process_ARP_psock+1
dco @19:1b8 u:2  mov ?process_ARP_psock+1,A
dco @19:1ba u:1  clr A
dco @19:1bb u:2  addc A,?process_ARP_psock
dco @19:1bd u:2  mov ?process_ARP_psock,A
dtx 
dco @19:1bf u:2  mov R5,#2
dco @19:1c1 u:2  mov R7,?process_ARP_ui
dco @19:1c3 u:1  clr C
dco @19:1c4 u:1  mov A,R7
dco @19:1c5 u:1  subb A,R5
dco @19:1c6 u:2  jnc ?_20
dco @19:1c8 u:3  ljmp ?48
dtx ?_20:
dhl #endif
dhl   return EVENT_ARP_OTHERREPLY;
dco @19:1cb u:2  mov R6,#161
dco @19:1cd u:2  mov R7,#0
dtx ?37:
dco @19:1cf u:1  ret
dtx ; end of function process_ARP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:3 bytes
dtx 
dtx  .export _process_ICMP ; unsigned int process_ICMP(unsigned int)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __process_ICMP
dtx _process_ICMP: ; unsigned int process_ICMP(unsigned int)
dtx  ; parameter 'dlen' in 'RW67' moved and assigned to local '?process_ICMP_dlen'
dco @1d:0 u:2  mov ?process_ICMP_dlen,R6
dco @1d:2 u:2  mov ?process_ICMP_dlen+1,R7
dhl  }
dhl }
dhl #endif // PHY_ETH
dhl 
dhl /**********************************************************************************
dhl * void process_ICMP(uint dlen)
dhl *
dhl * 2.nd-Level-Multiplexer
dhl * received an ICMp frame ('PING') 
dhl **********************************************************************************/
dhl uint process_ICMP(uint dlen){
dco @1d:4 u:2  mov R4,#0
dco @1d:6 u:2  mov R5,#20
dco @1d:8 u:2  mov R6,?process_ICMP_dlen
dco @1d:a u:2  mov R7,?process_ICMP_dlen+1
dco @1d:c u:1  setb C
dco @1d:d u:1  mov A,R7
dco @1d:e u:1  subb A,R5
dco @1d:f u:1  mov A,R6
dco @1d:10 u:1  subb A,R4
dco @1d:11 u:2  jc ?58
dhl  //  MICROCHIP SAYS IT IS SAVE TO TRUNCATE ICMPs, so truncate...
dhl  if(dlen>sizeof(HFRAME)) dlen=sizeof(HFRAME);  // Truncate too long Pings!
dco @1d:13 u:3  mov ?process_ICMP_dlen,#0
dco @1d:16 u:3  mov ?process_ICMP_dlen+1,#20
dtx ?58:
dhl 
dhl  Read_Frame_xdata_Phy(hframe.bytes,dlen); // Read Sender's Data
dco @1d:19 u:2  mov R4,?process_ICMP_dlen
dco @1d:1b u:2  mov R5,?process_ICMP_dlen+1
dco @1d:1d u:2  mov R6,#((_hframe)>>8)&255
dco @1d:1f u:2  mov R7,#(_hframe)&255
dco @1d:21 u:3  lcall _Read_Frame_xdata_Phy
dhl  if(hframe.ping_info.type==0){
dco @1d:24 u:3  mov DPTR,#_hframe
dco @1d:27 u:1  movx A,@DPTR
dco @1d:28 u:1  mov R7,A
dco @1d:29 u:2  jnz ?60
dtx 
dco @1d:2b u:2  mov R6,#176
dco @1d:2d u:2  mov R7,#0
dco @1d:2f u:3  ljmp ?57
dtx ?60:
dhl   // *** NOT REQUIRED FOR SERVER MODE! ***
dhl   // puts("<ECHO REPLY ???>");
dhl   return EVENT_ICMP_REPLY;
dhl 
dhl  }else if(hframe.ping_info.type==8){
dco @1d:32 u:3  mov DPTR,#_hframe
dco @1d:35 u:1  movx A,@DPTR
dco @1d:36 u:1  mov R7,A
dco @1d:37 u:3  cjne R7,#8,?_23
dco @1d:3a u:2  sjmp ?_24
dtx ?_23:
dco @1d:3c u:3  ljmp ?62
dtx ?_24:
dtx 
dco @1d:3f u:3  mov DPTR,#_hframe
dco @1d:42 u:1  clr A
dco @1d:43 u:1  movx @DPTR,A
dhl 
dhl   //puts("<ICMP ECHO REQUEST>"); // For debugging...
dhl 
dhl   // Reflect block as reply
dhl   hframe.ping_info.type=0;
dhl   hframe.ping_info.checksum=0; 
dco @1d:44 u:3  mov DPTR,#_hframe+2
dco @1d:47 u:1  clr A
dco @1d:48 u:1  movx @DPTR,A
dco @1d:49 u:1  inc DPTR
dco @1d:4a u:1  movx @DPTR,A
dhl   hframe.ping_info.checksum=~ip_check(hframe.bytes,dlen);
dco @1d:4b u:2  mov R4,?process_ICMP_dlen
dco @1d:4d u:2  mov R5,?process_ICMP_dlen+1
dco @1d:4f u:2  mov R6,#((_hframe)>>8)&255
dco @1d:51 u:2  mov R7,#(_hframe)&255
dco @1d:53 u:3  lcall _ip_check
dco @1d:56 u:1  mov A,R7
dco @1d:57 u:1  cpl A
dco @1d:58 u:1  mov R7,A
dco @1d:59 u:1  mov A,R6
dco @1d:5a u:1  cpl A
dco @1d:5b u:1  mov R6,A
dco @1d:5c u:3  mov DPTR,#_hframe+2
dco @1d:5f u:3  lcall __st_dptr_r67
dhl 
dhl   // Now, send out reply
dhl   hhdr.vhl_service=0x4500;
dco @1d:62 u:3  mov DPTR,#_hhdr
dco @1d:65 u:2  mov A,#69
dco @1d:67 u:1  movx @DPTR,A
dco @1d:68 u:1  inc DPTR
dco @1d:69 u:1  clr A
dco @1d:6a u:1  movx @DPTR,A
dhl   hhdr.len=sizeof(IP_HDR)+dlen;
dco @1d:6b u:2  mov R6,?process_ICMP_dlen
dco @1d:6d u:2  mov R7,?process_ICMP_dlen+1
dco @1d:6f u:2  mov A,#20
dco @1d:71 u:1  add A,R7
dco @1d:72 u:1  mov R7,A
dco @1d:73 u:1  clr A
dco @1d:74 u:1  addc A,R6
dco @1d:75 u:1  mov R6,A
dco @1d:76 u:3  mov DPTR,#_hhdr+2
dco @1d:79 u:3  lcall __st_dptr_r67
dhl   hhdr.ident=0;
dco @1d:7c u:3  mov DPTR,#_hhdr+4
dco @1d:7f u:1  clr A
dco @1d:80 u:1  movx @DPTR,A
dco @1d:81 u:1  inc DPTR
dco @1d:82 u:1  movx @DPTR,A
dhl   hhdr.frags=16384; // No Fragmentation
dco @1d:83 u:3  mov DPTR,#_hhdr+6
dco @1d:86 u:2  mov A,#64
dco @1d:88 u:1  movx @DPTR,A
dco @1d:89 u:1  inc DPTR
dco @1d:8a u:1  clr A
dco @1d:8b u:1  movx @DPTR,A
dhl   hhdr.ttl=100; // Industrial standard
dco @1d:8c u:3  mov DPTR,#_hhdr+8
dco @1d:8f u:2  mov A,#100
dco @1d:91 u:1  movx @DPTR,A
dhl   hhdr.pcol=1; // ICMP
dco @1d:92 u:3  mov DPTR,#_hhdr+9
dco @1d:95 u:2  mov A,#1
dco @1d:97 u:1  movx @DPTR,A
dhl   hhdr.checksum=0;
dco @1d:98 u:3  mov DPTR,#_hhdr+10
dco @1d:9b u:1  clr A
dco @1d:9c u:1  movx @DPTR,A
dco @1d:9d u:1  inc DPTR
dco @1d:9e u:1  movx @DPTR,A
dhl   hhdr.sip.ipl=my_ip.ipl;
dco @1d:9f u:3  mov DPTR,#_my_ip
dco @1d:a2 u:3  lcall __ld_dptr_r47
dco @1d:a5 u:3  mov DPTR,#_hhdr+12
dco @1d:a8 u:3  lcall __st_dptr_r47
dhl   hhdr.dip.ipl=remote_ip.ipl;
dco @1d:ab u:3  mov DPTR,#_remote_ip
dco @1d:ae u:3  lcall __ld_dptr_r47
dco @1d:b1 u:3  mov DPTR,#_hhdr+16
dco @1d:b4 u:3  lcall __st_dptr_r47
dhl   hhdr.checksum=~ip_check((xdata uchar*)&hhdr,sizeof(IP_HDR));
dco @1d:b7 u:2  mov R4,#0
dco @1d:b9 u:2  mov R5,#20
dco @1d:bb u:2  mov R6,#((_hhdr)>>8)&255
dco @1d:bd u:2  mov R7,#(_hhdr)&255
dco @1d:bf u:3  lcall _ip_check
dco @1d:c2 u:1  mov A,R7
dco @1d:c3 u:1  cpl A
dco @1d:c4 u:1  mov R7,A
dco @1d:c5 u:1  mov A,R6
dco @1d:c6 u:1  cpl A
dco @1d:c7 u:1  mov R6,A
dco @1d:c8 u:3  mov DPTR,#_hhdr+10
dco @1d:cb u:3  lcall __st_dptr_r67
dhl 
dhl #ifdef PHY_ETH
dhl   RequestSend_Phy(dlen+sizeof(IP_HDR)+14); // Send Reply
dco @1d:ce u:2  mov R6,?process_ICMP_dlen
dco @1d:d0 u:2  mov R7,?process_ICMP_dlen+1
dco @1d:d2 u:2  mov A,#34
dco @1d:d4 u:1  add A,R7
dco @1d:d5 u:1  mov R7,A
dco @1d:d6 u:1  clr A
dco @1d:d7 u:1  addc A,R6
dco @1d:d8 u:1  mov R6,A
dco @1d:d9 u:3  lcall _RequestSend_Phy
dhl   Write_Frame_xdata_Phy(remote_mac,6);  // Kick back...
dco @1d:dc u:2  mov R4,#0
dco @1d:de u:2  mov R5,#6
dco @1d:e0 u:2  mov R6,#((_remote_mac)>>8)&255
dco @1d:e2 u:2  mov R7,#(_remote_mac)&255
dco @1d:e4 u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_xdata_Phy(my_mac,6);  // From US (MAC)
dco @1d:e7 u:2  mov R4,#0
dco @1d:e9 u:2  mov R5,#6
dco @1d:eb u:2  mov R6,#((_my_mac)>>8)&255
dco @1d:ed u:2  mov R7,#(_my_mac)&255
dco @1d:ef u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_word_Phy(0x800);  // type IP
dco @1d:f2 u:2  mov R6,#8
dco @1d:f4 u:2  mov R7,#0
dco @1d:f6 u:3  lcall _Write_Frame_word_Phy
dhl #else
dhl   RequestSend_Phy(dlen+sizeof(IP_HDR)); // Send Reply (PPP)
dhl #endif
dhl 
dhl   Write_Frame_xdata_Phy((xdata uchar*)&hhdr,sizeof(IP_HDR));  // Send Header
dco @1d:f9 u:2  mov R4,#0
dco @1d:fb u:2  mov R5,#20
dco @1d:fd u:2  mov R6,#((_hhdr)>>8)&255
dco @1d:ff u:2  mov R7,#(_hhdr)&255
dco @1d:101 u:3  lcall _Write_Frame_xdata_Phy
dhl   Write_Frame_xdata_Phy(hframe.bytes,dlen);  // and echo
dco @1d:104 u:2  mov R4,?process_ICMP_dlen
dco @1d:106 u:2  mov R5,?process_ICMP_dlen+1
dco @1d:108 u:2  mov R6,#((_hframe)>>8)&255
dco @1d:10a u:2  mov R7,#(_hframe)&255
dco @1d:10c u:3  lcall _Write_Frame_xdata_Phy
dhl   // puts("<PING>\a"); // show it!
dhl   CommitSend_Phy();     // Start TX
dco @1d:10f u:3  lcall _CommitSend_Phy
dhl 
dhl   return EVENT_ICMP_REQUEST; // Someone has PINGED us!
dco @1d:112 u:2  mov R6,#177
dco @1d:114 u:2  mov R7,#0
dco @1d:116 u:2  sjmp ?57
dtx ?62:
dhl 
dhl  }else return EVENT_ICMP_UNKNOWN; // Ignore the Rest...
dco @1d:118 u:2  mov R6,#178
dco @1d:11a u:2  mov R7,#0
dtx ?57:
dco @1d:11c u:1  ret
dtx ; end of function process_ICMP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
dtx 
dtx  .export _process_UDP ; unsigned int process_UDP(unsigned int)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __process_UDP
dtx _process_UDP: ; unsigned int process_UDP(unsigned int)
dtx  ; parameter 'dlen' in 'RW67' moved and assigned to local '?process_UDP_dlen'
dco @20:0 u:2  mov ?process_UDP_dlen,R6
dco @20:2 u:2  mov ?process_UDP_dlen+1,R7
dhl }
dhl 
dhl 
dhl #ifdef USE_UDP
dhl /**********************************************************************************
dhl * void process_UDP(void)
dhl * 
dhl * 3.rd-Level-Multiplexer
dhl * Process the Header (and contents) of a UDP datagram.
dhl *
dhl * An UPD frame may arrive as broadcast, so treat is as non important first...
dhl *
dhl * Note: It is intended hframe my by used for synthesisinhg a response header...
dhl * 
dhl **********************************************************************************/
dhl uint process_UDP(uint dlen){
dco @20:4 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'udp_sport' allocated as 'auto'
dco @20:7 u:2  mov ?process_UDP_udp_sport,R6
dco @20:9 u:2  mov ?process_UDP_udp_sport+1,R7
dhl  xdata UC_SOCKET *psock;
dhl  uint ui;
dhl 
dhl  uint udp_sport, udp_dport;
dhl  udp_sport=Read_Frame_word_Phy();
dhl  udp_dport=Read_Frame_word_Phy();
dco @20:b u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'udp_dport' allocated as 'auto'
dco @20:e u:2  mov ?process_UDP_udp_dport,R6
dco @20:10 u:2  mov ?process_UDP_udp_dport+1,R7
dhl  if(net_match_uint(dlen)) {
dco @20:12 u:2  mov R6,?process_UDP_dlen
dco @20:14 u:2  mov R7,?process_UDP_dlen+1
dco @20:16 u:3  lcall _net_match_uint
dco @20:19 u:1  mov A,R7
dco @20:1a u:2  jz ?65
dtx 
dco @20:1c u:2  mov R6,#225
dco @20:1e u:2  mov R7,#0
dco @20:20 u:3  ljmp ?64
dtx ?65:
dhl   return EVENT_UDP_ERROR; // a simple check for plausibility...
dhl  }
dhl  Read_Frame_word_Phy(); // Ignore CS...
dco @20:23 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'psock' allocated as 'auto'
dhl 
dhl 
dhl      psock=uc_socket;
dco @20:26 u:3  mov ?process_UDP_psock,#((_uc_socket)>>8)&255
dco @20:29 u:3  mov ?process_UDP_psock+1,#(_uc_socket)&255
dtx  ; variable 'ui' allocated as 'auto'
dhl      for(ui=0;ui<MAX_SOCK;ui++,psock++){
dco @20:2c u:1  clr A
dco @20:2d u:2  mov ?process_UDP_ui,A
dco @20:2f u:2  mov ?process_UDP_ui+1,A
dtx ?67:
dtx 
dco @20:31 u:3  mov DPH,?process_UDP_psock
dco @20:34 u:3  mov DPL,?process_UDP_psock+1
dco @20:37 u:1  movx A,@DPTR
dco @20:38 u:1  mov R7,A
dco @20:39 u:3  cjne R7,#1,?_26
dco @20:3c u:2  sjmp ?_27
dtx ?_26:
dco @20:3e u:3  ljmp ?71
dtx ?_27:
dhl          if(psock->socket_type==SOCKET_UDP){  // Only UDP-Sockets are of interest
dco @20:41 u:2  mov R6,?process_UDP_psock
dco @20:43 u:2  mov R7,?process_UDP_psock+1
dco @20:45 u:2  mov A,#14
dco @20:47 u:1  add A,R7
dco @20:48 u:1  mov R7,A
dco @20:49 u:1  clr A
dco @20:4a u:1  addc A,R6
dco @20:4b u:1  mov R6,A
dco @20:4c u:2  mov DPH,R6
dco @20:4e u:2  mov DPL,R7
dco @20:50 u:3  lcall __ld_dptr_r45
dco @20:53 u:2  mov R6,?process_UDP_udp_dport
dco @20:55 u:2  mov R7,?process_UDP_udp_dport+1
dco @20:57 u:1  mov A,R5
dco @20:58 u:1  xrl A,R7
dco @20:59 u:2  jnz ?_28
dco @20:5b u:1  mov A,R4
dco @20:5c u:1  xrl A,R6
dco @20:5d u:2  jz ?_29
dtx ?_28:
dco @20:5f u:3  ljmp ?73
dtx ?_29:
dhl               // Test local port match
dhl                  if(psock->local_port==udp_dport){
dco @20:62 u:2  mov R6,?process_UDP_psock
dco @20:64 u:2  mov R7,?process_UDP_psock+1
dco @20:66 u:2  mov A,#12
dco @20:68 u:1  add A,R7
dco @20:69 u:1  mov R5,A
dco @20:6a u:1  clr A
dco @20:6b u:1  addc A,R6
dco @20:6c u:1  mov R4,A
dco @20:6d u:2  mov R6,?process_UDP_udp_sport
dco @20:6f u:2  mov R7,?process_UDP_udp_sport+1
dco @20:71 u:2  mov DPH,R4
dco @20:73 u:2  mov DPL,R5
dco @20:75 u:3  lcall __st_dptr_r67
dhl                         // Still missing: This should only be done for PASSIVE UDP-Ports...
dhl                         psock->sremote_port=udp_sport;  // Copy Sender's Sourceport
dhl                         psock->sremote_ip=remote_ip.ipl; // Copy Sender's IP
dco @20:78 u:2  mov R6,?process_UDP_psock
dco @20:7a u:2  mov R7,?process_UDP_psock+1
dco @20:7c u:2  mov A,#8
dco @20:7e u:1  add A,R7
dco @20:7f u:1  mov R3,A
dco @20:80 u:1  clr A
dco @20:81 u:1  addc A,R6
dco @20:82 u:1  mov R2,A
dco @20:83 u:3  mov DPTR,#_remote_ip
dco @20:86 u:3  lcall __ld_dptr_r47
dco @20:89 u:2  mov DPH,R2
dco @20:8b u:2  mov DPL,R3
dco @20:8d u:3  lcall __st_dptr_r47
dhl #ifdef PHY_ETH
dhl                         xram_fast_copy(&remote_mac[0],psock->sremote_mac,6); // Copy Sender's MAC to s
dco @20:90 u:2  mov R2,#0
dco @20:92 u:2  mov R3,#6
dco @20:94 u:2  mov R6,?process_UDP_psock
dco @20:96 u:2  mov R7,?process_UDP_psock+1
dco @20:98 u:2  mov A,#2
dco @20:9a u:1  add A,R7
dco @20:9b u:1  mov R5,A
dco @20:9c u:1  clr A
dco @20:9d u:1  addc A,R6
dco @20:9e u:1  mov R4,A
dco @20:9f u:2  mov R6,#((_remote_mac)>>8)&255
dco @20:a1 u:2  mov R7,#(_remote_mac)&255
dco @20:a3 u:3  lcall _xram_fast_copy
dtx  ; variable 'dlen' allocated as 'auto'
dhl #endif
dhl                         dlen-=8; // Subtract header length
dco @20:a6 u:2  mov A,#248
dco @20:a8 u:2  add A,?process_UDP_dlen+1
dco @20:aa u:2  mov ?i77+1,A
dco @20:ac u:2  mov A,#255
dco @20:ae u:2  addc A,?process_UDP_dlen
dco @20:b0 u:2  mov ?i77,A
dhl                         if(dlen>MAX_RX) break;   // Ignore too long frames...
dco @20:b2 u:2  mov R4,#0
dco @20:b4 u:2  mov R5,#100
dco @20:b6 u:2  mov R6,?i77
dco @20:b8 u:2  mov R7,?i77+1
dco @20:ba u:1  setb C
dco @20:bb u:1  mov A,R7
dco @20:bc u:1  subb A,R5
dco @20:bd u:1  mov A,R6
dco @20:be u:1  subb A,R4
dtx 
dco @20:bf u:2  jnc ?69
dhl #ifdef PHY_ETH
dhl                         Read_Frame_xdata_Phy(rcv_buf,dlen);  // Read Sender's Data, if any
dco @20:c1 u:2  mov R4,?i77
dco @20:c3 u:2  mov R5,?i77+1
dco @20:c5 u:2  mov R6,#((_rcv_buf)>>8)&255
dco @20:c7 u:2  mov R7,#(_rcv_buf)&255
dco @20:c9 u:3  lcall _Read_Frame_xdata_Phy
dhl #else
dhl                         rcv_buf=Get_Frame_xdata_pointer();  // Why copy, if it is already there...
dhl #endif
dhl 
dhl                         rcv_len=dlen;    // remember size of read data...
dco @20:cc u:2  mov R6,?i77
dco @20:ce u:2  mov R7,?i77+1
dco @20:d0 u:3  mov DPTR,#_rcv_len
dco @20:d3 u:3  lcall __st_dptr_r67
dhl                         return EVENT_UDP_DATARECEIVED+ui;
dco @20:d6 u:2  mov R6,?process_UDP_ui
dco @20:d8 u:2  mov R7,?process_UDP_ui+1
dco @20:da u:1  clr A
dco @20:db u:1  add A,R7
dco @20:dc u:1  mov R7,A
dco @20:dd u:2  mov A,#226
dco @20:df u:1  addc A,R6
dco @20:e0 u:1  mov R6,A
dco @20:e1 u:2  sjmp ?64
dtx ?73:
dhl                   }
dhl          }
dtx ?71:
dhl      }
dco @20:e3 u:2  inc ?process_UDP_ui+1
dco @20:e5 u:2  mov A,?process_UDP_ui+1
dco @20:e7 u:2  jnz ?_31
dco @20:e9 u:2  inc ?process_UDP_ui
dtx ?_31:
dco @20:eb u:2  mov A,#50
dco @20:ed u:2  add A,?process_UDP_psock+1
dco @20:ef u:2  mov ?process_UDP_psock+1,A
dco @20:f1 u:1  clr A
dco @20:f2 u:2  addc A,?process_UDP_psock
dco @20:f4 u:2  mov ?process_UDP_psock,A
dtx 
dco @20:f6 u:2  mov R4,#0
dco @20:f8 u:2  mov R5,#2
dco @20:fa u:2  mov R6,?process_UDP_ui
dco @20:fc u:2  mov R7,?process_UDP_ui+1
dco @20:fe u:1  clr C
dco @20:ff u:1  mov A,R7
dco @20:100 u:1  subb A,R5
dco @20:101 u:1  mov A,R6
dco @20:102 u:1  subb A,R4
dco @20:103 u:2  jnc ?_32
dco @20:105 u:3  ljmp ?67
dtx ?_32:
dtx ?69:
dhl 
dhl  // *********** Check local sockets for a match or return ...... ************
dhl  return EVENT_UDP_UNSOLICITED; // None of our Sockets: RETURN
dco @20:108 u:2  mov R6,#224
dco @20:10a u:2  mov R7,#0
dtx ?64:
dco @20:10c u:1  ret
dtx ; end of function process_UDP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:12 bytes
dtx 
dtx  .export _send_upd ; void send_upd(xdata char *, unsigned int, xdata unsigned char (*)[6], unsigned lo
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_upd
dtx _send_upd: ; void send_upd(xdata char *, unsigned int, xdata unsigned char (*)[6], unsigned long, unsi
dtx  ; parameter 'len' in 'RW45' moved and assigned to local '?send_upd_len'
dtx  ; parameter 'rem_ipl' moved and assigned to 'RL0123'
dtx  ; parameter 'sport' assigned to local '?send_upd_0_sport'
dtx  ; parameter 'dport' assigned to local '?send_upd_0_dport'
dtx  ; parameter 'data' in 'RW67' moved and assigned to local '?send_upd_data'
dtx  ; parameter 'pmac' in 'RW23' moved and assigned to local '?send_upd_pmac'
dco @23:0 u:2  mov ?send_upd_len,R4
dco @23:2 u:2  mov ?send_upd_len+1,R5
dco @23:4 u:2  mov ?send_upd_data,R6
dco @23:6 u:2  mov ?send_upd_data+1,R7
dco @23:8 u:2  mov ?send_upd_pmac,R2
dco @23:a u:2  mov ?send_upd_pmac+1,R3
dco @23:c u:2  mov R0,#?send_upd_0_rem_ipl
dco @23:e u:3  lcall __ld_r0_r03
dhl }
dhl 
dhl /**********************************************************************************
dhl * void send_upd();
dhl **********************************************************************************/
dhl #ifdef PHY_ETH
dhl  void send_upd(xdata char* data, uint len,xdata MAC *pmac,unsigned long rem_ipl,uint sport, uint dport
dco @23:11 u:3  mov DPTR,#_hhdr
dco @23:14 u:2  mov A,#69
dco @23:16 u:1  movx @DPTR,A
dco @23:17 u:1  inc DPTR
dco @23:18 u:1  clr A
dco @23:19 u:1  movx @DPTR,A
dhl #else
dhl  void send_upd(xdata char* data, uint len,unsigned long rem_ipl,uint sport, uint dport){
dhl #endif
dhl  // Now fill out IP-Header
dhl  hhdr.vhl_service=0x4500;
dhl  hhdr.len=sizeof(IP_HDR)+8+len; // 8 Bytes UDP-Header
dco @23:1a u:2  mov R6,?send_upd_len
dco @23:1c u:2  mov R7,?send_upd_len+1
dco @23:1e u:2  mov A,#28
dco @23:20 u:1  add A,R7
dco @23:21 u:1  mov R7,A
dco @23:22 u:1  clr A
dco @23:23 u:1  addc A,R6
dco @23:24 u:1  mov R6,A
dco @23:25 u:3  mov DPTR,#_hhdr+2
dco @23:28 u:3  lcall __st_dptr_r67
dhl  hhdr.ident=0;
dco @23:2b u:3  mov DPTR,#_hhdr+4
dco @23:2e u:1  clr A
dco @23:2f u:1  movx @DPTR,A
dco @23:30 u:1  inc DPTR
dco @23:31 u:1  movx @DPTR,A
dhl  hhdr.frags=16384; // No Fragmentation
dco @23:32 u:3  mov DPTR,#_hhdr+6
dco @23:35 u:2  mov A,#64
dco @23:37 u:1  movx @DPTR,A
dco @23:38 u:1  inc DPTR
dco @23:39 u:1  clr A
dco @23:3a u:1  movx @DPTR,A
dhl  hhdr.ttl=100; // Industrial standard
dco @23:3b u:3  mov DPTR,#_hhdr+8
dco @23:3e u:2  mov A,#100
dco @23:40 u:1  movx @DPTR,A
dhl  hhdr.pcol=17; // UDP
dco @23:41 u:3  mov DPTR,#_hhdr+9
dco @23:44 u:2  mov A,#17
dco @23:46 u:1  movx @DPTR,A
dhl  hhdr.checksum=0;
dco @23:47 u:3  mov DPTR,#_hhdr+10
dco @23:4a u:1  clr A
dco @23:4b u:1  movx @DPTR,A
dco @23:4c u:1  inc DPTR
dco @23:4d u:1  movx @DPTR,A
dhl  hhdr.sip.ipl=my_ip.ipl;
dco @23:4e u:3  mov DPTR,#_my_ip
dco @23:51 u:3  lcall __ld_dptr_r47
dco @23:54 u:3  mov DPTR,#_hhdr+12
dco @23:57 u:3  lcall __st_dptr_r47
dhl  hhdr.dip.ipl=rem_ipl;
dco @23:5a u:3  mov DPTR,#_hhdr+16
dco @23:5d u:3  lcall __st_dptr_r03
dhl  hhdr.checksum=~(ip_check((xdata uchar*)&hhdr,sizeof(IP_HDR))); // IP-Header only
dco @23:60 u:2  mov R4,#0
dco @23:62 u:2  mov R5,#20
dco @23:64 u:2  mov R6,#((_hhdr)>>8)&255
dco @23:66 u:2  mov R7,#(_hhdr)&255
dco @23:68 u:3  lcall _ip_check
dco @23:6b u:1  mov A,R7
dco @23:6c u:1  cpl A
dco @23:6d u:1  mov R7,A
dco @23:6e u:1  mov A,R6
dco @23:6f u:1  cpl A
dco @23:70 u:1  mov R6,A
dco @23:71 u:3  mov DPTR,#_hhdr+10
dco @23:74 u:3  lcall __st_dptr_r67
dhl 
dhl  // Now, send out reply
dhl #ifdef PHY_ETH
dhl  RequestSend_Phy(sizeof(IP_HDR)+14+8+len); // Send Reply:  ETHERNET_HDR IP_HDR UDP_HDR +(data)
dco @23:77 u:2  mov R6,?send_upd_len
dco @23:79 u:2  mov R7,?send_upd_len+1
dco @23:7b u:2  mov A,#42
dco @23:7d u:1  add A,R7
dco @23:7e u:1  mov R7,A
dco @23:7f u:1  clr A
dco @23:80 u:1  addc A,R6
dco @23:81 u:1  mov R6,A
dco @23:82 u:3  lcall _RequestSend_Phy
dhl  Write_Frame_xdata_Phy((xdata uchar*)pmac,6);  // Physical destination
dco @23:85 u:2  mov R4,#0
dco @23:87 u:2  mov R5,#6
dco @23:89 u:2  mov R6,?send_upd_pmac
dco @23:8b u:2  mov R7,?send_upd_pmac+1
dco @23:8d u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_xdata_Phy(my_mac,6);  // From US (MAC)
dco @23:90 u:2  mov R4,#0
dco @23:92 u:2  mov R5,#6
dco @23:94 u:2  mov R6,#((_my_mac)>>8)&255
dco @23:96 u:2  mov R7,#(_my_mac)&255
dco @23:98 u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_word_Phy(0x800);  // type IP
dco @23:9b u:2  mov R6,#8
dco @23:9d u:2  mov R7,#0
dco @23:9f u:3  lcall _Write_Frame_word_Phy
dhl #else
dhl  RequestSend_Phy(sizeof(IP_HDR)+8+len); // Send Reply:  (PPP_HDR) IP_HDR UDP_HDR +(data)
dhl #endif
dhl 
dhl 
dhl  Write_Frame_xdata_Phy((xdata uchar*)&hhdr,sizeof(IP_HDR));  // Send IP Header
dco @23:a2 u:2  mov R4,#0
dco @23:a4 u:2  mov R5,#20
dco @23:a6 u:2  mov R6,#((_hhdr)>>8)&255
dco @23:a8 u:2  mov R7,#(_hhdr)&255
dco @23:aa u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_word_Phy(sport);
dco @23:ad u:2  mov R6,?send_upd_0_sport
dco @23:af u:2  mov R7,?send_upd_0_sport+1
dco @23:b1 u:3  lcall _Write_Frame_word_Phy
dhl  Write_Frame_word_Phy(dport);
dco @23:b4 u:2  mov R6,?send_upd_0_dport
dco @23:b6 u:2  mov R7,?send_upd_0_dport+1
dco @23:b8 u:3  lcall _Write_Frame_word_Phy
dhl  Write_Frame_word_Phy(len+8);  // Including UDP_HDR...
dco @23:bb u:2  mov R6,?send_upd_len
dco @23:bd u:2  mov R7,?send_upd_len+1
dco @23:bf u:2  mov A,#8
dco @23:c1 u:1  add A,R7
dco @23:c2 u:1  mov R7,A
dco @23:c3 u:1  clr A
dco @23:c4 u:1  addc A,R6
dco @23:c5 u:1  mov R6,A
dco @23:c6 u:3  lcall _Write_Frame_word_Phy
dhl  Write_Frame_word_Phy(0);  // 0: Means: Checksum not computed
dco @23:c9 u:1  clr A
dco @23:ca u:1  mov R6,A
dco @23:cb u:1  mov R7,A
dco @23:cc u:3  lcall _Write_Frame_word_Phy
dhl 
dhl  Write_Frame_xdata_Phy(data,len);   // Send data
dco @23:cf u:2  mov R4,?send_upd_len
dco @23:d1 u:2  mov R5,?send_upd_len+1
dco @23:d3 u:2  mov R6,?send_upd_data
dco @23:d5 u:2  mov R7,?send_upd_data+1
dco @23:d7 u:3  lcall _Write_Frame_xdata_Phy
dhl  CommitSend_Phy();      // Start TX
dco @23:da u:3  lcall _CommitSend_Phy
dco @23:dd u:1  ret
dtx ; end of function send_upd
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:6 bytes formals:8 bytes
dtx 
dtx  .export _send_TCP ; void send_TCP(xdata char *, unsigned int, xdata unsigned char (*)[6], unsigned lo
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_TCP
dtx _send_TCP: ; void send_TCP(xdata char *, unsigned int, xdata unsigned char (*)[6], unsigned long)
dtx  ; parameter 'len' in 'RW45' moved and assigned to local '?send_TCP_len'
dtx  ; parameter 'rem_ipl' assigned to local '?send_TCP_0_rem_ipl'
dtx  ; parameter 'data' in 'RW67' moved and assigned to local '?send_TCP_data'
dtx  ; parameter 'pmac' in 'RW23' moved and assigned to local '?send_TCP_pmac'
dco @27:0 u:2  mov ?send_TCP_len,R4
dco @27:2 u:2  mov ?send_TCP_len+1,R5
dco @27:4 u:2  mov ?send_TCP_data,R6
dco @27:6 u:2  mov ?send_TCP_data+1,R7
dco @27:8 u:2  mov ?send_TCP_pmac,R2
dco @27:a u:2  mov ?send_TCP_pmac+1,R3
dhl }
dhl #endif
dhl 
dhl /**********************************************************************************
dhl * void send_TCP();
dhl *
dhl * Will send a given Segment as IP-TCP-(DATA). ACK,SEQU,WINDOW,FLAGS must be set
dhl * by the caller! TCP-Checksum is computed. 
dhl * MSS-option inserted for Flags with TSYN. Rem.: MSS must be >= 576 Bytes!
dhl **********************************************************************************/
dhl #ifdef PHY_ETH
dhl  void send_TCP(xdata char* data, uint len,xdata MAC *pmac,unsigned long rem_ipl){
dco @27:c u:3  mov DPTR,#_hframe+12
dco @27:f u:2  mov A,#80
dco @27:11 u:1  movx @DPTR,A
dhl #else
dhl  void send_TCP(xdata char* data, uint len,unsigned long rem_ipl){
dhl #endif
dhl  uint data_cs;
dhl 
dhl #ifdef USE_MSS
dhl  uint tcp_hdr_len;
dhl  if(hframe.tcp_hdr.flags & TSYN){
dhl         tcp_hdr_len=24;
dhl         hframe.tcp_hdr.mss=0x2040000+MAX_RX;
dhl         hframe.tcp_hdr.hlen=96;   // Ext. Size: 24 Bytes
dhl  }else{
dhl         tcp_hdr_len=20;
dhl         hframe.tcp_hdr.hlen=80;   // Standard Size: 20 Bytes
dhl  }
dhl #else
dhl  #define tcp_hdr_len 20
dhl  hframe.tcp_hdr.hlen=80;   // Standard Size: 20 Bytes
dhl #endif
dhl 
dhl 
dhl  hframe.tcp_hdr.checksum=0;
dco @27:12 u:3  mov DPTR,#_hframe+16
dco @27:15 u:1  clr A
dco @27:16 u:1  movx @DPTR,A
dco @27:17 u:1  inc DPTR
dco @27:18 u:1  movx @DPTR,A
dhl 
dhl  pseudo_hdr.sip.ipl=my_ip.ipl;  // Built Pseudo-Header for Checksum
dco @27:19 u:3  mov DPTR,#_my_ip
dco @27:1c u:3  lcall __ld_dptr_r47
dco @27:1f u:3  mov DPTR,#_pseudo_hdr
dco @27:22 u:3  lcall __st_dptr_r47
dhl  pseudo_hdr.dip.ipl=rem_ipl;
dco @27:25 u:2  mov A,#?send_TCP_0_rem_ipl
dco @27:27 u:3  lcall __ld_a_r47
dco @27:2a u:3  mov DPTR,#_pseudo_hdr+4
dco @27:2d u:3  lcall __st_dptr_r47
dhl  pseudo_hdr.pcol=6; // TCP
dco @27:30 u:3  mov DPTR,#_pseudo_hdr+8
dco @27:33 u:1  clr A
dco @27:34 u:1  movx @DPTR,A
dco @27:35 u:1  inc DPTR
dco @27:36 u:2  mov A,#6
dco @27:38 u:1  movx @DPTR,A
dhl  pseudo_hdr.len=len+tcp_hdr_len;   // Data+TCP-Header, without Pseudo-header!
dco @27:39 u:2  mov R6,?send_TCP_len
dco @27:3b u:2  mov R7,?send_TCP_len+1
dco @27:3d u:2  mov A,#20
dco @27:3f u:1  add A,R7
dco @27:40 u:1  mov R7,A
dco @27:41 u:1  clr A
dco @27:42 u:1  addc A,R6
dco @27:43 u:1  mov R6,A
dco @27:44 u:3  mov DPTR,#_pseudo_hdr+10
dco @27:47 u:3  lcall __st_dptr_r67
dhl  data_cs=ip_check(data,len); // Checksum of Data Block
dco @27:4a u:2  mov R4,?send_TCP_len
dco @27:4c u:2  mov R5,?send_TCP_len+1
dco @27:4e u:2  mov R6,?send_TCP_data
dco @27:50 u:2  mov R7,?send_TCP_data+1
dco @27:52 u:3  lcall _ip_check
dtx  ; variable 'data_cs' assigned to register 'RW67'
dhl  hframe.tcp_hdr.checksum = ~( // Checksum of Header, Datablock and Pseudo_header
dco @27:55 u:2  mov R2,AR6
dco @27:57 u:2  mov R3,AR7
dco @27:59 u:2  mov R4,#0
dco @27:5b u:2  mov R5,#12
dco @27:5d u:2  mov R6,#((_pseudo_hdr)>>8)&255
dco @27:5f u:2  mov R7,#(_pseudo_hdr)&255
dco @27:61 u:3  lcall _ip_check_more
dco @27:64 u:2  mov R2,AR6
dco @27:66 u:2  mov R3,AR7
dco @27:68 u:2  mov R4,#0
dco @27:6a u:2  mov R5,#20
dco @27:6c u:2  mov R6,#((_hframe)>>8)&255
dco @27:6e u:2  mov R7,#(_hframe)&255
dco @27:70 u:3  lcall _ip_check_more
dco @27:73 u:1  mov A,R7
dco @27:74 u:1  cpl A
dco @27:75 u:1  mov R7,A
dco @27:76 u:1  mov A,R6
dco @27:77 u:1  cpl A
dco @27:78 u:1  mov R6,A
dco @27:79 u:3  mov DPTR,#_hframe+16
dco @27:7c u:3  lcall __st_dptr_r67
dhl   ip_check_more(hframe.bytes,tcp_hdr_len, // TCP-Header
dhl    ip_check_more((xdata uchar*)&pseudo_hdr,sizeof(PSEUDO_HDR), // Pseudo-header
dhl     data_cs))); // Data
dhl 
dhl  // Now fill out IP-Header
dhl  hhdr.vhl_service=0x4500;
dco @27:7f u:3  mov DPTR,#_hhdr
dco @27:82 u:2  mov A,#69
dco @27:84 u:1  movx @DPTR,A
dco @27:85 u:1  inc DPTR
dco @27:86 u:1  clr A
dco @27:87 u:1  movx @DPTR,A
dhl  hhdr.len=sizeof(IP_HDR)+tcp_hdr_len+len; // 20/24 Bytes TCP-Header (24 if MSS required)
dco @27:88 u:2  mov R6,?send_TCP_len
dco @27:8a u:2  mov R7,?send_TCP_len+1
dco @27:8c u:2  mov A,#40
dco @27:8e u:1  add A,R7
dco @27:8f u:1  mov R7,A
dco @27:90 u:1  clr A
dco @27:91 u:1  addc A,R6
dco @27:92 u:1  mov R6,A
dco @27:93 u:3  mov DPTR,#_hhdr+2
dco @27:96 u:3  lcall __st_dptr_r67
dhl  hhdr.ident=0;
dco @27:99 u:3  mov DPTR,#_hhdr+4
dco @27:9c u:1  clr A
dco @27:9d u:1  movx @DPTR,A
dco @27:9e u:1  inc DPTR
dco @27:9f u:1  movx @DPTR,A
dhl  hhdr.frags=16384; // No Fragmentation
dco @27:a0 u:3  mov DPTR,#_hhdr+6
dco @27:a3 u:2  mov A,#64
dco @27:a5 u:1  movx @DPTR,A
dco @27:a6 u:1  inc DPTR
dco @27:a7 u:1  clr A
dco @27:a8 u:1  movx @DPTR,A
dhl  hhdr.ttl=100; // Industrial standard
dco @27:a9 u:3  mov DPTR,#_hhdr+8
dco @27:ac u:2  mov A,#100
dco @27:ae u:1  movx @DPTR,A
dhl  hhdr.pcol=6; // TCP
dco @27:af u:3  mov DPTR,#_hhdr+9
dco @27:b2 u:2  mov A,#6
dco @27:b4 u:1  movx @DPTR,A
dhl  hhdr.checksum=0;
dco @27:b5 u:3  mov DPTR,#_hhdr+10
dco @27:b8 u:1  clr A
dco @27:b9 u:1  movx @DPTR,A
dco @27:ba u:1  inc DPTR
dco @27:bb u:1  movx @DPTR,A
dhl  hhdr.sip.ipl=my_ip.ipl;
dco @27:bc u:3  mov DPTR,#_my_ip
dco @27:bf u:3  lcall __ld_dptr_r47
dco @27:c2 u:3  mov DPTR,#_hhdr+12
dco @27:c5 u:3  lcall __st_dptr_r47
dhl  hhdr.dip.ipl=rem_ipl;
dco @27:c8 u:2  mov A,#?send_TCP_0_rem_ipl
dco @27:ca u:3  lcall __ld_a_r47
dco @27:cd u:3  mov DPTR,#_hhdr+16
dco @27:d0 u:3  lcall __st_dptr_r47
dhl  hhdr.checksum=~(ip_check((xdata uchar*)&hhdr,sizeof(IP_HDR))); // IP-Header only
dco @27:d3 u:2  mov R4,#0
dco @27:d5 u:2  mov R5,#20
dco @27:d7 u:2  mov R6,#((_hhdr)>>8)&255
dco @27:d9 u:2  mov R7,#(_hhdr)&255
dco @27:db u:3  lcall _ip_check
dco @27:de u:1  mov A,R7
dco @27:df u:1  cpl A
dco @27:e0 u:1  mov R7,A
dco @27:e1 u:1  mov A,R6
dco @27:e2 u:1  cpl A
dco @27:e3 u:1  mov R6,A
dco @27:e4 u:3  mov DPTR,#_hhdr+10
dco @27:e7 u:3  lcall __st_dptr_r67
dhl 
dhl  // Now, send out reply
dhl #ifdef PHY_ETH
dhl  RequestSend_Phy(sizeof(IP_HDR)+14+tcp_hdr_len+len); // Send Reply:  ETHERNET_HDR IP_HDR TCP_HDR +(dat
dco @27:ea u:2  mov R6,?send_TCP_len
dco @27:ec u:2  mov R7,?send_TCP_len+1
dco @27:ee u:2  mov A,#54
dco @27:f0 u:1  add A,R7
dco @27:f1 u:1  mov R7,A
dco @27:f2 u:1  clr A
dco @27:f3 u:1  addc A,R6
dco @27:f4 u:1  mov R6,A
dco @27:f5 u:3  lcall _RequestSend_Phy
dhl  Write_Frame_xdata_Phy((xdata uchar*)pmac,6);  // Physical destination
dco @27:f8 u:2  mov R4,#0
dco @27:fa u:2  mov R5,#6
dco @27:fc u:2  mov R6,?send_TCP_pmac
dco @27:fe u:2  mov R7,?send_TCP_pmac+1
dco @27:100 u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_xdata_Phy(my_mac,6);  // From US (MAC)
dco @27:103 u:2  mov R4,#0
dco @27:105 u:2  mov R5,#6
dco @27:107 u:2  mov R6,#((_my_mac)>>8)&255
dco @27:109 u:2  mov R7,#(_my_mac)&255
dco @27:10b u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_word_Phy(0x800);  // type IP
dco @27:10e u:2  mov R6,#8
dco @27:110 u:2  mov R7,#0
dco @27:112 u:3  lcall _Write_Frame_word_Phy
dhl #else
dhl  RequestSend_Phy(sizeof(IP_HDR)+tcp_hdr_len+len); // Send Reply:  (PPP+ ) IP_HDR TCP_HDR +(data)
dhl #endif
dhl 
dhl  Write_Frame_xdata_Phy((xdata uchar*)&hhdr,sizeof(IP_HDR));  // Send IP Header
dco @27:115 u:2  mov R4,#0
dco @27:117 u:2  mov R5,#20
dco @27:119 u:2  mov R6,#((_hhdr)>>8)&255
dco @27:11b u:2  mov R7,#(_hhdr)&255
dco @27:11d u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_xdata_Phy(hframe.bytes,tcp_hdr_len);  // Send TCP Header
dco @27:120 u:2  mov R4,#0
dco @27:122 u:2  mov R5,#20
dco @27:124 u:2  mov R6,#((_hframe)>>8)&255
dco @27:126 u:2  mov R7,#(_hframe)&255
dco @27:128 u:3  lcall _Write_Frame_xdata_Phy
dhl  Write_Frame_xdata_Phy(data,len);   // Send data
dco @27:12b u:2  mov R4,?send_TCP_len
dco @27:12d u:2  mov R5,?send_TCP_len+1
dco @27:12f u:2  mov R6,?send_TCP_data
dco @27:131 u:2  mov R7,?send_TCP_data+1
dco @27:133 u:3  lcall _Write_Frame_xdata_Phy
dhl  CommitSend_Phy();      // Start TX
dco @27:136 u:3  lcall _CommitSend_Phy
dco @27:139 u:1  ret
dtx ; end of function send_TCP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:6 bytes formals:4 bytes
dtx 
dtx  .export _send_incomming_reset_TCP ; void send_incomming_reset_TCP(unsigned int, xdata unsigned char (
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_incomming_reset_TCP
dtx _send_incomming_reset_TCP: ; void send_incomming_reset_TCP(unsigned int, xdata unsigned char (*)[6], u
dtx  ; parameter 'ipl' in 'RL0123' assigned to 'B1_RL12131415'
dtx  ; parameter 'pmac' in 'RW45' moved and assigned to local '?send_incomming_reset_TCP_pmac'
dtx  ; parameter 'dlen' in 'RW67' assigned to 'RW23'
dco @2a:0 u:2  mov ?send_incomming_reset_TCP_pmac,R4
dco @2a:2 u:2  mov ?send_incomming_reset_TCP_pmac+1,R5
dco @2a:4 u:3  lcall __movel_0_12
dco @2a:7 u:2  mov R2,AR6
dco @2a:9 u:2  mov R3,AR7
dhl 
dhl #ifdef DEBUG_REC
dhl     // Record Data of Transmitted Frame
dhl     record_frame('T',hframe.tcp_hdr.dport,hframe.tcp_hdr.seq.u,hframe.tcp_hdr.ack.u, hframe.tcp_hdr.fl
dhl #endif
dhl 
dhl }
dhl 
dhl 
dhl /**********************************************************************************
dhl * void send_incomming_reset_TCP();
dhl *
dhl * Build reset-segment as reply without using match_socket, i.e. as denial for an
dhl * incomming request... ACK included.
dhl **********************************************************************************/
dhl #ifdef PHY_ETH
dhl  void send_incomming_reset_TCP(uint dlen,xdata MAC *pmac,unsigned long ipl){
dco @2a:b u:3  mov DPTR,#_hframe+2
dco @2a:e u:3  lcall __ld_dptr_r45
dtx  ; variable 'sport' assigned to register 'RW45'
dhl #else
dhl  void send_incomming_reset_TCP(uint dlen,unsigned long ipl){
dhl #endif
dhl  unsigned long ack;
dhl  uint sport;
dhl  sport=hframe.tcp_hdr.dport;
dhl  hframe.tcp_hdr.dport=hframe.tcp_hdr.sport; // Bounce port
dco @2a:11 u:3  mov DPTR,#_hframe
dco @2a:14 u:3  lcall __ld_dptr_r67
dco @2a:17 u:3  mov DPTR,#_hframe+2
dco @2a:1a u:3  lcall __st_dptr_r67
dhl  hframe.tcp_hdr.sport=sport;
dco @2a:1d u:3  mov DPTR,#_hframe
dco @2a:20 u:3  lcall __st_dptr_r45
dhl 
dhl  // Window, Flags and Set ACK and SEQU in the response, rest will be completed by send_tcp
dhl  hframe.tcp_hdr.window=0;  // No reply!
dco @2a:23 u:3  mov DPTR,#_hframe+14
dco @2a:26 u:1  clr A
dco @2a:27 u:1  movx @DPTR,A
dco @2a:28 u:1  inc DPTR
dco @2a:29 u:1  movx @DPTR,A
dhl  ack=hframe.tcp_hdr.seq.u+dlen;
dco @2a:2a u:1  clr A
dco @2a:2b u:1  mov R1,A
dco @2a:2c u:1  mov R0,A
dco @2a:2d u:3  mov DPTR,#_hframe+4
dco @2a:30 u:3  lcall __ld_dptr_r47
dco @2a:33 u:3  lcall __add_i4
dtx  ; variable 'ack' assigned to register 'B1_RL891011'
dco @2a:36 u:3  lcall __movel_4_8
dhl  if(hframe.tcp_hdr.flags & (TSYN | TFIN)) ack++;
dco @2a:39 u:3  mov DPTR,#_hframe+13
dco @2a:3c u:1  movx A,@DPTR
dco @2a:3d u:1  mov R7,A
dco @2a:3e u:2  anl A,#3
dco @2a:40 u:1  mov R7,A
dco @2a:41 u:2  jz ?81
dtx 
dco @2a:43 u:2  inc AR11
dco @2a:45 u:2  mov A,AR11
dco @2a:47 u:2  jnz ?_34
dco @2a:49 u:2  inc AR10
dco @2a:4b u:2  mov A,AR10
dco @2a:4d u:2  jnz ?_34
dco @2a:4f u:2  inc AR9
dco @2a:51 u:2  mov A,AR9
dco @2a:53 u:2  jnz ?_34
dco @2a:55 u:2  inc AR8
dtx ?_34:
dtx ?81:
dhl  hframe.tcp_hdr.seq.u=hframe.tcp_hdr.ack.u;
dco @2a:57 u:3  mov DPTR,#_hframe+8
dco @2a:5a u:3  lcall __ld_dptr_r47
dco @2a:5d u:3  mov DPTR,#_hframe+4
dco @2a:60 u:3  lcall __st_dptr_r47
dhl  hframe.tcp_hdr.ack.u=ack;
dco @2a:63 u:3  lcall __movel_8_4
dco @2a:66 u:3  mov DPTR,#_hframe+8
dco @2a:69 u:3  lcall __st_dptr_r47
dhl  hframe.tcp_hdr.flags=TRST+TACK;
dco @2a:6c u:3  mov DPTR,#_hframe+13
dco @2a:6f u:2  mov A,#20
dco @2a:71 u:1  movx @DPTR,A
dhl #ifdef PHY_ETH
dhl  send_TCP(0,0,pmac,ipl); // Replay (Ethernet)
dco @2a:72 u:3  mov _send_TCP_formal_near,AR12
dco @2a:75 u:3  mov _send_TCP_formal_near+1,AR13
dco @2a:78 u:3  mov _send_TCP_formal_near+2,AR14
dco @2a:7b u:3  mov _send_TCP_formal_near+3,AR15
dco @2a:7e u:2  mov R2,?send_incomming_reset_TCP_pmac
dco @2a:80 u:2  mov R3,?send_incomming_reset_TCP_pmac+1
dco @2a:82 u:1  clr A
dco @2a:83 u:1  mov R4,A
dco @2a:84 u:1  mov R5,A
dco @2a:85 u:1  clr A
dco @2a:86 u:1  mov R6,A
dco @2a:87 u:1  mov R7,A
dco @2a:88 u:3  lcall _send_TCP
dco @2a:8b u:1  ret
dtx ; end of function send_incomming_reset_TCP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
dtx 
dtx  .export _send_match_ok_TCP ; void send_match_ok_TCP(xdata unsigned char *, unsigned int, unsigned cha
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_match_ok_TCP
dtx _send_match_ok_TCP: ; void send_match_ok_TCP(xdata unsigned char *, unsigned int, unsigned char)
dtx  ; parameter 'flags' in 'R3'
dtx  ; parameter 'dlen' in 'RW45' assigned to 'RW01'
dtx  ; parameter 'pdata' in 'RW67' assigned to 'B1_RW1213'
dco @2d:0 u:2  mov R0,AR4
dco @2d:2 u:2  mov R1,AR5
dco @2d:4 u:2  mov AR12,R6
dco @2d:6 u:2  mov AR13,R7
dhl #else
dhl  send_TCP(0,0,ipl); // Replay (PPP)
dhl #endif
dhl }
dhl 
dhl /**********************************************************************************
dhl * void send_match_ok_TCP();
dhl *
dhl * Build Segment header and send it as regular Header, Data are in *pdata, size alen
dhl * match_socket must fit! hframe used as a temporary variable
dhl **********************************************************************************/
dhl void send_match_ok_TCP(xdata uchar *pdata, uint dlen, uchar flags){
dco @2d:8 u:3  mov DPTR,#_match_socket+14
dco @2d:b u:3  lcall __ld_dptr_r67
dco @2d:e u:3  mov DPTR,#_hframe
dco @2d:11 u:3  lcall __st_dptr_r67
dhl  unsigned long seq;
dhl 
dhl  hframe.tcp_hdr.sport=match_socket.local_port; // Our Port
dhl  hframe.tcp_hdr.dport=match_socket.sremote_port; // Remote
dco @2d:14 u:3  mov DPTR,#_match_socket+12
dco @2d:17 u:3  lcall __ld_dptr_r67
dco @2d:1a u:3  mov DPTR,#_hframe+2
dco @2d:1d u:3  lcall __st_dptr_r67
dhl 
dhl  // Window, Flags and Set ACK and SEQU in the response, rest will be completed by send_tcp
dhl  hframe.tcp_hdr.window=MAX_RX;  // Sender: Do not send more the MAX_RX
dco @2d:20 u:3  mov DPTR,#_hframe+14
dco @2d:23 u:1  clr A
dco @2d:24 u:1  movx @DPTR,A
dco @2d:25 u:1  inc DPTR
dco @2d:26 u:2  mov A,#100
dco @2d:28 u:1  movx @DPTR,A
dtx  ; variable 'seq' assigned to register 'B1_RL891011'
dhl 
dhl  seq=match_socket.sseq.u;
dco @2d:29 u:3  mov DPTR,#_match_socket+20
dco @2d:2c u:1  movx A,@DPTR
dco @2d:2d u:2  mov AR8,A
dco @2d:2f u:1  inc DPTR
dco @2d:30 u:1  movx A,@DPTR
dco @2d:31 u:2  mov AR9,A
dco @2d:33 u:1  inc DPTR
dco @2d:34 u:1  movx A,@DPTR
dco @2d:35 u:2  mov AR10,A
dco @2d:37 u:1  inc DPTR
dco @2d:38 u:1  movx A,@DPTR
dco @2d:39 u:2  mov AR11,A
dhl  if(flags & (TSYN)) seq--;  // If a SYN is sent, count this as 1
dco @2d:3b u:1  mov A,R3
dco @2d:3c u:2  anl A,#2
dco @2d:3e u:1  mov R7,A
dco @2d:3f u:2  jz ?84
dtx 
dco @2d:41 u:2  mov A,AR11
dco @2d:43 u:2  dec AR11
dco @2d:45 u:2  jnz ?_36
dco @2d:47 u:2  mov A,AR10
dco @2d:49 u:2  dec AR10
dco @2d:4b u:2  jnz ?_36
dco @2d:4d u:2  mov A,AR9
dco @2d:4f u:2  dec AR9
dco @2d:51 u:2  jnz ?_36
dco @2d:53 u:2  dec AR8
dtx ?_36:
dtx ?84:
dhl  hframe.tcp_hdr.seq.u=seq;
dco @2d:55 u:3  lcall __movel_8_4
dco @2d:58 u:3  mov DPTR,#_hframe+4
dco @2d:5b u:3  lcall __st_dptr_r47
dhl 
dhl  hframe.tcp_hdr.ack.u=match_socket.sack.u; // This was received from the Sender
dco @2d:5e u:3  mov DPTR,#_match_socket+16
dco @2d:61 u:3  lcall __ld_dptr_r47
dco @2d:64 u:3  mov DPTR,#_hframe+8
dco @2d:67 u:3  lcall __st_dptr_r47
dhl  hframe.tcp_hdr.flags=flags;
dco @2d:6a u:3  mov DPTR,#_hframe+13
dco @2d:6d u:1  mov A,R3
dco @2d:6e u:1  movx @DPTR,A
dhl 
dhl  // Send empty
dhl #ifdef PHY_ETH
dhl  send_TCP(pdata,dlen,match_socket.sremote_mac, match_socket.sremote_ip );
dco @2d:6f u:3  mov DPTR,#_match_socket+8
dco @2d:72 u:3  lcall __ld_dptr_r47
dco @2d:75 u:2  mov A,#_send_TCP_formal_near
dco @2d:77 u:3  lcall __st_a_r47
dco @2d:7a u:2  mov R2,#((_match_socket+2)>>8)&255
dco @2d:7c u:2  mov R3,#(_match_socket+2)&255
dco @2d:7e u:2  mov R4,AR0
dco @2d:80 u:2  mov R5,AR1
dco @2d:82 u:2  mov R6,AR12
dco @2d:84 u:2  mov R7,AR13
dco @2d:86 u:3  lcall _send_TCP
dco @2d:89 u:1  ret
dtx ; end of function send_match_ok_TCP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .export _state_machine_TCP ; unsigned int state_machine_TCP(unsigned int)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __state_machine_TCP
dtx _state_machine_TCP: ; unsigned int state_machine_TCP(unsigned int)
dtx  ; parameter 'dlen' in 'RW67' moved and assigned to local '?state_machine_TCP_dlen'
dco @30:0 u:2  mov ?state_machine_TCP_dlen,R6
dco @30:2 u:2  mov ?state_machine_TCP_dlen+1,R7
dhl #else
dhl  send_TCP(pdata,dlen, match_socket.sremote_ip );
dhl #endif
dhl 
dhl  // printf("<TX P:%u A:%x S:%x F:%u, T:%u> ", hframe.tcp_hdr.dport, hframe.tcp_hdr.ack.w.l_word,hframe
dhl 
dhl }
dhl 
dhl /**********************************************************************************
dhl * uint state_machine_TCP(uint dlen);
dhl *
dhl * 4.rd-Level-Multiplexer
dhl *
dhl * Process one step in the TCP-state-Machine. The 'match_socket' follows the 
dhl * TCP-State-Machine if its type is SOCKET_HTTP or SOCKET_TCP.
dhl * The low_word of the sequence-number is the offset for SOCKET_HTTP. May wrap 
dhl * for SOCKET_TCP! So resending the sequence-number $zzzz0000 for SOCKET_HTTP implies
dhl * resending the SYN!
dhl * if this routine is called, destination/source port match already checked and
dhl * 'match_socket' copied...
dhl **********************************************************************************/
dhl uint state_machine_TCP(uint dlen){
dco @30:4 u:3  mov DPTR,#_hframe+13
dco @30:7 u:1  movx A,@DPTR
dco @30:8 u:1  mov R7,A
dco @30:9 u:2  anl A,#4
dco @30:b u:1  mov R7,A
dco @30:c u:2  jz ?87
dhl 
dhl  if(hframe.tcp_hdr.flags&TRST){
dco @30:e u:3  lcall _free_match_socket
dhl   free_match_socket();   // Free Buffers if allocated... 
dhl   match_socket.state=TCP_CLOSED;  // Connection ends immediatelly
dco @30:11 u:3  mov DPTR,#_match_socket+1
dco @30:14 u:1  clr A
dco @30:15 u:1  movx @DPTR,A
dhl   return EVENT_TCP_RESETRECEIVED;
dco @30:16 u:2  mov R6,#249
dco @30:18 u:2  mov R7,#0
dco @30:1a u:3  ljmp ?86
dtx ?87:
dhl  }
dhl 
dhl  // printf("<rx P:%u A:%x S:%x F:%u, T:%u> ", hframe.tcp_hdr.sport,hframe.tcp_hdr.ack.w.l_word,hframe.
dhl 
dhl  match_socket.timer=BASIC_RETRY_TIMER;
dco @30:1d u:3  mov DPTR,#_match_socket+25
dco @30:20 u:2  mov A,#6
dco @30:22 u:1  movx @DPTR,A
dhl 
dhl  switch(match_socket.state){
dco @30:23 u:3  mov DPTR,#_match_socket+1
dco @30:26 u:1  movx A,@DPTR
dco @30:27 u:1  mov R5,A
dco @30:28 u:2  mov R7,#4
dco @30:2a u:1  setb C
dco @30:2b u:1  mov A,R5
dco @30:2c u:1  subb A,R7
dco @30:2d u:2  jc ?_38
dco @30:2f u:3  ljmp ?89
dtx ?_38:
dco @30:32 u:3  mov DPTR,#?i129
dco @30:35 u:1  mov A,R5
dco @30:36 u:1  add A,R5
dco @30:37 u:2  jnc ?_39
dco @30:39 u:2  inc DPH
dtx ?_39:
dco @30:3b u:2  add A,DPL
dco @30:3d u:2  mov DPL,A
dco @30:3f u:2  jnc ?_40
dco @30:41 u:2  inc DPH
dtx ?_40:
dco @30:43 u:2  mov A,#1
dco @30:45 u:1  movc A,@A+DPTR
dco @30:46 u:2  push ACC
dco @30:48 u:1  clr A
dco @30:49 u:1  movc A,@A+DPTR
dco @30:4a u:2  push ACC
dco @30:4c u:1  ret
dtx 
dtx ?92:
dhl 
dhl  // Socket was listening. Only a SYN could change this
dhl  case TCP_CLOSED:  // Passive open!
dhl   if(!(hframe.tcp_hdr.flags&TSYN)) break;
dco @30:4d u:3  mov DPTR,#_hframe+13
dco @30:50 u:1  movx A,@DPTR
dco @30:51 u:1  mov R7,A
dco @30:52 u:2  anl A,#2
dco @30:54 u:1  mov R7,A
dco @30:55 u:2  jnz ?93
dtx 
dco @30:57 u:3  ljmp ?90
dtx ?93:
dhl   // puts("<SYN RECEIVED>");
dhl 
dhl #ifdef USE_TCP_CLIENT
dhl   if(match_socket.tcp_client_flag!=FLAG_PASSIVE_OPEN) break; // Passove open not allowed.
dhl #endif
dhl 
dhl #ifdef PHY_ETH
dhl   // Fast XDATA copy by two casts... (6 Bytes)
dhl   *(xdata unsigned long*)match_socket.sremote_mac=*(xdata unsigned long*)remote_mac;
dco @30:5a u:3  mov DPTR,#_remote_mac
dco @30:5d u:3  lcall __ld_dptr_r47
dco @30:60 u:3  mov DPTR,#_match_socket+2
dco @30:63 u:3  lcall __st_dptr_r47
dhl   *(xdata uint*)(match_socket.sremote_mac+4)=*(xdata uint*)(remote_mac+4);
dco @30:66 u:3  mov DPTR,#_remote_mac+4
dco @30:69 u:3  lcall __ld_dptr_r67
dco @30:6c u:3  mov DPTR,#_match_socket+2+4
dco @30:6f u:3  lcall __st_dptr_r67
dhl #endif
dhl 
dhl   // Save remote's IP, set by process_IP() and other data
dhl   match_socket.sremote_ip=remote_ip.ipl;
dco @30:72 u:3  mov DPTR,#_remote_ip
dco @30:75 u:3  lcall __ld_dptr_r47
dco @30:78 u:3  mov DPTR,#_match_socket+8
dco @30:7b u:3  lcall __st_dptr_r47
dhl   match_socket.sremote_port=hframe.tcp_hdr.sport; // Remote Port match already matching!
dco @30:7e u:3  mov DPTR,#_hframe
dco @30:81 u:3  lcall __ld_dptr_r67
dco @30:84 u:3  mov DPTR,#_match_socket+12
dco @30:87 u:3  lcall __st_dptr_r67
dhl   // Our Ack is sender's Sequence!
dhl   match_socket.sack.u=hframe.tcp_hdr.seq.u+dlen+1; // +1: Bec. SYN rcvd.
dco @30:8a u:2  mov R6,?state_machine_TCP_dlen
dco @30:8c u:2  mov R7,?state_machine_TCP_dlen+1
dco @30:8e u:2  mov R3,AR7
dco @30:90 u:2  mov R2,AR6
dco @30:92 u:1  clr A
dco @30:93 u:1  mov R1,A
dco @30:94 u:1  mov R0,A
dco @30:95 u:3  mov DPTR,#_hframe+4
dco @30:98 u:3  lcall __ld_dptr_r47
dco @30:9b u:3  lcall __add_i4
dco @30:9e u:1  clr A
dco @30:9f u:1  mov R0,A
dco @30:a0 u:1  mov R1,A
dco @30:a1 u:1  mov R2,A
dco @30:a2 u:2  mov R3,#1
dco @30:a4 u:3  lcall __add_i4
dco @30:a7 u:3  mov DPTR,#_match_socket+16
dco @30:aa u:3  lcall __st_dptr_r47
dhl   match_socket.sseq.w.h_word=net_service_cnt;   // Time ascending...
dco @30:ad u:2  mov R7,_net_service_cnt
dco @30:af u:2  mov R6,#0
dco @30:b1 u:3  mov DPTR,#_match_socket+20
dco @30:b4 u:3  lcall __st_dptr_r67
dhl   match_socket.sseq.w.l_word=0;    // Our relative Pointer (for HTTP)
dco @30:b7 u:3  mov DPTR,#_match_socket+20+2
dco @30:ba u:1  clr A
dco @30:bb u:1  movx @DPTR,A
dco @30:bc u:1  inc DPTR
dco @30:bd u:1  movx @DPTR,A
dhl 
dhl   send_match_ok_TCP(0,0,TSYN+TACK); // Reply with a single SYN+ACK
dco @30:be u:2  mov R3,#18
dco @30:c0 u:1  clr A
dco @30:c1 u:1  mov R4,A
dco @30:c2 u:1  mov R5,A
dco @30:c3 u:1  clr A
dco @30:c4 u:1  mov R6,A
dco @30:c5 u:1  mov R7,A
dco @30:c6 u:3  lcall _send_match_ok_TCP
dhl   // puts("<SYN+ACK SENT>");
dhl 
dhl   match_socket.state=TCP_SYNCON;  // SYN confirmed with SYN+ACK
dco @30:c9 u:3  mov DPTR,#_match_socket+1
dco @30:cc u:2  mov A,#1
dco @30:ce u:1  movx @DPTR,A
dhl   match_socket.retry_cnt=0;
dco @30:cf u:3  mov DPTR,#_match_socket+24
dco @30:d2 u:1  clr A
dco @30:d3 u:1  movx @DPTR,A
dhl   return EVENT_TCP_SYNRECEIVED; // Low-Byte added by caller!
dco @30:d4 u:2  mov R6,#242
dco @30:d6 u:2  mov R7,#0
dco @30:d8 u:3  ljmp ?86
dtx ?95:
dhl 
dhl #ifdef USE_TCP_CLIENT
dhl  case TCP_SYNSENT:
dhl   // puts("<ACTIVE OPEN SYN-RECEIVED>");
dhl   if(!(hframe.tcp_hdr.flags&TSYN)) break;
dhl   hframe.tcp_hdr.seq.u++;    // Count remote SYN
dhl   match_socket.sack.u=hframe.tcp_hdr.seq.u; // +1: Bec. SYN rcvd.
dhl #endif
dhl 
dhl  case TCP_SYNCON:
dhl  case TCP_EST:
dhl   if(!(hframe.tcp_hdr.flags&TACK)) break;
dco @30:db u:3  mov DPTR,#_hframe+13
dco @30:de u:1  movx A,@DPTR
dco @30:df u:1  mov R7,A
dco @30:e0 u:2  anl A,#16
dco @30:e2 u:1  mov R7,A
dco @30:e3 u:2  jnz ?96
dtx 
dco @30:e5 u:3  ljmp ?90
dtx ?96:
dhl   if(dlen>MAX_RX) dlen=MAX_RX;  // IDIOTA! Clip data in size (don't know if this is safe?)
dco @30:e8 u:2  mov R4,#0
dco @30:ea u:2  mov R5,#100
dco @30:ec u:2  mov R6,?state_machine_TCP_dlen
dco @30:ee u:2  mov R7,?state_machine_TCP_dlen+1
dco @30:f0 u:1  setb C
dco @30:f1 u:1  mov A,R7
dco @30:f2 u:1  subb A,R5
dco @30:f3 u:1  mov A,R6
dco @30:f4 u:1  subb A,R4
dco @30:f5 u:2  jc ?98
dtx 
dco @30:f7 u:3  mov ?state_machine_TCP_dlen,#0
dco @30:fa u:3  mov ?state_machine_TCP_dlen+1,#100
dtx ?98:
dhl 
dhl   // Here a small problem is silently ignored: A not acknowled Segment which is restransmitted larger
dhl   // could contain old data as a part (maybe for TELNET...)
dhl   // Silently assume all Segments have valid ACK
dhl 
dhl   if(match_socket.sack.u!=hframe.tcp_hdr.seq.u) return EVENT_TCP_OUTOFBOUNDS; // Ignore-out-of-bounds 
dco @30:fd u:3  mov DPTR,#_hframe+4
dco @30:100 u:3  lcall __ld_dptr_r03
dco @30:103 u:3  mov DPTR,#_match_socket+16
dco @30:106 u:3  lcall __ld_dptr_r47
dco @30:109 u:1  clr C
dco @30:10a u:3  lcall __cmp_i4
dco @30:10d u:2  jz ?100
dtx 
dco @30:10f u:2  mov R6,#243
dco @30:111 u:2  mov R7,#0
dco @30:113 u:3  ljmp ?86
dtx ?100:
dhl 
dhl   match_socket.state=TCP_EST;  // Connection now established
dco @30:116 u:3  mov DPTR,#_match_socket+1
dco @30:119 u:2  mov A,#2
dco @30:11b u:1  movx @DPTR,A
dhl 
dhl   match_socket.sack.u+=dlen;
dco @30:11c u:2  mov R6,?state_machine_TCP_dlen
dco @30:11e u:2  mov R7,?state_machine_TCP_dlen+1
dco @30:120 u:2  mov R3,AR7
dco @30:122 u:2  mov R2,AR6
dco @30:124 u:1  clr A
dco @30:125 u:1  mov R1,A
dco @30:126 u:1  mov R0,A
dco @30:127 u:3  mov DPTR,#_match_socket+16
dco @30:12a u:3  lcall __ld_dptr_r47
dco @30:12d u:3  lcall __add_i4
dco @30:130 u:3  mov DPTR,#_match_socket+16
dco @30:133 u:3  lcall __st_dptr_r47
dhl #ifdef PHY_ETH
dhl   Read_Frame_xdata_Phy(rcv_buf,dlen);  // Read Sender's Data, if any as Physical copy
dco @30:136 u:2  mov R4,?state_machine_TCP_dlen
dco @30:138 u:2  mov R5,?state_machine_TCP_dlen+1
dco @30:13a u:2  mov R6,#((_rcv_buf)>>8)&255
dco @30:13c u:2  mov R7,#(_rcv_buf)&255
dco @30:13e u:3  lcall _Read_Frame_xdata_Phy
dhl #else
dhl   rcv_buf=Get_Frame_xdata_pointer();  // Why copy, if it is already there...
dhl #endif
dhl 
dhl 
dhl   rcv_len=dlen;    // remember size of read data...
dco @30:141 u:2  mov R6,?state_machine_TCP_dlen
dco @30:143 u:2  mov R7,?state_machine_TCP_dlen+1
dco @30:145 u:3  mov DPTR,#_rcv_len
dco @30:148 u:3  lcall __st_dptr_r67
dhl 
dhl   // Matching 3 Sockets? -> Clear ALL
dhl   if(match_socket.buf_outsize3 && hframe.tcp_hdr.ack.u==match_socket.sseq_3){
dco @30:14b u:3  mov DPTR,#_match_socket+26
dco @30:14e u:3  lcall __ld_dptr_r67
dco @30:151 u:1  mov A,R6
dco @30:152 u:1  orl A,R7
dco @30:153 u:2  jz ?102
dco @30:155 u:3  mov DPTR,#_match_socket+28
dco @30:158 u:3  lcall __ld_dptr_r03
dco @30:15b u:3  mov DPTR,#_hframe+8
dco @30:15e u:3  lcall __ld_dptr_r47
dco @30:161 u:1  clr C
dco @30:162 u:3  lcall __cmp_i4
dco @30:165 u:2  jnz ?102
dtx 
dco @30:167 u:3  mov DPTR,#_match_socket+32
dco @30:16a u:3  lcall __ld_dptr_r67
dco @30:16d u:3  lcall _free_tx_buf
dhl    //putsl("<M123>");
dhl    free_tx_buf(match_socket.p_outbuf3);   
dhl    free_tx_buf(match_socket.p_outbuf2);   
dco @30:170 u:3  mov DPTR,#_match_socket+40
dco @30:173 u:3  lcall __ld_dptr_r67
dco @30:176 u:3  lcall _free_tx_buf
dhl    free_tx_buf(match_socket.p_outbuf1);   
dco @30:179 u:3  mov DPTR,#_match_socket+48
dco @30:17c u:3  lcall __ld_dptr_r67
dco @30:17f u:3  lcall _free_tx_buf
dhl    match_socket.buf_outsize3=0;
dco @30:182 u:3  mov DPTR,#_match_socket+26
dco @30:185 u:1  clr A
dco @30:186 u:1  movx @DPTR,A
dco @30:187 u:1  inc DPTR
dco @30:188 u:1  movx @DPTR,A
dhl    match_socket.buf_outsize2=0;
dco @30:189 u:3  mov DPTR,#_match_socket+34
dco @30:18c u:1  clr A
dco @30:18d u:1  movx @DPTR,A
dco @30:18e u:1  inc DPTR
dco @30:18f u:1  movx @DPTR,A
dhl    match_socket.buf_outsize1=0;
dco @30:190 u:3  mov DPTR,#_match_socket+42
dco @30:193 u:1  clr A
dco @30:194 u:1  movx @DPTR,A
dco @30:195 u:1  inc DPTR
dco @30:196 u:1  movx @DPTR,A
dhl 
dhl   // Matching Sockets 2 and 1: Free 1,2, Shift 3 to 1
dhl   }else if(match_socket.buf_outsize2 && hframe.tcp_hdr.ack.u==match_socket.sseq_2){
dco @30:197 u:3  ljmp ?103
dtx ?102:
dtx 
dco @30:19a u:3  mov DPTR,#_match_socket+34
dco @30:19d u:3  lcall __ld_dptr_r67
dco @30:1a0 u:1  mov A,R6
dco @30:1a1 u:1  orl A,R7
dco @30:1a2 u:2  jz ?104
dco @30:1a4 u:3  mov DPTR,#_match_socket+36
dco @30:1a7 u:3  lcall __ld_dptr_r03
dco @30:1aa u:3  mov DPTR,#_hframe+8
dco @30:1ad u:3  lcall __ld_dptr_r47
dco @30:1b0 u:1  clr C
dco @30:1b1 u:3  lcall __cmp_i4
dco @30:1b4 u:2  jnz ?104
dtx 
dco @30:1b6 u:3  mov DPTR,#_match_socket+40
dco @30:1b9 u:3  lcall __ld_dptr_r67
dco @30:1bc u:3  lcall _free_tx_buf
dhl    //putsl("<M12>");
dhl    free_tx_buf(match_socket.p_outbuf2);   
dhl    free_tx_buf(match_socket.p_outbuf1);   
dco @30:1bf u:3  mov DPTR,#_match_socket+48
dco @30:1c2 u:3  lcall __ld_dptr_r67
dco @30:1c5 u:3  lcall _free_tx_buf
dhl 
dhl    match_socket.sseq_1=match_socket.sseq_3;
dco @30:1c8 u:3  mov DPTR,#_match_socket+28
dco @30:1cb u:3  lcall __ld_dptr_r47
dco @30:1ce u:3  mov DPTR,#_match_socket+44
dco @30:1d1 u:3  lcall __st_dptr_r47
dhl    match_socket.p_outbuf1=match_socket.p_outbuf3;
dco @30:1d4 u:3  mov DPTR,#_match_socket+32
dco @30:1d7 u:3  lcall __ld_dptr_r67
dco @30:1da u:3  mov DPTR,#_match_socket+48
dco @30:1dd u:3  lcall __st_dptr_r67
dhl    match_socket.buf_outsize1=match_socket.buf_outsize3;
dco @30:1e0 u:3  mov DPTR,#_match_socket+26
dco @30:1e3 u:3  lcall __ld_dptr_r67
dco @30:1e6 u:3  mov DPTR,#_match_socket+42
dco @30:1e9 u:3  lcall __st_dptr_r67
dhl    
dhl    match_socket.buf_outsize2=0;
dco @30:1ec u:3  mov DPTR,#_match_socket+34
dco @30:1ef u:1  clr A
dco @30:1f0 u:1  movx @DPTR,A
dco @30:1f1 u:1  inc DPTR
dco @30:1f2 u:1  movx @DPTR,A
dhl    match_socket.buf_outsize3=0;
dco @30:1f3 u:3  mov DPTR,#_match_socket+26
dco @30:1f6 u:1  clr A
dco @30:1f7 u:1  movx @DPTR,A
dco @30:1f8 u:1  inc DPTR
dco @30:1f9 u:1  movx @DPTR,A
dhl    
dhl   // Matching Sockets 1 Free 1, Shift 2 to 1, 3 to 2
dhl   }else if(match_socket.buf_outsize1 && hframe.tcp_hdr.ack.u==match_socket.sseq_1){
dco @30:1fa u:3  ljmp ?105
dtx ?104:
dtx 
dco @30:1fd u:3  mov DPTR,#_match_socket+42
dco @30:200 u:3  lcall __ld_dptr_r67
dco @30:203 u:1  mov A,R6
dco @30:204 u:1  orl A,R7
dco @30:205 u:2  jz ?106
dco @30:207 u:3  mov DPTR,#_match_socket+44
dco @30:20a u:3  lcall __ld_dptr_r03
dco @30:20d u:3  mov DPTR,#_hframe+8
dco @30:210 u:3  lcall __ld_dptr_r47
dco @30:213 u:1  clr C
dco @30:214 u:3  lcall __cmp_i4
dco @30:217 u:2  jnz ?106
dtx 
dco @30:219 u:3  mov DPTR,#_match_socket+48
dco @30:21c u:3  lcall __ld_dptr_r67
dco @30:21f u:3  lcall _free_tx_buf
dhl    //putsl("<M1>");
dhl    free_tx_buf(match_socket.p_outbuf1);   
dhl 
dhl    match_socket.sseq_1=match_socket.sseq_2;
dco @30:222 u:3  mov DPTR,#_match_socket+36
dco @30:225 u:3  lcall __ld_dptr_r47
dco @30:228 u:3  mov DPTR,#_match_socket+44
dco @30:22b u:3  lcall __st_dptr_r47
dhl    match_socket.p_outbuf1=match_socket.p_outbuf2;
dco @30:22e u:3  mov DPTR,#_match_socket+40
dco @30:231 u:3  lcall __ld_dptr_r67
dco @30:234 u:3  mov DPTR,#_match_socket+48
dco @30:237 u:3  lcall __st_dptr_r67
dhl    match_socket.buf_outsize1=match_socket.buf_outsize2;
dco @30:23a u:3  mov DPTR,#_match_socket+34
dco @30:23d u:3  lcall __ld_dptr_r67
dco @30:240 u:3  mov DPTR,#_match_socket+42
dco @30:243 u:3  lcall __st_dptr_r67
dhl 
dhl    match_socket.sseq_2=match_socket.sseq_3;
dco @30:246 u:3  mov DPTR,#_match_socket+28
dco @30:249 u:3  lcall __ld_dptr_r47
dco @30:24c u:3  mov DPTR,#_match_socket+36
dco @30:24f u:3  lcall __st_dptr_r47
dhl    match_socket.p_outbuf2=match_socket.p_outbuf3;
dco @30:252 u:3  mov DPTR,#_match_socket+32
dco @30:255 u:3  lcall __ld_dptr_r67
dco @30:258 u:3  mov DPTR,#_match_socket+40
dco @30:25b u:3  lcall __st_dptr_r67
dhl    match_socket.buf_outsize2=match_socket.buf_outsize3;
dco @30:25e u:3  mov DPTR,#_match_socket+26
dco @30:261 u:3  lcall __ld_dptr_r67
dco @30:264 u:3  mov DPTR,#_match_socket+34
dco @30:267 u:3  lcall __st_dptr_r67
dhl    
dhl    match_socket.buf_outsize3=0;
dco @30:26a u:3  mov DPTR,#_match_socket+26
dco @30:26d u:1  clr A
dco @30:26e u:1  movx @DPTR,A
dco @30:26f u:1  inc DPTR
dco @30:270 u:1  movx @DPTR,A
dhl    
dhl   }
dtx ?106:
dtx ?105:
dtx ?103:
dhl 
dhl 
dhl   // Frame does not contain a TFIN so simply acknowledge it, if data od SYN received
dhl   if(!(hframe.tcp_hdr.flags&TFIN)){
dco @30:271 u:3  mov DPTR,#_hframe+13
dco @30:274 u:1  movx A,@DPTR
dco @30:275 u:1  mov R7,A
dco @30:276 u:2  anl A,#1
dco @30:278 u:1  mov R7,A
dco @30:279 u:2  jnz ?108
dtx 
dco @30:27b u:2  mov A,?state_machine_TCP_dlen
dco @30:27d u:2  orl A,?state_machine_TCP_dlen+1
dco @30:27f u:2  jnz ?112
dco @30:281 u:3  mov DPTR,#_hframe+13
dco @30:284 u:1  movx A,@DPTR
dco @30:285 u:1  mov R7,A
dco @30:286 u:2  anl A,#2
dco @30:288 u:1  mov R7,A
dco @30:289 u:2  jnz ?_53
dco @30:28b u:3  ljmp ?109
dtx ?_53:
dtx ?112:
dhl    if(dlen || (hframe.tcp_hdr.flags&TSYN)) send_match_ok_TCP(0,0,TACK); // Frame OK: Acknowledge immed
dco @30:28e u:2  mov R3,#16
dco @30:290 u:1  clr A
dco @30:291 u:1  mov R4,A
dco @30:292 u:1  mov R5,A
dco @30:293 u:1  clr A
dco @30:294 u:1  mov R6,A
dco @30:295 u:1  mov R7,A
dco @30:296 u:3  lcall _send_match_ok_TCP
dhl   }else if(hframe.tcp_hdr.flags&TFIN){ // Come to here if RST and/or received
dco @30:299 u:2  sjmp ?109
dtx ?108:
dtx 
dco @30:29b u:3  mov DPTR,#_hframe+13
dco @30:29e u:1  movx A,@DPTR
dco @30:29f u:1  mov R7,A
dco @30:2a0 u:2  anl A,#1
dco @30:2a2 u:1  mov R7,A
dco @30:2a3 u:2  jz ?113
dtx 
dco @30:2a5 u:1  clr A
dco @30:2a6 u:1  mov R0,A
dco @30:2a7 u:1  mov R1,A
dco @30:2a8 u:1  mov R2,A
dco @30:2a9 u:2  mov R3,#1
dco @30:2ab u:3  mov DPTR,#_match_socket+16
dco @30:2ae u:3  lcall __ld_dptr_r47
dco @30:2b1 u:3  lcall __add_i4
dco @30:2b4 u:3  mov DPTR,#_match_socket+16
dco @30:2b7 u:3  lcall __st_dptr_r47
dhl    match_socket.sack.u++;  // Count remote FIN
dhl    send_match_ok_TCP(0,0,TACK+TFIN+TPUSH); // Acknowledge + FIN
dco @30:2ba u:2  mov R3,#25
dco @30:2bc u:1  clr A
dco @30:2bd u:1  mov R4,A
dco @30:2be u:1  mov R5,A
dco @30:2bf u:1  clr A
dco @30:2c0 u:1  mov R6,A
dco @30:2c1 u:1  mov R7,A
dco @30:2c2 u:3  lcall _send_match_ok_TCP
dhl    match_socket.sseq.u++;  // Count our FIN after sending!...
dco @30:2c5 u:1  clr A
dco @30:2c6 u:1  mov R0,A
dco @30:2c7 u:1  mov R1,A
dco @30:2c8 u:1  mov R2,A
dco @30:2c9 u:2  mov R3,#1
dco @30:2cb u:3  mov DPTR,#_match_socket+20
dco @30:2ce u:3  lcall __ld_dptr_r47
dco @30:2d1 u:3  lcall __add_i4
dco @30:2d4 u:3  mov DPTR,#_match_socket+20
dco @30:2d7 u:3  lcall __st_dptr_r47
dhl    match_socket.state=TCP_FINCON; // FIN Confirmed
dco @30:2da u:3  mov DPTR,#_match_socket+1
dco @30:2dd u:2  mov A,#4
dco @30:2df u:1  movx @DPTR,A
dhl   }  
dtx ?113:
dtx ?109:
dhl 
dhl   // Only if nothing available reset retry_counter...
dhl   if(!match_socket.buf_outsize1) match_socket.retry_cnt=0;
dco @30:2e0 u:3  mov DPTR,#_match_socket+42
dco @30:2e3 u:3  lcall __ld_dptr_r67
dco @30:2e6 u:1  mov A,R6
dco @30:2e7 u:1  orl A,R7
dco @30:2e8 u:2  jnz ?115
dtx 
dco @30:2ea u:3  mov DPTR,#_match_socket+24
dco @30:2ed u:1  clr A
dco @30:2ee u:1  movx @DPTR,A
dtx ?115:
dhl   return EVENT_TCP_DATARECEIVED;
dco @30:2ef u:2  mov R6,#245
dco @30:2f1 u:2  mov R7,#0
dco @30:2f3 u:3  ljmp ?86
dtx ?117:
dhl 
dhl  case TCP_FINSENT:
dhl   //puts("<FINSENT>");
dhl   if(!(hframe.tcp_hdr.flags&TACK)) break;
dco @30:2f6 u:3  mov DPTR,#_hframe+13
dco @30:2f9 u:1  movx A,@DPTR
dco @30:2fa u:1  mov R7,A
dco @30:2fb u:2  anl A,#16
dco @30:2fd u:1  mov R7,A
dco @30:2fe u:2  jnz ?118
dtx 
dco @30:300 u:3  ljmp ?90
dtx ?118:
dhl   // printf("Flags: %u\n",hframe.tcp_hdr.flags);
dhl   // printf("<<M:%ld H:%lx >>",match_socket.sack.u,hframe.tcp_hdr.seq.u);
dhl   if(match_socket.sack.u!=hframe.tcp_hdr.seq.u) return EVENT_TCP_OUTOFBOUNDS; // Ignore-out-of-bounds 
dco @30:303 u:3  mov DPTR,#_hframe+4
dco @30:306 u:3  lcall __ld_dptr_r03
dco @30:309 u:3  mov DPTR,#_match_socket+16
dco @30:30c u:3  lcall __ld_dptr_r47
dco @30:30f u:1  clr C
dco @30:310 u:3  lcall __cmp_i4
dco @30:313 u:2  jz ?120
dtx 
dco @30:315 u:2  mov R6,#243
dco @30:317 u:2  mov R7,#0
dco @30:319 u:3  ljmp ?86
dtx ?120:
dhl   //puts("<Wait3LASTACK>");
dhl   if(hframe.tcp_hdr.flags&TFIN){    // Fin accepted by Remote!
dco @30:31c u:3  mov DPTR,#_hframe+13
dco @30:31f u:1  movx A,@DPTR
dco @30:320 u:1  mov R7,A
dco @30:321 u:2  anl A,#1
dco @30:323 u:1  mov R7,A
dco @30:324 u:2  jz ?122
dtx 
dco @30:326 u:1  clr A
dco @30:327 u:1  mov R0,A
dco @30:328 u:1  mov R1,A
dco @30:329 u:1  mov R2,A
dco @30:32a u:2  mov R3,#1
dco @30:32c u:3  mov DPTR,#_match_socket+16
dco @30:32f u:3  lcall __ld_dptr_r47
dco @30:332 u:3  lcall __add_i4
dco @30:335 u:3  mov DPTR,#_match_socket+16
dco @30:338 u:3  lcall __st_dptr_r47
dhl    match_socket.sack.u++;    // Count remote FIN
dhl    send_match_ok_TCP(0,0,TACK);   // Frame OK: Acknowledge immediatelly!
dco @30:33b u:2  mov R3,#16
dco @30:33d u:1  clr A
dco @30:33e u:1  mov R4,A
dco @30:33f u:1  mov R5,A
dco @30:340 u:1  clr A
dco @30:341 u:1  mov R6,A
dco @30:342 u:1  mov R7,A
dco @30:343 u:3  lcall _send_match_ok_TCP
dhl    free_match_socket(); // Free Buffers if allocated... 
dco @30:346 u:3  lcall _free_match_socket
dhl    match_socket.state=TCP_CLOSED;  // Connection ends NOW
dco @30:349 u:3  mov DPTR,#_match_socket+1
dco @30:34c u:1  clr A
dco @30:34d u:1  movx @DPTR,A
dhl    //puts("<FINAL ACK SENT CLOSED>");
dhl   }
dtx ?122:
dhl   match_socket.retry_cnt=0;
dco @30:34e u:3  mov DPTR,#_match_socket+24
dco @30:351 u:1  clr A
dco @30:352 u:1  movx @DPTR,A
dhl   return EVENT_TCP_WAITLASTACK;
dco @30:353 u:2  mov R6,#251
dco @30:355 u:2  mov R7,#0
dco @30:357 u:3  ljmp ?86
dtx ?124:
dhl     
dhl  case TCP_FINCON: // Accept one last ACK
dhl   if(!(hframe.tcp_hdr.flags&TACK)) break;
dco @30:35a u:3  mov DPTR,#_hframe+13
dco @30:35d u:1  movx A,@DPTR
dco @30:35e u:1  mov R7,A
dco @30:35f u:2  anl A,#16
dco @30:361 u:1  mov R7,A
dtx 
dco @30:362 u:2  jz ?90
dhl   if(match_socket.sack.u!=hframe.tcp_hdr.seq.u) return EVENT_TCP_OUTOFBOUNDS; // Ignore-out-of-bounds 
dco @30:364 u:3  mov DPTR,#_hframe+4
dco @30:367 u:3  lcall __ld_dptr_r03
dco @30:36a u:3  mov DPTR,#_match_socket+16
dco @30:36d u:3  lcall __ld_dptr_r47
dco @30:370 u:1  clr C
dco @30:371 u:3  lcall __cmp_i4
dco @30:374 u:2  jz ?127
dtx 
dco @30:376 u:2  mov R6,#243
dco @30:378 u:2  mov R7,#0
dco @30:37a u:2  sjmp ?86
dtx ?127:
dhl  
dhl   match_socket.state=TCP_CLOSED;  // Connection ends NOW
dco @30:37c u:3  mov DPTR,#_match_socket+1
dco @30:37f u:1  clr A
dco @30:380 u:1  movx @DPTR,A
dhl   free_match_socket(); // Free Buffers if allocated... 
dco @30:381 u:3  lcall _free_match_socket
dhl   // puts("<LAST FIN ACKNOWLEDGED>");
dhl   match_socket.retry_cnt=0;
dco @30:384 u:3  mov DPTR,#_match_socket+24
dco @30:387 u:1  clr A
dco @30:388 u:1  movx @DPTR,A
dhl   return EVENT_TCP_CLOSED;      
dco @30:389 u:2  mov R6,#252
dco @30:38b u:2  mov R7,#0
dco @30:38d u:2  sjmp ?86
dtx ?89:
dtx ?90:
dhl  }
dhl 
dhl  free_match_socket(); // Free Buffers if allocated... 
dco @30:38f u:3  lcall _free_match_socket
dhl  match_socket.state=TCP_CLOSED;
dco @30:392 u:3  mov DPTR,#_match_socket+1
dco @30:395 u:1  clr A
dco @30:396 u:1  movx @DPTR,A
dhl #ifdef PHY_ETH
dhl  send_incomming_reset_TCP(dlen,&remote_mac,remote_ip.ipl);  // Denie further request!
dco @30:397 u:3  mov DPTR,#_remote_ip
dco @30:39a u:3  lcall __ld_dptr_r03
dco @30:39d u:2  mov R4,#((_remote_mac)>>8)&255
dco @30:39f u:2  mov R5,#(_remote_mac)&255
dco @30:3a1 u:2  mov R6,?state_machine_TCP_dlen
dco @30:3a3 u:2  mov R7,?state_machine_TCP_dlen+1
dco @30:3a5 u:3  lcall _send_incomming_reset_TCP
dhl #else
dhl  send_incomming_reset_TCP(dlen,remote_ip.ipl);  // Denie further request!
dhl #endif
dhl 
dhl  return EVENT_TCP_ILLEGALFRAME; // Denie illegal frames;
dco @30:3a8 u:2  mov R6,#248
dco @30:3aa u:2  mov R7,#0
dtx ?86:
dco @30:3ac u:1  ret
dtx ?i129: ; void (*code [5])()
dco @30:3ad u:2  .dc.w ?92
dco @30:3af u:2  .dc.w ?95
dco @30:3b1 u:2  .dc.w ?95
dco @30:3b3 u:2  .dc.w ?117
dco @30:3b5 u:2  .dc.w ?124
dtx ; end of function state_machine_TCP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
dtx 
dtx  .export _final_timeout_socket ; unsigned int final_timeout_socket(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __final_timeout_socket
dtx _final_timeout_socket: ; unsigned int final_timeout_socket(void)
dhl }
dhl 
dhl /**********************************************************************************
dhl * uint final_timeout_socket();
dhl *
dhl * Socket has definitely timed out. Free it for other users...
dhl **********************************************************************************/
dhl uint final_timeout_socket(void){
dco @33:0 u:3  mov DPTR,#_match_socket
dco @33:3 u:1  movx A,@DPTR
dco @33:4 u:1  mov R7,A
dco @33:5 u:3  cjne R7,#2,?131
dhl 
dhl  //printf("TIMEOUT match_socket_type: %u\n",match_socket.socket_type);
dhl  if(match_socket.socket_type==SOCKET_TCP){
dco @33:8 u:2  mov R3,#4
dco @33:a u:1  clr A
dco @33:b u:1  mov R4,A
dco @33:c u:1  mov R5,A
dco @33:d u:1  clr A
dco @33:e u:1  mov R6,A
dco @33:f u:1  mov R7,A
dco @33:10 u:3  lcall _send_match_ok_TCP
dhl #ifdef USE_TCP_CLIENT
dhl      if(match_socket.state<ARPSENT) 
dhl #endif
dhl   send_match_ok_TCP(0,0,TRST); // Reset this socket!
dhl   free_match_socket(); // Free Buffers if allocated... 
dco @33:13 u:3  lcall _free_match_socket
dhl   //puts("<TIMEOUT RESET>");
dhl   match_socket.state=TCP_CLOSED;  // ==0 (for UDP as well)
dco @33:16 u:3  mov DPTR,#_match_socket+1
dco @33:19 u:1  clr A
dco @33:1a u:1  movx @DPTR,A
dhl   return EVENT_TCP_TIMEOUT;
dco @33:1b u:2  mov R6,#250
dco @33:1d u:2  mov R7,#0
dco @33:1f u:2  sjmp ?130
dtx ?131:
dhl  }
dhl  match_socket.state=0;  // ==0 (for UDP as well, but no action required)
dco @33:21 u:3  mov DPTR,#_match_socket+1
dco @33:24 u:1  clr A
dco @33:25 u:1  movx @DPTR,A
dhl  return EVENT_SOCKET_TIMEOUT;
dco @33:26 u:2  mov R6,#208
dco @33:28 u:2  mov R7,#0
dtx ?130:
dco @33:2a u:1  ret
dtx ; end of function final_timeout_socket
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .export _retransmit_socket ; unsigned int retransmit_socket(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __retransmit_socket
dtx _retransmit_socket: ; unsigned int retransmit_socket(void)
dhl }
dhl 
dhl /**********************************************************************************
dhl * uint retransmit_socket();
dhl *
dhl * Socket requires a retransmition
dhl **********************************************************************************/
dhl uint retransmit_socket(void){
dco @36:0 u:3  mov DPTR,#_match_socket
dco @36:3 u:1  movx A,@DPTR
dco @36:4 u:1  mov R7,A
dco @36:5 u:3  cjne R7,#2,?_63
dco @36:8 u:2  sjmp ?_64
dtx ?_63:
dco @36:a u:3  ljmp ?134
dtx ?_64:
dhl  unsigned long hseq;
dhl 
dhl  // printf(" >>--RE-TX:%u>>",match_socket.sremote_port);
dhl 
dhl  if(match_socket.socket_type==SOCKET_TCP){
dco @36:d u:3  mov DPTR,#_match_socket+1
dco @36:10 u:1  movx A,@DPTR
dco @36:11 u:1  mov R5,A
dco @36:12 u:2  mov R7,#1
dco @36:14 u:1  clr C
dco @36:15 u:1  mov A,R5
dco @36:16 u:1  subb A,R7
dco @36:17 u:2  jnc ?_65
dco @36:19 u:3  ljmp ?135
dtx ?_65:
dco @36:1c u:2  mov R7,#4
dco @36:1e u:1  setb C
dco @36:1f u:1  mov A,R5
dco @36:20 u:1  subb A,R7
dco @36:21 u:2  jc ?_66
dco @36:23 u:3  ljmp ?135
dtx ?_66:
dco @36:26 u:3  mov DPTR,#?i144-2
dco @36:29 u:1  mov A,R5
dco @36:2a u:1  add A,R5
dco @36:2b u:2  jnc ?_67
dco @36:2d u:2  inc DPH
dtx ?_67:
dco @36:2f u:2  add A,DPL
dco @36:31 u:2  mov DPL,A
dco @36:33 u:2  jnc ?_68
dco @36:35 u:2  inc DPH
dtx ?_68:
dco @36:37 u:2  mov A,#1
dco @36:39 u:1  movc A,@A+DPTR
dco @36:3a u:2  push ACC
dco @36:3c u:1  clr A
dco @36:3d u:1  movc A,@A+DPTR
dco @36:3e u:2  push ACC
dco @36:40 u:1  ret
dhl   switch(match_socket.state){
dtx ?139:
dhl   case TCP_SYNCON:    // Timeout after SYN-confirmed->Transmit Confirmation again
dhl    send_match_ok_TCP(0,0,TSYN+TACK); // Transmit Again
dco @36:41 u:2  mov R3,#18
dco @36:43 u:1  clr A
dco @36:44 u:1  mov R4,A
dco @36:45 u:1  mov R5,A
dco @36:46 u:1  clr A
dco @36:47 u:1  mov R6,A
dco @36:48 u:1  mov R7,A
dco @36:49 u:3  lcall _send_match_ok_TCP
dhl    // puts("<TCP RETRANSMIT TSYN+TACK>");
dhl    return EVENT_TCP_RETRANS;
dco @36:4c u:2  mov R6,#241
dco @36:4e u:2  mov R7,#0
dco @36:50 u:3  ljmp ?133
dtx ?140:
dhl 
dhl   case TCP_EST:     // Timeout in an established Connection
dhl 
dhl    if(match_socket.buf_outsize1){  // Something un-acknowledged?
dco @36:53 u:3  mov DPTR,#_match_socket+42
dco @36:56 u:3  lcall __ld_dptr_r67
dco @36:59 u:1  mov A,R6
dco @36:5a u:1  orl A,R7
dco @36:5b u:2  jz ?141
dtx  ; variable 'hseq' allocated as 'auto'
dtx 
dco @36:5d u:3  mov DPTR,#_match_socket+20
dco @36:60 u:1  movx A,@DPTR
dco @36:61 u:2  mov ?retransmit_socket_hseq,A
dco @36:63 u:1  inc DPTR
dco @36:64 u:1  movx A,@DPTR
dco @36:65 u:2  mov ?retransmit_socket_hseq+1,A
dco @36:67 u:1  inc DPTR
dco @36:68 u:1  movx A,@DPTR
dco @36:69 u:2  mov ?retransmit_socket_hseq+2,A
dco @36:6b u:1  inc DPTR
dco @36:6c u:1  movx A,@DPTR
dco @36:6d u:2  mov ?retransmit_socket_hseq+3,A
dhl     //puts("<TCP RETRANSMIT EST>");
dhl     // Seq. represents the sent data, so for resend subtract the block from seq, afterwards ad it...
dhl     hseq=match_socket.sseq.u; // Save current Sequ (Pos.)
dhl     // Rewind to Pos. before BUF1 was sent
dhl 
dhl     match_socket.sseq.u=match_socket.sseq_1-match_socket.buf_outsize1; // 32 Bit operation - This must
dco @36:6f u:3  mov DPTR,#_match_socket+42
dco @36:72 u:3  lcall __ld_dptr_r67
dco @36:75 u:2  mov R3,AR7
dco @36:77 u:2  mov R2,AR6
dco @36:79 u:1  clr A
dco @36:7a u:1  mov R1,A
dco @36:7b u:1  mov R0,A
dco @36:7c u:3  mov DPTR,#_match_socket+44
dco @36:7f u:3  lcall __ld_dptr_r47
dco @36:82 u:3  lcall __sub_i4
dco @36:85 u:3  mov DPTR,#_match_socket+20
dco @36:88 u:3  lcall __st_dptr_r47
dhl     send_match_ok_TCP(match_socket.p_outbuf1,match_socket.buf_outsize1,TACK+TPUSH);
dco @36:8b u:2  mov R3,#24
dco @36:8d u:3  mov DPTR,#_match_socket+42
dco @36:90 u:3  lcall __ld_dptr_r45
dco @36:93 u:3  mov DPTR,#_match_socket+48
dco @36:96 u:3  lcall __ld_dptr_r67
dco @36:99 u:3  lcall _send_match_ok_TCP
dhl     match_socket.sseq.u=hseq;  // Restore old Pointer
dco @36:9c u:2  mov A,#?retransmit_socket_hseq
dco @36:9e u:3  lcall __ld_a_r47
dco @36:a1 u:3  mov DPTR,#_match_socket+20
dco @36:a4 u:3  lcall __st_dptr_r47
dhl     return EVENT_TCP_RETRANS;
dco @36:a7 u:2  mov R6,#241
dco @36:a9 u:2  mov R7,#0
dco @36:ab u:3  ljmp ?133
dtx ?141:
dhl    }
dhl 
dhl    // For an active socket, send *live signal'
dhl #ifdef USE_TCP_CLIENT
dhl    if(match_socket.tcp_client_flag){
dhl         send_match_ok_TCP(0,0,TACK+TPUSH);
dhl putsl("<IR>");
dhl    }
dhl #endif
dhl 
dhl    // puts("<TCP RT IDLE IDLE>"); 
dhl    // Stack is idle: All ok
dhl    match_socket.timer=TCP_IDLE_RETRIES;  // Socket OK, LONG TIMEOUT!!!
dco @36:ae u:3  mov DPTR,#_match_socket+25
dco @36:b1 u:2  mov A,#40
dco @36:b3 u:1  movx @DPTR,A
dhl 
dhl    return 0;
dco @36:b4 u:1  clr A
dco @36:b5 u:1  mov R6,A
dco @36:b6 u:1  mov R7,A
dco @36:b7 u:3  ljmp ?133
dtx ?143:
dhl 
dhl   case TCP_FINCON:
dhl   case TCP_FINSENT:
dhl    send_match_ok_TCP(0,0,TFIN+TACK+TPUSH); // Transmit, without any data after FIN_CON...
dco @36:ba u:2  mov R3,#25
dco @36:bc u:1  clr A
dco @36:bd u:1  mov R4,A
dco @36:be u:1  mov R5,A
dco @36:bf u:1  clr A
dco @36:c0 u:1  mov R6,A
dco @36:c1 u:1  mov R7,A
dco @36:c2 u:3  lcall _send_match_ok_TCP
dhl    // puts("<TCP FIN RETRANSMIT>");
dhl    return EVENT_TCP_RETRANS;
dco @36:c5 u:2  mov R6,#241
dco @36:c7 u:2  mov R7,#0
dco @36:c9 u:2  sjmp ?133
dhl    
dhl #ifdef USE_TCP_CLIENT
dhl #ifdef PHY_ETH
dhl   case ARPSENT:
dhl    send_request_ARP(match_socket.sremote_ip);
dhl    // puts("<(TCP) ARP RETRANSMIT>");
dhl    return EVENT_TCP_RETRANS;
dhl 
dhl   case ARPREC:
dhl    // puts("<(TCP) ARP-REQUEST RECEIVED!!!>");
dhl 
dhl    // Ports already setup!
dhl    match_socket.sseq.w.h_word=net_service_cnt;   // Time ascending...
dhl    match_socket.sseq.w.l_word=0;    // Our relative Pointer (for HTTP, -1 due to SYNC)
dhl    match_socket.state=TCP_SYNSENT;  // SYN confirmed with SYN+ACK
dhl #endif // PHY_ETH
dhl 
dhl   case TCP_SYNSENT:
dhl    send_match_ok_TCP(0,0,TSYN); // Initiate Connection with a SYN
dhl    // puts("<ACTIVE SYN SENT>");
dhl    return 0; // Only 1 Try, No Retransmition!
dhl #endif   
dhl   }
dhl  }
dtx ?134:
dhl 
dhl #ifdef USE_UDP_CLIENT
dhl #ifdef PHY_ETH
dhl      else if(match_socket.socket_type==SOCKET_UDP){
dco @36:cb u:3  mov DPTR,#_match_socket
dco @36:ce u:1  movx A,@DPTR
dco @36:cf u:1  mov R7,A
dco @36:d0 u:3  cjne R7,#1,?145
dtx 
dco @36:d3 u:3  mov DPTR,#_match_socket+1
dco @36:d6 u:1  movx A,@DPTR
dco @36:d7 u:1  mov R7,A
dco @36:d8 u:2  xrl A,#6
dhl          switch(match_socket.state){
dco @36:da u:2  jnz ?147
dhl         case ARPSENT:
dhl             send_request_ARP(match_socket.sremote_ip);
dco @36:dc u:3  mov DPTR,#_match_socket+8
dco @36:df u:3  lcall __ld_dptr_r47
dco @36:e2 u:3  lcall _send_request_ARP
dhl             // puts("<(UDP) ARP RETRANSMIT>");
dhl             return EVENT_UDP_ARPRETRANS;
dco @36:e5 u:2  mov R6,#227
dco @36:e7 u:2  mov R7,#0
dco @36:e9 u:2  sjmp ?133
dtx ?147:
dhl 
dhl         default:
dhl             // puts("<(UDP) TIMEOUT with ARP-REQUEST RECEIVED!!!>");
dhl 
dhl             match_socket.retry_cnt=0;                   // MUST be UDP_EST ( == ARPREC) Never close an
dco @36:eb u:3  mov DPTR,#_match_socket+24
dco @36:ee u:1  clr A
dco @36:ef u:1  movx @DPTR,A
dhl             match_socket.timer=UDP_IDLE_RETRIES;        // Socket OK, LONG TIMEOUT!!! No change in sta
dco @36:f0 u:3  mov DPTR,#_match_socket+25
dco @36:f3 u:2  mov A,#40
dco @36:f5 u:1  movx @DPTR,A
dhl             return 0;
dco @36:f6 u:1  clr A
dco @36:f7 u:1  mov R6,A
dco @36:f8 u:1  mov R7,A
dco @36:f9 u:2  sjmp ?133
dtx ?145:
dtx ?135:
dhl          }
dhl     }
dhl #endif
dhl #endif
dhl 
dhl 
dhl  return EVENT_SOCKET_RETRANS;
dco @36:fb u:2  mov R6,#209
dco @36:fd u:2  mov R7,#0
dtx ?133:
dco @36:ff u:1  ret
dtx ?i144: ; void (*code [4])()
dco @36:100 u:2  .dc.w ?139
dco @36:102 u:2  .dc.w ?140
dco @36:104 u:2  .dc.w ?143
dco @36:106 u:2  .dc.w ?143
dtx ; end of function retransmit_socket
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:4 bytes
dtx 
dtx  .export _periodical_socket ; unsigned int periodical_socket(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __periodical_socket
dtx _periodical_socket: ; unsigned int periodical_socket(void)
dhl }
dhl 
dhl /**********************************************************************************
dhl * uint periodical_socket();
dhl *
dhl * Watch non-0-state sockets periodically every 0.5 secs...
dhl **********************************************************************************/
dhl uint periodical_socket(void){
dco @39:0 u:3  mov DPTR,#_match_socket+25
dco @39:3 u:1  movx A,@DPTR
dco @39:4 u:1  mov R7,A
dco @39:5 u:1  dec R7
dtx  ; variable 'h' assigned to register 'R7'
dhl  uchar h;
dhl  // First decrement sub-timer. If no 0: No Action required
dhl 
dhl  h=match_socket.timer-1;
dhl  if(h){
dco @39:6 u:1  mov A,R7
dco @39:7 u:2  jz ?152
dtx 
dco @39:9 u:3  mov DPTR,#_match_socket+25
dco @39:c u:1  mov A,R7
dco @39:d u:1  movx @DPTR,A
dhl   match_socket.timer=h;
dhl   return 0;
dco @39:e u:1  clr A
dco @39:f u:1  mov R6,A
dco @39:10 u:1  mov R7,A
dco @39:11 u:2  sjmp ?151
dtx ?152:
dhl  }
dhl 
dhl 
dhl  match_socket.timer=BASIC_RETRY_TIMER;
dco @39:13 u:3  mov DPTR,#_match_socket+25
dco @39:16 u:2  mov A,#6
dco @39:18 u:1  movx @DPTR,A
dhl  h=match_socket.retry_cnt+1;
dco @39:19 u:3  mov DPTR,#_match_socket+24
dco @39:1c u:1  movx A,@DPTR
dco @39:1d u:1  mov R7,A
dco @39:1e u:1  inc R7
dtx  ; variable 'h' allocated as 'auto'
dco @39:1f u:2  mov ?i156,R7
dhl  if(h==MAX_RETRIES){
dco @39:21 u:2  mov A,#4
dco @39:23 u:2  xrl A,?i156
dco @39:25 u:2  jnz ?154
dtx 
dco @39:27 u:3  lcall _final_timeout_socket
dco @39:2a u:2  sjmp ?151
dtx ?154:
dhl   return final_timeout_socket();
dhl  }else{
dco @39:2c u:2  mov R7,?i156
dco @39:2e u:3  mov DPTR,#_match_socket+24
dco @39:31 u:1  mov A,R7
dco @39:32 u:1  movx @DPTR,A
dhl   match_socket.retry_cnt=h; // Retry again...
dhl   return retransmit_socket();
dco @39:33 u:3  lcall _retransmit_socket
dtx ?151:
dco @39:36 u:1  ret
dtx ; end of function periodical_socket
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:1 bytes
dtx 
dtx  .export _process_TCP ; unsigned int process_TCP(unsigned int)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __process_TCP
dtx _process_TCP: ; unsigned int process_TCP(unsigned int)
dtx  ; parameter 'dlen' in 'RW67' moved and assigned to local '?process_TCP_dlen'
dco @3d:0 u:2  mov ?process_TCP_dlen,R6
dco @3d:2 u:2  mov ?process_TCP_dlen+1,R7
dhl  }
dhl }
dhl 
dhl /**********************************************************************************
dhl * void process_TCP(void)
dhl * 
dhl * 3.rd-Level-Multiplexer
dhl * A note for reading UDP-Datagrams: if Size is odd, last byte is in the
dhl * HBYTE of the last Read_Frame_word_Phy()...
dhl * Usually a TCP-frame will never come as broadcast, so treat each as more
dhl * important than other types...
dhl **********************************************************************************/
dhl uint process_TCP(uint dlen){
dco @3d:4 u:2  mov R4,#0
dco @3d:6 u:2  mov R5,#20
dco @3d:8 u:2  mov R6,#((_hframe)>>8)&255
dco @3d:a u:2  mov R7,#(_hframe)&255
dco @3d:c u:3  lcall _Read_Frame_xdata_Phy
dtx  ; variable 'dlen' allocated as 'auto'
dhl      xdata UC_SOCKET *psock;
dhl      uchar ui;
dhl  uchar ohlen;
dhl      uint res;
dhl 
dhl  Read_Frame_xdata_Phy(hframe.bytes,20); // Read informative part of TCP header to HFRAME
dhl 
dhl 
dhl  dlen-=20;    // 
dco @3d:f u:2  mov A,#236
dco @3d:11 u:2  add A,?process_TCP_dlen+1
dco @3d:13 u:2  mov ?i185+1,A
dco @3d:15 u:2  mov A,#255
dco @3d:17 u:2  addc A,?process_TCP_dlen
dco @3d:19 u:2  mov ?i185,A
dhl 
dhl  ohlen=hframe.tcp_hdr.hlen-80;
dco @3d:1b u:3  mov DPTR,#_hframe+12
dco @3d:1e u:1  movx A,@DPTR
dco @3d:1f u:1  mov R7,A
dco @3d:20 u:2  mov A,#176
dco @3d:22 u:1  add A,R7
dco @3d:23 u:1  mov R7,A
dtx  ; variable 'ohlen' allocated as 'auto'
dco @3d:24 u:2  mov ?process_TCP_ohlen,R7
dco @3d:26 u:2  sjmp ?159
dtx ?158:
dhl  while(ohlen){  // Eat TCP-option, if MSS: ignore silently...
dco @3d:28 u:2  mov A,#-16
dco @3d:2a u:2  add A,?process_TCP_ohlen
dco @3d:2c u:2  mov ?process_TCP_ohlen,A
dhl   ohlen-=16; // ohlen = size in 32-bit-word<<4
dhl   dlen-=4;
dco @3d:2e u:2  mov A,#252
dco @3d:30 u:2  add A,?i185+1
dco @3d:32 u:2  mov ?i185+1,A
dco @3d:34 u:2  mov A,#255
dco @3d:36 u:2  addc A,?i185
dco @3d:38 u:2  mov ?i185,A
dhl   Read_Frame_long_Phy(); 
dco @3d:3a u:3  lcall _Read_Frame_long_Phy
dhl  }
dtx ?159:
dtx 
dco @3d:3d u:2  mov A,?process_TCP_ohlen
dco @3d:3f u:2  jnz ?158
dtx  ; variable 'psock' allocated as 'auto'
dhl 
dhl #ifdef DEBUG_REC
dhl     // Record Data of received Frame
dhl     record_frame('R',hframe.tcp_hdr.sport,hframe.tcp_hdr.seq.u,hframe.tcp_hdr.ack.u, hframe.tcp_hdr.fl
dhl #endif
dhl 
dhl  // First try: Find any MATCHING socket. If one found, copy and process it...
dhl      // This will also find a closed socket for a ACK-FIN->ACK-retransmition...
dhl      psock=uc_socket;
dco @3d:41 u:3  mov ?process_TCP_psock,#((_uc_socket)>>8)&255
dco @3d:44 u:3  mov ?process_TCP_psock+1,#(_uc_socket)&255
dtx  ; variable 'ui' allocated as 'auto'
dhl      for(ui=0;ui<MAX_SOCK;ui++,psock++){
dco @3d:47 u:1  clr A
dco @3d:48 u:2  mov ?process_TCP_ui,A
dtx ?161:
dtx 
dco @3d:4a u:3  mov DPH,?process_TCP_psock
dco @3d:4d u:3  mov DPL,?process_TCP_psock+1
dco @3d:50 u:1  movx A,@DPTR
dco @3d:51 u:1  mov R7,A
dco @3d:52 u:3  cjne R7,#2,?_76
dco @3d:55 u:2  sjmp ?_77
dtx ?_76:
dco @3d:57 u:3  ljmp ?165
dtx ?_77:
dhl          if(psock->socket_type==SOCKET_TCP){  // Only TCP-Sockets are of interest
dco @3d:5a u:2  mov R6,?process_TCP_psock
dco @3d:5c u:2  mov R7,?process_TCP_psock+1
dco @3d:5e u:2  mov A,#8
dco @3d:60 u:1  add A,R7
dco @3d:61 u:1  mov R7,A
dco @3d:62 u:1  clr A
dco @3d:63 u:1  addc A,R6
dco @3d:64 u:1  mov R6,A
dco @3d:65 u:2  mov DPH,R6
dco @3d:67 u:2  mov DPL,R7
dco @3d:69 u:3  lcall __ld_dptr_r47
dco @3d:6c u:3  mov DPTR,#_remote_ip
dco @3d:6f u:3  lcall __ld_dptr_r03
dco @3d:72 u:1  clr C
dco @3d:73 u:3  lcall __cmp_i4
dco @3d:76 u:2  jz ?_78
dco @3d:78 u:3  ljmp ?167
dtx ?_78:
dhl               // Test Remote IP-Match-Match,remote port and local port
dhl               if(psock->sremote_ip==remote_ip.ipl){
dco @3d:7b u:2  mov R6,?process_TCP_psock
dco @3d:7d u:2  mov R7,?process_TCP_psock+1
dco @3d:7f u:2  mov A,#12
dco @3d:81 u:1  add A,R7
dco @3d:82 u:1  mov R7,A
dco @3d:83 u:1  clr A
dco @3d:84 u:1  addc A,R6
dco @3d:85 u:1  mov R6,A
dco @3d:86 u:2  mov DPH,R6
dco @3d:88 u:2  mov DPL,R7
dco @3d:8a u:3  lcall __ld_dptr_r45
dco @3d:8d u:3  mov DPTR,#_hframe
dco @3d:90 u:3  lcall __ld_dptr_r67
dco @3d:93 u:1  mov A,R5
dco @3d:94 u:1  xrl A,R7
dco @3d:95 u:2  jnz ?_79
dco @3d:97 u:1  mov A,R4
dco @3d:98 u:1  xrl A,R6
dco @3d:99 u:2  jz ?_80
dtx ?_79:
dco @3d:9b u:3  ljmp ?169
dtx ?_80:
dhl                   if(psock->sremote_port==hframe.tcp_hdr.sport){
dco @3d:9e u:2  mov R6,?process_TCP_psock
dco @3d:a0 u:2  mov R7,?process_TCP_psock+1
dco @3d:a2 u:2  mov A,#14
dco @3d:a4 u:1  add A,R7
dco @3d:a5 u:1  mov R7,A
dco @3d:a6 u:1  clr A
dco @3d:a7 u:1  addc A,R6
dco @3d:a8 u:1  mov R6,A
dco @3d:a9 u:2  mov DPH,R6
dco @3d:ab u:2  mov DPL,R7
dco @3d:ad u:3  lcall __ld_dptr_r45
dco @3d:b0 u:3  mov DPTR,#_hframe+2
dco @3d:b3 u:3  lcall __ld_dptr_r67
dco @3d:b6 u:1  mov A,R5
dco @3d:b7 u:1  xrl A,R7
dco @3d:b8 u:2  jnz ?_81
dco @3d:ba u:1  mov A,R4
dco @3d:bb u:1  xrl A,R6
dco @3d:bc u:2  jz ?_82
dtx ?_81:
dco @3d:be u:2  sjmp ?171
dtx ?_82:
dhl                        if(psock->local_port==hframe.tcp_hdr.dport){
dco @3d:c0 u:2  mov R2,#0
dco @3d:c2 u:2  mov R3,#50
dco @3d:c4 u:2  mov R4,#((_match_socket)>>8)&255
dco @3d:c6 u:2  mov R5,#(_match_socket)&255
dco @3d:c8 u:2  mov R6,?process_TCP_psock
dco @3d:ca u:2  mov R7,?process_TCP_psock+1
dco @3d:cc u:3  lcall _xram_fast_copy
dhl          // First copy to MATCH_SOCKET
dhl       xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dhl                            res=state_machine_TCP(dlen);     // Now Header read, ready to read data
dco @3d:cf u:2  mov R6,?i185
dco @3d:d1 u:2  mov R7,?i185+1
dco @3d:d3 u:3  lcall _state_machine_TCP
dtx  ; variable 'res' allocated as 'auto'
dco @3d:d6 u:2  mov ?process_TCP_res,R6
dco @3d:d8 u:2  mov ?process_TCP_res+1,R7
dhl          // Copy back from MATCH_SOCKET and return
dhl       xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @3d:da u:2  mov R2,#0
dco @3d:dc u:2  mov R3,#50
dco @3d:de u:2  mov R4,?process_TCP_psock
dco @3d:e0 u:2  mov R5,?process_TCP_psock+1
dco @3d:e2 u:2  mov R6,#((_match_socket)>>8)&255
dco @3d:e4 u:2  mov R7,#(_match_socket)&255
dco @3d:e6 u:3  lcall _xram_fast_copy
dhl                            return res+ui;
dco @3d:e9 u:2  mov R7,?process_TCP_ui
dco @3d:eb u:2  mov R5,AR7
dco @3d:ed u:2  mov R4,#0
dco @3d:ef u:2  mov R6,?process_TCP_res
dco @3d:f1 u:2  mov R7,?process_TCP_res+1
dco @3d:f3 u:1  mov A,R5
dco @3d:f4 u:1  add A,R7
dco @3d:f5 u:1  mov R7,A
dco @3d:f6 u:1  mov A,R4
dco @3d:f7 u:1  addc A,R6
dco @3d:f8 u:1  mov R6,A
dco @3d:f9 u:3  ljmp ?157
dtx ?171:
dhl                           }
dhl                   }
dtx ?169:
dhl               }
dtx ?167:
dhl          }
dtx ?165:
dhl      }
dco @3d:fc u:2  inc ?process_TCP_ui
dco @3d:fe u:2  mov A,#50
dco @3d:100 u:2  add A,?process_TCP_psock+1
dco @3d:102 u:2  mov ?process_TCP_psock+1,A
dco @3d:104 u:1  clr A
dco @3d:105 u:2  addc A,?process_TCP_psock
dco @3d:107 u:2  mov ?process_TCP_psock,A
dtx 
dco @3d:109 u:2  mov R5,#2
dco @3d:10b u:2  mov R7,?process_TCP_ui
dco @3d:10d u:1  clr C
dco @3d:10e u:1  mov A,R7
dco @3d:10f u:1  subb A,R5
dco @3d:110 u:2  jnc ?_83
dco @3d:112 u:3  ljmp ?161
dtx ?_83:
dhl 
dhl      // Now: No matching Socket found: Then only frames with SYN are allowed!
dhl      if(!(hframe.tcp_hdr.flags&TSYN)) return EVENT_TCP_ILLEGALFRAME;
dco @3d:115 u:3  mov DPTR,#_hframe+13
dco @3d:118 u:1  movx A,@DPTR
dco @3d:119 u:1  mov R7,A
dco @3d:11a u:2  anl A,#2
dco @3d:11c u:1  mov R7,A
dco @3d:11d u:2  jnz ?173
dtx 
dco @3d:11f u:2  mov R6,#248
dco @3d:121 u:2  mov R7,#0
dco @3d:123 u:3  ljmp ?157
dtx ?173:
dtx  ; variable 'psock' allocated as 'auto'
dhl         // No matching socket has been found, so find one with TCP_CLOSED and matching local port to o
dhl      psock=uc_socket;
dco @3d:126 u:3  mov ?i186,#((_uc_socket)>>8)&255
dco @3d:129 u:3  mov ?i186+1,#(_uc_socket)&255
dtx  ; variable 'ui' allocated as 'auto'
dhl      for(ui=0;ui<MAX_SOCK;ui++,psock++){
dco @3d:12c u:1  clr A
dco @3d:12d u:2  mov ?i187,A
dtx ?175:
dtx 
dco @3d:12f u:3  mov DPH,?i186
dco @3d:132 u:3  mov DPL,?i186+1
dco @3d:135 u:1  movx A,@DPTR
dco @3d:136 u:1  mov R7,A
dco @3d:137 u:3  cjne R7,#2,?_85
dco @3d:13a u:2  sjmp ?_86
dtx ?_85:
dco @3d:13c u:3  ljmp ?179
dtx ?_86:
dhl          if(psock->socket_type==SOCKET_TCP){  // Only TCP-Sockets are of interest if an offered local 
dco @3d:13f u:2  mov R6,?i186
dco @3d:141 u:2  mov R7,?i186+1
dco @3d:143 u:1  inc R7
dco @3d:144 u:1  mov A,R7
dco @3d:145 u:2  jnz ?__4
dco @3d:147 u:1  inc R6
dtx ?__4:
dco @3d:148 u:3  mov DPH,AR6
dco @3d:14b u:3  mov DPL,AR7
dco @3d:14e u:1  movx A,@DPTR
dco @3d:14f u:1  mov R7,A
dco @3d:150 u:2  jz ?_87
dco @3d:152 u:3  ljmp ?181
dtx ?_87:
dco @3d:155 u:2  mov R6,?i186
dco @3d:157 u:2  mov R7,?i186+1
dco @3d:159 u:2  mov A,#14
dco @3d:15b u:1  add A,R7
dco @3d:15c u:1  mov R7,A
dco @3d:15d u:1  clr A
dco @3d:15e u:1  addc A,R6
dco @3d:15f u:1  mov R6,A
dco @3d:160 u:2  mov DPH,R6
dco @3d:162 u:2  mov DPL,R7
dco @3d:164 u:3  lcall __ld_dptr_r45
dco @3d:167 u:3  mov DPTR,#_hframe+2
dco @3d:16a u:3  lcall __ld_dptr_r67
dco @3d:16d u:1  mov A,R5
dco @3d:16e u:1  xrl A,R7
dco @3d:16f u:2  jnz ?_88
dco @3d:171 u:1  mov A,R4
dco @3d:172 u:1  xrl A,R6
dco @3d:173 u:2  jz ?_89
dtx ?_88:
dco @3d:175 u:2  sjmp ?181
dtx ?_89:
dhl               if(psock->state==TCP_CLOSED && psock->local_port==hframe.tcp_hdr.dport){
dco @3d:177 u:2  mov R2,#0
dco @3d:179 u:2  mov R3,#50
dco @3d:17b u:2  mov R4,#((_match_socket)>>8)&255
dco @3d:17d u:2  mov R5,#(_match_socket)&255
dco @3d:17f u:2  mov R6,?i186
dco @3d:181 u:2  mov R7,?i186+1
dco @3d:183 u:3  lcall _xram_fast_copy
dhl     // First copy to MATCH_SOCKET
dhl     xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dhl                   res=state_machine_TCP(dlen);     // Now Header read, ready to read data
dco @3d:186 u:2  mov R6,?i185
dco @3d:188 u:2  mov R7,?i185+1
dco @3d:18a u:3  lcall _state_machine_TCP
dtx  ; variable 'res' allocated as 'auto'
dco @3d:18d u:2  mov ?i188,R6
dco @3d:18f u:2  mov ?i188+1,R7
dhl         // Copy back from MATCH_SOCKET and return
dhl     xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @3d:191 u:2  mov R2,#0
dco @3d:193 u:2  mov R3,#50
dco @3d:195 u:2  mov R4,?i186
dco @3d:197 u:2  mov R5,?i186+1
dco @3d:199 u:2  mov R6,#((_match_socket)>>8)&255
dco @3d:19b u:2  mov R7,#(_match_socket)&255
dco @3d:19d u:3  lcall _xram_fast_copy
dhl                   if (res) return res+ui;
dco @3d:1a0 u:2  mov A,?i188
dco @3d:1a2 u:2  orl A,?i188+1
dco @3d:1a4 u:2  jz ?183
dtx 
dco @3d:1a6 u:2  mov R7,?i187
dco @3d:1a8 u:2  mov R5,AR7
dco @3d:1aa u:2  mov R4,#0
dco @3d:1ac u:2  mov R6,?i188
dco @3d:1ae u:2  mov R7,?i188+1
dco @3d:1b0 u:1  mov A,R5
dco @3d:1b1 u:1  add A,R7
dco @3d:1b2 u:1  mov R7,A
dco @3d:1b3 u:1  mov A,R4
dco @3d:1b4 u:1  addc A,R6
dco @3d:1b5 u:1  mov R6,A
dco @3d:1b6 u:2  sjmp ?157
dtx ?183:
dhl               }
dtx ?181:
dhl          }
dtx ?179:
dhl      }
dco @3d:1b8 u:2  inc ?i187
dco @3d:1ba u:2  mov A,#50
dco @3d:1bc u:2  add A,?i186+1
dco @3d:1be u:2  mov ?i186+1,A
dco @3d:1c0 u:1  clr A
dco @3d:1c1 u:2  addc A,?i186
dco @3d:1c3 u:2  mov ?i186,A
dtx 
dco @3d:1c5 u:2  mov R5,#2
dco @3d:1c7 u:2  mov R7,?i187
dco @3d:1c9 u:1  clr C
dco @3d:1ca u:1  mov A,R7
dco @3d:1cb u:1  subb A,R5
dco @3d:1cc u:2  jnc ?_91
dco @3d:1ce u:3  ljmp ?175
dtx ?_91:
dhl 
dhl      // Nothing found and nothing free! Deny request by replying with a TCP-RESET (not replying may be
dhl #ifdef PHY_ETH
dhl      send_incomming_reset_TCP(dlen,&remote_mac,remote_ip.ipl);
dco @3d:1d1 u:3  mov DPTR,#_remote_ip
dco @3d:1d4 u:3  lcall __ld_dptr_r03
dco @3d:1d7 u:2  mov R4,#((_remote_mac)>>8)&255
dco @3d:1d9 u:2  mov R5,#(_remote_mac)&255
dco @3d:1db u:2  mov R6,?i185
dco @3d:1dd u:2  mov R7,?i185+1
dco @3d:1df u:3  lcall _send_incomming_reset_TCP
dhl #else
dhl      send_incomming_reset_TCP(dlen,remote_ip.ipl);
dhl #endif
dhl      return EVENT_TCP_DENIED;
dco @3d:1e2 u:2  mov R6,#240
dco @3d:1e4 u:2  mov R7,#0
dtx ?157:
dco @3d:1e6 u:1  ret
dtx ; end of function process_TCP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:7 bytes
dtx 
dtx  .export _process_IP ; unsigned int process_IP(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __process_IP
dtx _process_IP: ; unsigned int process_IP(void)
dhl 
dhl }
dhl 
dhl 
dhl 
dhl /**********************************************************************************
dhl * void process_IP(void)
dhl * 
dhl *
dhl * 2.nd-Level-Multiplexer
dhl **********************************************************************************/
dhl uint process_IP(void){
dco @40:0 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'hdr' allocated as 'auto'
dhl  uint hdr;
dhl  uint dlen;
dhl  uchar pcol;
dhl  
dhl  hdr=Read_Frame_word_Phy();  // Read Header
dhl  if((hdr&0xF000)!=0x4000) return EVENT_IP_NOIP4; // Not IP4!
dco @40:3 u:2  mov ?process_IP_hdr,R6
dco @40:5 u:2  mov ?process_IP_hdr+1,R7
dco @40:7 u:2  mov R7,#0
dco @40:9 u:3  anl AR6,#240
dco @40:c u:1  mov A,R7
dco @40:d u:2  jnz ?_92
dco @40:f u:1  mov A,R6
dco @40:10 u:2  xrl A,#64
dco @40:12 u:2  jz ?190
dtx ?_92:
dtx 
dco @40:14 u:2  mov R6,#192
dco @40:16 u:2  mov R7,#0
dco @40:18 u:3  ljmp ?189
dtx ?190:
dhl  dlen=Read_Frame_word_Phy();  // Read total length of datagram
dco @40:1b u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'dlen' allocated as 'auto'
dco @40:1e u:2  mov ?process_IP_dlen,R6
dco @40:20 u:2  mov ?process_IP_dlen+1,R7
dhl  Read_Frame_word_Phy();   // Ignore Ident
dco @40:22 u:3  lcall _Read_Frame_word_Phy
dhl 
dhl  if(Read_Frame_word_Phy()&0x3FFF) return EVENT_IP_WONTFRAG; // Reject fragemnts!
dco @40:25 u:3  lcall _Read_Frame_word_Phy
dco @40:28 u:3  anl AR6,#63
dco @40:2b u:1  mov A,R6
dco @40:2c u:1  orl A,R7
dco @40:2d u:2  jz ?192
dtx 
dco @40:2f u:2  mov R6,#193
dco @40:31 u:2  mov R7,#0
dco @40:33 u:3  ljmp ?189
dtx ?192:
dhl 
dhl  pcol=(uchar)Read_Frame_word_Phy(); // Protocol (1: ICMP 6 TCP 17: UDP)
dco @40:36 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'pcol' allocated as 'auto'
dco @40:39 u:2  mov ?process_IP_pcol,R7
dhl  Read_Frame_word_Phy();   // Ignore IP Checksum (already secured by Ethernet)
dco @40:3b u:3  lcall _Read_Frame_word_Phy
dhl 
dhl  remote_ip.ipl=Read_Frame_long_Phy(); // Destination IP (should be US)
dco @40:3e u:3  lcall _Read_Frame_long_Phy
dco @40:41 u:3  mov DPTR,#_remote_ip
dco @40:44 u:3  lcall __st_dptr_r47
dhl  Read_Frame_long_Phy();   // Destination IP (should be US)
dco @40:47 u:3  lcall _Read_Frame_long_Phy
dtx  ; variable 'dlen' allocated as 'auto'
dhl 
dhl  dlen-=20;    // Adjust header
dco @40:4a u:2  mov A,#236
dco @40:4c u:2  add A,?process_IP_dlen+1
dco @40:4e u:2  mov ?i203+1,A
dco @40:50 u:2  mov A,#255
dco @40:52 u:2  addc A,?process_IP_dlen
dco @40:54 u:2  mov ?i203,A
dhl  hdr&=0xF00;
dco @40:56 u:2  mov R6,?process_IP_hdr
dco @40:58 u:2  mov R7,?process_IP_hdr+1
dco @40:5a u:2  mov R5,#0
dco @40:5c u:1  mov A,R6
dco @40:5d u:2  anl A,#15
dco @40:5f u:1  mov R4,A
dtx  ; variable 'hdr' assigned to register 'RW45'
dhl  hdr>>=8;
dco @40:60 u:2  mov R7,#8
dco @40:62 u:2  mov R6,AR4
dco @40:64 u:1  mov A,R5
dco @40:65 u:2  mov B,R7
dco @40:67 u:2  inc B
dco @40:69 u:2  sjmp ?_95
dtx ?_96:
dco @40:6b u:1  xch A,R6
dco @40:6c u:1  clr C
dco @40:6d u:1  rrc A
dco @40:6e u:1  xch A,R6
dco @40:6f u:1  rrc A
dtx ?_95:
dco @40:70 u:3  djnz B,?_96
dco @40:73 u:1  mov R7,A
dtx  ; variable 'hdr' assigned to register 'RW67'
dhl  hdr-=5;
dco @40:74 u:2  mov A,#251
dco @40:76 u:1  add A,R7
dco @40:77 u:1  mov R7,A
dco @40:78 u:2  mov A,#255
dco @40:7a u:1  addc A,R6
dco @40:7b u:1  mov R6,A
dtx  ; variable 'hdr' allocated as 'auto'
dco @40:7c u:2  mov ?i206,R6
dco @40:7e u:2  mov ?i206+1,R7
dco @40:80 u:2  sjmp ?195
dtx ?194:
dhl  while(hdr--){    
dco @40:82 u:3  lcall _Read_Frame_long_Phy
dhl   Read_Frame_long_Phy();  // Ignore IP options
dhl   dlen-=4;
dco @40:85 u:2  mov A,#252
dco @40:87 u:2  add A,?i203+1
dco @40:89 u:2  mov ?i203+1,A
dco @40:8b u:2  mov A,#255
dco @40:8d u:2  addc A,?i203
dco @40:8f u:2  mov ?i203,A
dhl  }
dtx ?195:
dtx 
dco @40:91 u:2  mov R4,?i206
dco @40:93 u:2  mov R5,?i206+1
dco @40:95 u:2  mov A,#255
dco @40:97 u:1  add A,R5
dco @40:98 u:1  mov R7,A
dco @40:99 u:2  mov A,#255
dco @40:9b u:1  addc A,R4
dco @40:9c u:1  mov R6,A
dco @40:9d u:2  mov ?i206,R6
dco @40:9f u:2  mov ?i206+1,R7
dco @40:a1 u:1  mov A,R4
dco @40:a2 u:1  orl A,R5
dco @40:a3 u:2  jnz ?194
dhl  if(pcol==1){
dco @40:a5 u:2  mov A,#1
dco @40:a7 u:2  xrl A,?process_IP_pcol
dco @40:a9 u:2  jnz ?197
dtx 
dco @40:ab u:2  mov R6,?i203
dco @40:ad u:2  mov R7,?i203+1
dco @40:af u:3  lcall _process_ICMP
dco @40:b2 u:2  sjmp ?189
dtx ?197:
dhl   return process_ICMP(dlen);
dhl  }else if(pcol==6){ // TCP
dco @40:b4 u:2  mov A,#6
dco @40:b6 u:2  xrl A,?process_IP_pcol
dco @40:b8 u:2  jnz ?199
dtx 
dco @40:ba u:2  mov R6,?i203
dco @40:bc u:2  mov R7,?i203+1
dco @40:be u:3  lcall _process_TCP
dco @40:c1 u:2  sjmp ?189
dtx ?199:
dhl   return process_TCP(dlen);
dhl #ifdef USE_UDP
dhl  }else if(pcol==17){ // UDP
dco @40:c3 u:2  mov A,#17
dco @40:c5 u:2  xrl A,?process_IP_pcol
dco @40:c7 u:2  jnz ?201
dtx 
dco @40:c9 u:2  mov R6,?i203
dco @40:cb u:2  mov R7,?i203+1
dco @40:cd u:3  lcall _process_UDP
dco @40:d0 u:2  sjmp ?189
dtx ?201:
dhl   return process_UDP(dlen);
dhl #endif
dhl  }
dhl  return EVENT_IP_UNKNOWN;  // Don't unterstand this
dco @40:d2 u:2  mov R6,#194
dco @40:d4 u:2  mov R7,#0
dtx ?189:
dco @40:d6 u:1  ret
dtx ; end of function process_IP
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:5 bytes
dtx 
dtx  .export _send_socket_udp ; unsigned int send_socket_udp(unsigned char, xdata unsigned char *, unsigne
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_socket_udp
dtx _send_socket_udp: ; unsigned int send_socket_udp(unsigned char, xdata unsigned char *, unsigned int)
dtx  ; parameter 'pbuf' in 'RW45' assigned to 'RW01'
dtx  ; parameter 'datalen' in 'RW23' assigned to 'B1_RW89'
dtx  ; parameter 'sock' in 'R7'
dco @43:0 u:2  mov R0,AR4
dco @43:2 u:2  mov R1,AR5
dco @43:4 u:2  mov AR8,R2
dco @43:6 u:2  mov AR9,R3
dhl }
dhl 
dhl 
dhl #ifdef USE_UDP
dhl /**********************************************************************************
dhl * uint send_socket_udp(uchar sock, xdata uchar* pdata, uint datalen)
dhl * 
dhl * Send data without any buffering
dhl **********************************************************************************/
dhl uint send_socket_udp(uchar sock, xdata uchar* pbuf, uint datalen){
dco @43:8 u:1  clr A
dco @43:9 u:1  mov R6,A
dco @43:a u:1  mov R4,A
dco @43:b u:2  mov R5,#50
dco @43:d u:3  lcall __mul_i2
dco @43:10 u:2  mov R4,#((_uc_socket)>>8)&255
dco @43:12 u:2  mov R5,#(_uc_socket)&255
dco @43:14 u:1  mov A,R5
dco @43:15 u:1  add A,R7
dco @43:16 u:1  mov R3,A
dco @43:17 u:1  mov A,R4
dco @43:18 u:1  addc A,R6
dco @43:19 u:1  mov R2,A
dtx  ; variable 'psock' assigned to register 'RW23'
dhl      xdata UC_SOCKET *psock;
dhl      psock=&uc_socket[sock];
dhl  if(psock->socket_type!=SOCKET_UDP) return EVENT_UDP_ERROR;
dco @43:1a u:3  mov DPH,AR2
dco @43:1d u:3  mov DPL,AR3
dco @43:20 u:1  movx A,@DPTR
dco @43:21 u:1  mov R7,A
dco @43:22 u:2  xrl A,#1
dco @43:24 u:2  jz ?208
dtx 
dco @43:26 u:2  mov R6,#225
dco @43:28 u:2  mov R7,#0
dco @43:2a u:2  sjmp ?207
dtx ?208:
dhl #ifdef PHY_ETH
dhl  send_upd(pbuf,datalen,psock->sremote_mac,psock->sremote_ip,psock->local_port,psock->sremote_port);
dco @43:2c u:2  mov A,#12
dco @43:2e u:1  add A,R3
dco @43:2f u:1  mov R7,A
dco @43:30 u:1  clr A
dco @43:31 u:1  addc A,R2
dco @43:32 u:1  mov R6,A
dco @43:33 u:2  mov DPH,R6
dco @43:35 u:2  mov DPL,R7
dco @43:37 u:3  lcall __ld_dptr_r67
dco @43:3a u:2  mov _send_upd_formal_near+6,R6
dco @43:3c u:2  mov _send_upd_formal_near+7,R7
dco @43:3e u:2  mov A,#14
dco @43:40 u:1  add A,R3
dco @43:41 u:1  mov R7,A
dco @43:42 u:1  clr A
dco @43:43 u:1  addc A,R2
dco @43:44 u:1  mov R6,A
dco @43:45 u:2  mov DPH,R6
dco @43:47 u:2  mov DPL,R7
dco @43:49 u:3  lcall __ld_dptr_r67
dco @43:4c u:2  mov _send_upd_formal_near+4,R6
dco @43:4e u:2  mov _send_upd_formal_near+5,R7
dco @43:50 u:2  mov A,#8
dco @43:52 u:1  add A,R3
dco @43:53 u:1  mov R7,A
dco @43:54 u:1  clr A
dco @43:55 u:1  addc A,R2
dco @43:56 u:1  mov R6,A
dco @43:57 u:2  mov DPH,R6
dco @43:59 u:2  mov DPL,R7
dco @43:5b u:3  lcall __ld_dptr_r47
dco @43:5e u:2  mov A,#_send_upd_formal_near
dco @43:60 u:3  lcall __st_a_r47
dco @43:63 u:2  mov A,#2
dco @43:65 u:1  add A,R3
dco @43:66 u:1  mov R3,A
dco @43:67 u:1  clr A
dco @43:68 u:1  addc A,R2
dco @43:69 u:1  mov R2,A
dco @43:6a u:2  mov R4,AR8
dco @43:6c u:2  mov R5,AR9
dco @43:6e u:2  mov R6,AR0
dco @43:70 u:2  mov R7,AR1
dco @43:72 u:3  lcall _send_upd
dhl #else
dhl  send_upd(pbuf,datalen,psock->sremote_ip,psock->local_port,psock->sremote_port);
dhl #endif
dhl  return 0;
dco @43:75 u:1  clr A
dco @43:76 u:1  mov R6,A
dco @43:77 u:1  mov R7,A
dtx ?207:
dco @43:78 u:1  ret
dtx ; end of function send_socket_udp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .export _send_socket_tcp ; unsigned int send_socket_tcp(unsigned char, xdata unsigned char *, unsigne
dtx  .hide
dtx  .show
dtx 
dtx  .segment __send_socket_tcp
dtx _send_socket_tcp: ; unsigned int send_socket_tcp(unsigned char, xdata unsigned char *, unsigned int)
dtx  ; parameter 'datalen' in 'RW23' moved and assigned to local '?send_socket_tcp_datalen'
dtx  ; parameter 'pbuf' in 'RW45' moved and assigned to local '?send_socket_tcp_pbuf'
dtx  ; parameter 'sock' in 'R7'
dco @46:0 u:2  mov ?send_socket_tcp_datalen,R2
dco @46:2 u:2  mov ?send_socket_tcp_datalen+1,R3
dco @46:4 u:2  mov ?send_socket_tcp_pbuf,R4
dco @46:6 u:2  mov ?send_socket_tcp_pbuf+1,R5
dhl }
dhl #endif
dhl 
dhl /**********************************************************************************
dhl * uint send_socket_tcp(uchar sock, xdata uchar* pdata, uint datalen)
dhl * 
dhl * Bind an (allocated and filled xdata) buffer to a socket and send it. After Success,
dhl * the buffer is freed by the stack (check with ready4tx_socket()
dhl * The buffer must be allocated with allocate_tx_buf().
dhl * For return values!=0 the buffer must be freed by the caller!
dhl *
dhl * Remark for least ressouces: 
dhl * ---------------------------
dhl * If Space is very low on the used System, this function might be  called directly, 
dhl * see stringsend_socket().
dhl * 
dhl **********************************************************************************/
dhl uint send_socket_tcp(uchar sock, xdata uchar* pbuf, uint datalen){
dco @46:8 u:1  clr A
dco @46:9 u:1  mov R6,A
dco @46:a u:1  mov R4,A
dco @46:b u:2  mov R5,#50
dco @46:d u:3  lcall __mul_i2
dco @46:10 u:2  mov R4,#((_uc_socket)>>8)&255
dco @46:12 u:2  mov R5,#(_uc_socket)&255
dco @46:14 u:1  mov A,R5
dco @46:15 u:1  add A,R7
dco @46:16 u:1  mov R7,A
dco @46:17 u:1  mov A,R4
dco @46:18 u:1  addc A,R6
dco @46:19 u:1  mov R6,A
dtx  ; variable 'psock' allocated as 'auto'
dco @46:1a u:2  mov ?send_socket_tcp_psock,R6
dco @46:1c u:2  mov ?send_socket_tcp_psock+1,R7
dhl      xdata UC_SOCKET *psock;
dhl      psock=&uc_socket[sock];
dhl  // Copy Socket to Working Socket
dhl  xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dco @46:1e u:2  mov R2,#0
dco @46:20 u:2  mov R3,#50
dco @46:22 u:2  mov R4,#((_match_socket)>>8)&255
dco @46:24 u:2  mov R5,#(_match_socket)&255
dco @46:26 u:2  mov R6,?send_socket_tcp_psock
dco @46:28 u:2  mov R7,?send_socket_tcp_psock+1
dco @46:2a u:3  lcall _xram_fast_copy
dhl  if(match_socket.socket_type!=SOCKET_TCP || match_socket.state!=TCP_EST) return EVENT_TCP_DENIED;
dco @46:2d u:3  mov DPTR,#_match_socket
dco @46:30 u:1  movx A,@DPTR
dco @46:31 u:1  mov R7,A
dco @46:32 u:3  cjne R7,#2,?213
dco @46:35 u:3  mov DPTR,#_match_socket+1
dco @46:38 u:1  movx A,@DPTR
dco @46:39 u:1  mov R7,A
dco @46:3a u:2  xrl A,#2
dco @46:3c u:2  jz ?211
dtx ?213:
dtx 
dco @46:3e u:2  mov R6,#240
dco @46:40 u:2  mov R7,#0
dco @46:42 u:3  ljmp ?210
dtx ?211:
dhl  if(!datalen) {
dco @46:45 u:2  mov A,?send_socket_tcp_datalen
dco @46:47 u:2  orl A,?send_socket_tcp_datalen+1
dco @46:49 u:2  jnz ?214
dtx 
dco @46:4b u:2  mov R6,?send_socket_tcp_pbuf
dco @46:4d u:2  mov R7,?send_socket_tcp_pbuf+1
dco @46:4f u:3  lcall _free_tx_buf
dhl   free_tx_buf(pbuf); // Free Buffer
dhl   return 0;  // IDIOTA!
dco @46:52 u:1  clr A
dco @46:53 u:1  mov R6,A
dco @46:54 u:1  mov R7,A
dco @46:55 u:3  ljmp ?210
dtx ?214:
dhl  }
dhl 
dhl  // Bind Buffer try to allocate B1 first, then B2m then B3 else error
dhl  if(!match_socket.buf_outsize1){
dco @46:58 u:3  mov DPTR,#_match_socket+42
dco @46:5b u:3  lcall __ld_dptr_r67
dco @46:5e u:1  mov A,R6
dco @46:5f u:1  orl A,R7
dco @46:60 u:2  jnz ?216
dtx 
dco @46:62 u:2  mov R6,?send_socket_tcp_pbuf
dco @46:64 u:2  mov R7,?send_socket_tcp_pbuf+1
dco @46:66 u:3  mov DPTR,#_match_socket+48
dco @46:69 u:3  lcall __st_dptr_r67
dhl   match_socket.p_outbuf1=pbuf;
dhl   match_socket.buf_outsize1=datalen;
dco @46:6c u:2  mov R6,?send_socket_tcp_datalen
dco @46:6e u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:70 u:3  mov DPTR,#_match_socket+42
dco @46:73 u:3  lcall __st_dptr_r67
dhl   match_socket.sseq_1=match_socket.sseq.u+datalen;
dco @46:76 u:2  mov R6,?send_socket_tcp_datalen
dco @46:78 u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:7a u:2  mov R3,AR7
dco @46:7c u:2  mov R2,AR6
dco @46:7e u:1  clr A
dco @46:7f u:1  mov R1,A
dco @46:80 u:1  mov R0,A
dco @46:81 u:3  mov DPTR,#_match_socket+20
dco @46:84 u:3  lcall __ld_dptr_r47
dco @46:87 u:3  lcall __add_i4
dco @46:8a u:3  mov DPTR,#_match_socket+44
dco @46:8d u:3  lcall __st_dptr_r47
dhl   // puts("<SB1>");
dhl  }else if(!match_socket.buf_outsize2){
dco @46:90 u:3  ljmp ?217
dtx ?216:
dtx 
dco @46:93 u:3  mov DPTR,#_match_socket+34
dco @46:96 u:3  lcall __ld_dptr_r67
dco @46:99 u:1  mov A,R6
dco @46:9a u:1  orl A,R7
dco @46:9b u:2  jnz ?218
dtx 
dco @46:9d u:2  mov R6,?send_socket_tcp_pbuf
dco @46:9f u:2  mov R7,?send_socket_tcp_pbuf+1
dco @46:a1 u:3  mov DPTR,#_match_socket+40
dco @46:a4 u:3  lcall __st_dptr_r67
dhl   match_socket.p_outbuf2=pbuf;
dhl   match_socket.buf_outsize2=datalen;
dco @46:a7 u:2  mov R6,?send_socket_tcp_datalen
dco @46:a9 u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:ab u:3  mov DPTR,#_match_socket+34
dco @46:ae u:3  lcall __st_dptr_r67
dhl   match_socket.sseq_2=match_socket.sseq.u+datalen;
dco @46:b1 u:2  mov R6,?send_socket_tcp_datalen
dco @46:b3 u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:b5 u:2  mov R3,AR7
dco @46:b7 u:2  mov R2,AR6
dco @46:b9 u:1  clr A
dco @46:ba u:1  mov R1,A
dco @46:bb u:1  mov R0,A
dco @46:bc u:3  mov DPTR,#_match_socket+20
dco @46:bf u:3  lcall __ld_dptr_r47
dco @46:c2 u:3  lcall __add_i4
dco @46:c5 u:3  mov DPTR,#_match_socket+36
dco @46:c8 u:3  lcall __st_dptr_r47
dhl   // puts("<SB2>");
dhl  }else if(!match_socket.buf_outsize3){
dco @46:cb u:2  sjmp ?219
dtx ?218:
dtx 
dco @46:cd u:3  mov DPTR,#_match_socket+26
dco @46:d0 u:3  lcall __ld_dptr_r67
dco @46:d3 u:1  mov A,R6
dco @46:d4 u:1  orl A,R7
dco @46:d5 u:2  jnz ?220
dtx 
dco @46:d7 u:2  mov R6,?send_socket_tcp_pbuf
dco @46:d9 u:2  mov R7,?send_socket_tcp_pbuf+1
dco @46:db u:3  mov DPTR,#_match_socket+32
dco @46:de u:3  lcall __st_dptr_r67
dhl   match_socket.p_outbuf3=pbuf;
dhl   match_socket.buf_outsize3=datalen;
dco @46:e1 u:2  mov R6,?send_socket_tcp_datalen
dco @46:e3 u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:e5 u:3  mov DPTR,#_match_socket+26
dco @46:e8 u:3  lcall __st_dptr_r67
dhl   match_socket.sseq_3=match_socket.sseq.u+datalen;
dco @46:eb u:2  mov R6,?send_socket_tcp_datalen
dco @46:ed u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:ef u:2  mov R3,AR7
dco @46:f1 u:2  mov R2,AR6
dco @46:f3 u:1  clr A
dco @46:f4 u:1  mov R1,A
dco @46:f5 u:1  mov R0,A
dco @46:f6 u:3  mov DPTR,#_match_socket+20
dco @46:f9 u:3  lcall __ld_dptr_r47
dco @46:fc u:3  lcall __add_i4
dco @46:ff u:3  mov DPTR,#_match_socket+28
dco @46:102 u:3  lcall __st_dptr_r47
dhl   // puts("<SB3>");
dhl  }else{
dco @46:105 u:2  sjmp ?221
dtx ?220:
dtx 
dco @46:107 u:2  mov R6,#244
dco @46:109 u:2  mov R7,#0
dco @46:10b u:2  sjmp ?210
dtx ?221:
dtx ?219:
dtx ?217:
dhl   // If data still pending: Error, Important: BUFFER NOT FREED!
dhl   return EVENT_TCP_TXPENDING; // Can't send, old data still waiting...
dhl  }
dhl  send_match_ok_TCP(pbuf,datalen,TACK+TPUSH);
dco @46:10d u:2  mov R3,#24
dco @46:10f u:2  mov R4,?send_socket_tcp_datalen
dco @46:111 u:2  mov R5,?send_socket_tcp_datalen+1
dco @46:113 u:2  mov R6,?send_socket_tcp_pbuf
dco @46:115 u:2  mov R7,?send_socket_tcp_pbuf+1
dco @46:117 u:3  lcall _send_match_ok_TCP
dhl  match_socket.sseq.u+=datalen; // 32 Bit operation - This must be acknowledged to free the buffer.
dco @46:11a u:2  mov R6,?send_socket_tcp_datalen
dco @46:11c u:2  mov R7,?send_socket_tcp_datalen+1
dco @46:11e u:2  mov R3,AR7
dco @46:120 u:2  mov R2,AR6
dco @46:122 u:1  clr A
dco @46:123 u:1  mov R1,A
dco @46:124 u:1  mov R0,A
dco @46:125 u:3  mov DPTR,#_match_socket+20
dco @46:128 u:3  lcall __ld_dptr_r47
dco @46:12b u:3  lcall __add_i4
dco @46:12e u:3  mov DPTR,#_match_socket+20
dco @46:131 u:3  lcall __st_dptr_r47
dhl 
dhl  // New TIMEOUT
dhl  match_socket.retry_cnt=0;
dco @46:134 u:3  mov DPTR,#_match_socket+24
dco @46:137 u:1  clr A
dco @46:138 u:1  movx @DPTR,A
dhl  match_socket.timer=BASIC_RETRY_TIMER;
dco @46:139 u:3  mov DPTR,#_match_socket+25
dco @46:13c u:2  mov A,#6
dco @46:13e u:1  movx @DPTR,A
dhl 
dhl   // Copy back from MATCH_SOCKET and return
dhl  xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @46:13f u:2  mov R2,#0
dco @46:141 u:2  mov R3,#50
dco @46:143 u:2  mov R4,?send_socket_tcp_psock
dco @46:145 u:2  mov R5,?send_socket_tcp_psock+1
dco @46:147 u:2  mov R6,#((_match_socket)>>8)&255
dco @46:149 u:2  mov R7,#(_match_socket)&255
dco @46:14b u:3  lcall _xram_fast_copy
dhl  return 0; // All OK
dco @46:14e u:1  clr A
dco @46:14f u:1  mov R6,A
dco @46:150 u:1  mov R7,A
dtx ?210:
dco @46:151 u:1  ret
dtx ; end of function send_socket_tcp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:6 bytes
dtx 
dtx  .export _notready_socket_tcp ; unsigned int notready_socket_tcp(unsigned char, unsigned char)
dtx  .segment _notready_socket_tcp_formal_near, size 0, fill, notext, sclass dram
dtx  .segment _notready_socket_tcp_local_near, size 0, fill, notext, sclass dram
dtx  .sgraph _notready_socket_tcp_formal_near, _notready_socket_tcp_local_near, __notready_socket_tcp
dtx 
dtx  .segment __notready_socket_tcp
dtx _notready_socket_tcp: ; (leaf function) unsigned int notready_socket_tcp(unsigned char, unsigned char)
dtx  ; parameter 'sock' in 'R7'
dtx  ; parameter 'flag' in 'R5' assigned to 'R1'
dco @49:0 u:2  mov R1,AR5
dhl }
dhl 
dhl /**********************************************************************************
dhl * uint notready4tx_socket_tcp(uchar sock)
dhl * 
dhl * Querries if a TCP socket is ready for Transmition, ok if 0.
dhl * Checks if a Buffer is available for transmition to!)
dhl * 
dhl * Flag: RDY_4_TX (>0) or RDY_4_CLOSE (0)
dhl **********************************************************************************/
dhl uint notready_socket_tcp(uchar sock, uchar flag){
dco @49:2 u:2  mov R5,AR7
dco @49:4 u:1  clr A
dco @49:5 u:1  mov R4,A
dco @49:6 u:1  mov R6,A
dco @49:7 u:2  mov R7,#50
dco @49:9 u:3  lcall __mul_i2
dco @49:c u:2  mov R2,#((_uc_socket)>>8)&255
dco @49:e u:2  mov R3,#(_uc_socket)&255
dco @49:10 u:1  mov A,R3
dco @49:11 u:1  add A,R7
dco @49:12 u:1  mov R5,A
dco @49:13 u:1  mov A,R2
dco @49:14 u:1  addc A,R6
dco @49:15 u:1  mov R4,A
dtx  ; variable 'psock' assigned to register 'RW45'
dhl      xdata UC_SOCKET *psock;
dhl      psock=&uc_socket[sock];
dhl  if(psock->socket_type!=SOCKET_TCP || psock->state!=TCP_EST) return EVENT_TCP_DENIED;
dco @49:16 u:3  mov DPH,AR4
dco @49:19 u:3  mov DPL,AR5
dco @49:1c u:1  movx A,@DPTR
dco @49:1d u:1  mov R7,A
dco @49:1e u:3  cjne R7,#2,?225
dco @49:21 u:2  mov A,#1
dco @49:23 u:1  add A,R5
dco @49:24 u:1  mov R7,A
dco @49:25 u:1  clr A
dco @49:26 u:1  addc A,R4
dco @49:27 u:1  mov R6,A
dco @49:28 u:3  mov DPH,AR6
dco @49:2b u:3  mov DPL,AR7
dco @49:2e u:1  movx A,@DPTR
dco @49:2f u:1  mov R7,A
dco @49:30 u:2  xrl A,#2
dco @49:32 u:2  jz ?223
dtx ?225:
dtx 
dco @49:34 u:2  mov R6,#240
dco @49:36 u:2  mov R7,#0
dco @49:38 u:3  ljmp ?222
dtx ?223:
dhl  if(!tx_bufleft) return EVENT_SOCKET_NOBUFFER;  // Stack may be ready, but no buffer available...
dco @49:3b u:3  mov DPTR,#_tx_bufleft
dco @49:3e u:1  movx A,@DPTR
dco @49:3f u:1  mov R7,A
dco @49:40 u:2  jnz ?226
dtx 
dco @49:42 u:2  mov R6,#210
dco @49:44 u:2  mov R7,#0
dco @49:46 u:2  sjmp ?222
dtx ?226:
dhl #ifndef PHY_ETH
dhl  if(!Phy_rdy4tx()) return EVENT_PHY_TXPEND;     // Still TX pending (PHY!)
dhl #endif
dhl  if(flag){ // Check Ready for TX: BUF3 must be empty
dco @49:48 u:1  mov A,R1
dco @49:49 u:2  jz ?228
dtx 
dco @49:4b u:2  mov A,#26
dco @49:4d u:1  add A,R5
dco @49:4e u:1  mov R7,A
dco @49:4f u:1  clr A
dco @49:50 u:1  addc A,R4
dco @49:51 u:1  mov R6,A
dco @49:52 u:2  mov DPH,R6
dco @49:54 u:2  mov DPL,R7
dco @49:56 u:3  lcall __ld_dptr_r67
dco @49:59 u:1  mov A,R6
dco @49:5a u:1  orl A,R7
dco @49:5b u:2  jz ?229
dhl   // If data still pending (Output Buffer full): Error
dhl   if(psock->buf_outsize3) return EVENT_TCP_TXPENDING; // Can't send, old data still pending
dco @49:5d u:2  mov R6,#244
dco @49:5f u:2  mov R7,#0
dco @49:61 u:2  sjmp ?222
dhl  }else{  // Check Read for Close: BUF1 must be empty
dtx ?228:
dtx 
dco @49:63 u:2  mov A,#42
dco @49:65 u:1  add A,R5
dco @49:66 u:1  mov R7,A
dco @49:67 u:1  clr A
dco @49:68 u:1  addc A,R4
dco @49:69 u:1  mov R6,A
dco @49:6a u:2  mov DPH,R6
dco @49:6c u:2  mov DPL,R7
dco @49:6e u:3  lcall __ld_dptr_r67
dco @49:71 u:1  mov A,R6
dco @49:72 u:1  orl A,R7
dco @49:73 u:2  jz ?232
dhl   if(psock->buf_outsize1) return EVENT_TCP_TXPENDING; // Can't send, old data still pending
dco @49:75 u:2  mov R6,#244
dco @49:77 u:2  mov R7,#0
dco @49:79 u:2  sjmp ?222
dtx ?232:
dhl 
dhl  }
dtx ?229:
dhl  return 0; // SOCKEt IS READY!
dco @49:7b u:1  clr A
dco @49:7c u:1  mov R6,A
dco @49:7d u:1  mov R7,A
dtx ?222:
dco @49:7e u:1  ret
dtx ; end of function notready_socket_tcp
dtx ; used: R-1234567 BR-------- DPTR ACC PSW B
dtx 
dtx  .export _stringsend_socket_tcp ; unsigned int stringsend_socket_tcp(unsigned char, far char *)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __stringsend_socket_tcp
dtx _stringsend_socket_tcp: ; unsigned int stringsend_socket_tcp(unsigned char, far char *)
dtx  ; parameter 'pdata' in 'RL0123' moved and assigned to local '?stringsend_socket_tcp_pdata'
dtx  ; parameter 'sock' in 'R7' moved and assigned to local '?stringsend_socket_tcp_sock'
dco @4e:0 u:2  mov A,#?stringsend_socket_tcp_pdata
dco @4e:2 u:3  lcall __st_a_r03
dco @4e:5 u:2  mov ?stringsend_socket_tcp_sock,R7
dhl }
dhl 
dhl 
dhl /*********************************************************************************
dhl * uint stringsend_socket_tcp(uchar sock, far char* pdata);
dhl *
dhl * Allocate a TCP-TX-Buffer and copy a string (far!) into it. 
dhl * Returns 0 on success. Calls send_socket_tcp().
dhl *********************************************************************************/
dhl uint stringsend_socket_tcp(uchar sock, far char* pdata){
dco @4e:7 u:2  mov R5,#1
dco @4e:9 u:2  mov R7,?stringsend_socket_tcp_sock
dco @4e:b u:3  lcall _notready_socket_tcp
dco @4e:e u:1  mov A,R6
dco @4e:f u:1  orl A,R7
dco @4e:10 u:2  jz ?235
dhl  xdata uchar* pbuf;
dhl  uint datalen;
dhl 
dhl  // Check if allowed
dhl  if(notready_socket_tcp(sock,RDY_4_TX)) return EVENT_TCP_DENIED;
dco @4e:12 u:2  mov R6,#240
dco @4e:14 u:2  mov R7,#0
dco @4e:16 u:3  ljmp ?234
dtx ?235:
dhl  datalen=strlen(pdata);
dco @4e:19 u:2  mov A,#?stringsend_socket_tcp_pdata
dco @4e:1b u:3  lcall __ld_a_r47
dco @4e:1e u:3  lcall _strlen
dtx  ; variable 'datalen' allocated as 'auto'
dco @4e:21 u:2  mov ?stringsend_socket_tcp_datalen,R6
dco @4e:23 u:2  mov ?stringsend_socket_tcp_datalen+1,R7
dhl  if(datalen>MAX_TX) return EVENT_SOCKET_BUF2SMALL; // Can't send as much...
dco @4e:25 u:2  mov R4,#0
dco @4e:27 u:2  mov R5,#100
dco @4e:29 u:2  mov R6,?stringsend_socket_tcp_datalen
dco @4e:2b u:2  mov R7,?stringsend_socket_tcp_datalen+1
dco @4e:2d u:1  setb C
dco @4e:2e u:1  mov A,R7
dco @4e:2f u:1  subb A,R5
dco @4e:30 u:1  mov A,R6
dco @4e:31 u:1  subb A,R4
dco @4e:32 u:2  jc ?237
dtx 
dco @4e:34 u:2  mov R6,#211
dco @4e:36 u:2  mov R7,#0
dco @4e:38 u:2  sjmp ?234
dtx ?237:
dhl  // Allocate a buffer
dhl  pbuf=allocate_tx_buf();
dco @4e:3a u:3  lcall _allocate_tx_buf
dtx  ; variable 'pbuf' allocated as 'auto'
dco @4e:3d u:2  mov ?stringsend_socket_tcp_pbuf,R6
dco @4e:3f u:2  mov ?stringsend_socket_tcp_pbuf+1,R7
dhl  if(!pbuf) return EVENT_SOCKET_NOBUFFER;   // No Buffer free?? -> Memory corrupt!
dco @4e:41 u:2  mov A,?stringsend_socket_tcp_pbuf
dco @4e:43 u:2  orl A,?stringsend_socket_tcp_pbuf+1
dco @4e:45 u:2  jnz ?239
dtx 
dco @4e:47 u:2  mov R6,#210
dco @4e:49 u:2  mov R7,#0
dco @4e:4b u:2  sjmp ?234
dtx ?239:
dhl  bmove(pdata,pbuf,datalen);
dco @4e:4d u:3  mov _bmove_formal_near,?stringsend_socket_tcp_datalen
dco @4e:50 u:3  mov _bmove_formal_near+1,?stringsend_socket_tcp_datalen+1
dco @4e:53 u:2  mov R6,?stringsend_socket_tcp_pbuf
dco @4e:55 u:2  mov R7,?stringsend_socket_tcp_pbuf+1
dco @4e:57 u:2  mov R3,AR7
dco @4e:59 u:2  mov R2,AR6
dco @4e:5b u:2  mov R0,#XDS
dco @4e:5d u:2  mov A,#?stringsend_socket_tcp_pdata
dco @4e:5f u:3  lcall __ld_a_r47
dco @4e:62 u:3  lcall _bmove
dhl  return send_socket_tcp(sock,pbuf,datalen);
dco @4e:65 u:2  mov R2,?stringsend_socket_tcp_datalen
dco @4e:67 u:2  mov R3,?stringsend_socket_tcp_datalen+1
dco @4e:69 u:2  mov R4,?stringsend_socket_tcp_pbuf
dco @4e:6b u:2  mov R5,?stringsend_socket_tcp_pbuf+1
dco @4e:6d u:2  mov R7,?stringsend_socket_tcp_sock
dco @4e:6f u:3  lcall _send_socket_tcp
dtx ?234:
dco @4e:72 u:1  ret
dtx ; end of function stringsend_socket_tcp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:9 bytes
dtx 
dtx  .export _close_socket_tcp ; unsigned int close_socket_tcp(unsigned char)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __close_socket_tcp
dtx _close_socket_tcp: ; unsigned int close_socket_tcp(unsigned char)
dtx  ; parameter 'sock' in 'R7'
dhl }
dhl 
dhl 
dhl /**********************************************************************************
dhl * uint close_socket_tcp(sock)
dhl * 
dhl * Close an open socket (regular mode)
dhl * 
dhl **********************************************************************************/
dhl uint close_socket_tcp(uchar sock){
dco @51:0 u:1  clr A
dco @51:1 u:1  mov R6,A
dco @51:2 u:1  mov R4,A
dco @51:3 u:2  mov R5,#50
dco @51:5 u:3  lcall __mul_i2
dco @51:8 u:2  mov R4,#((_uc_socket)>>8)&255
dco @51:a u:2  mov R5,#(_uc_socket)&255
dco @51:c u:1  mov A,R5
dco @51:d u:1  add A,R7
dco @51:e u:1  mov R7,A
dco @51:f u:1  mov A,R4
dco @51:10 u:1  addc A,R6
dco @51:11 u:1  mov R6,A
dtx  ; variable 'psock' allocated as 'auto'
dco @51:12 u:2  mov ?close_socket_tcp_psock,R6
dco @51:14 u:2  mov ?close_socket_tcp_psock+1,R7
dhl      xdata UC_SOCKET *psock;
dhl      psock=&uc_socket[sock];
dhl  // Copy Socket to Working Socket
dhl  xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dco @51:16 u:2  mov R2,#0
dco @51:18 u:2  mov R3,#50
dco @51:1a u:2  mov R4,#((_match_socket)>>8)&255
dco @51:1c u:2  mov R5,#(_match_socket)&255
dco @51:1e u:2  mov R6,?close_socket_tcp_psock
dco @51:20 u:2  mov R7,?close_socket_tcp_psock+1
dco @51:22 u:3  lcall _xram_fast_copy
dhl  if(match_socket.socket_type!=SOCKET_TCP || !match_socket.state) return EVENT_TCP_DENIED; // Closing a
dco @51:25 u:3  mov DPTR,#_match_socket
dco @51:28 u:1  movx A,@DPTR
dco @51:29 u:1  mov R7,A
dco @51:2a u:3  cjne R7,#2,?244
dco @51:2d u:3  mov DPTR,#_match_socket+1
dco @51:30 u:1  movx A,@DPTR
dco @51:31 u:1  mov R7,A
dco @51:32 u:2  jnz ?242
dtx ?244:
dtx 
dco @51:34 u:2  mov R6,#240
dco @51:36 u:2  mov R7,#0
dco @51:38 u:3  ljmp ?241
dtx ?242:
dhl 
dhl  // If data still pending: Error
dhl  if(match_socket.buf_outsize1) return EVENT_TCP_TXPENDING; // Can't send, old data still waiting...
dco @51:3b u:3  mov DPTR,#_match_socket+42
dco @51:3e u:3  lcall __ld_dptr_r67
dco @51:41 u:1  mov A,R6
dco @51:42 u:1  orl A,R7
dco @51:43 u:2  jz ?245
dtx 
dco @51:45 u:2  mov R6,#244
dco @51:47 u:2  mov R7,#0
dco @51:49 u:2  sjmp ?241
dtx ?245:
dhl 
dhl  send_match_ok_TCP(0,0,TACK+TFIN+TPUSH);
dco @51:4b u:2  mov R3,#25
dco @51:4d u:1  clr A
dco @51:4e u:1  mov R4,A
dco @51:4f u:1  mov R5,A
dco @51:50 u:1  clr A
dco @51:51 u:1  mov R6,A
dco @51:52 u:1  mov R7,A
dco @51:53 u:3  lcall _send_match_ok_TCP
dhl  match_socket.sseq.u++; // 32 Bit operation - This must be acknowledged
dco @51:56 u:1  clr A
dco @51:57 u:1  mov R0,A
dco @51:58 u:1  mov R1,A
dco @51:59 u:1  mov R2,A
dco @51:5a u:2  mov R3,#1
dco @51:5c u:3  mov DPTR,#_match_socket+20
dco @51:5f u:3  lcall __ld_dptr_r47
dco @51:62 u:3  lcall __add_i4
dco @51:65 u:3  mov DPTR,#_match_socket+20
dco @51:68 u:3  lcall __st_dptr_r47
dhl  match_socket.state=TCP_FINSENT;
dco @51:6b u:3  mov DPTR,#_match_socket+1
dco @51:6e u:2  mov A,#3
dco @51:70 u:1  movx @DPTR,A
dhl 
dhl  // New TIMEOUT
dhl  match_socket.retry_cnt=0;
dco @51:71 u:3  mov DPTR,#_match_socket+24
dco @51:74 u:1  clr A
dco @51:75 u:1  movx @DPTR,A
dhl  match_socket.timer=BASIC_RETRY_TIMER;
dco @51:76 u:3  mov DPTR,#_match_socket+25
dco @51:79 u:2  mov A,#6
dco @51:7b u:1  movx @DPTR,A
dhl 
dhl   // Copy back from MATCH_SOCKET and return
dhl  xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @51:7c u:2  mov R2,#0
dco @51:7e u:2  mov R3,#50
dco @51:80 u:2  mov R4,?close_socket_tcp_psock
dco @51:82 u:2  mov R5,?close_socket_tcp_psock+1
dco @51:84 u:2  mov R6,#((_match_socket)>>8)&255
dco @51:86 u:2  mov R7,#(_match_socket)&255
dco @51:88 u:3  lcall _xram_fast_copy
dhl 
dhl  // printf("<--CLOSE %u-->",match_socket.sremote_port);
dhl 
dhl  return 0; // All OK
dco @51:8b u:1  clr A
dco @51:8c u:1  mov R6,A
dco @51:8d u:1  mov R7,A
dtx ?241:
dco @51:8e u:1  ret
dtx ; end of function close_socket_tcp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
dtx 
dtx  .export _open_socket_udp ; unsigned int open_socket_udp(unsigned char, unsigned long, unsigned int)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __open_socket_udp
dtx _open_socket_udp: ; unsigned int open_socket_udp(unsigned char, unsigned long, unsigned int)
dtx  ; parameter 'remote_ipl' in 'RL0123' moved and assigned to local '?open_socket_udp_remote_ipl'
dtx  ; parameter 'sock' in 'R7'
dtx  ; parameter 'remote_port' assigned to local '?open_socket_udp_0_remote_port'
dco @54:0 u:2  mov A,#?open_socket_udp_remote_ipl
dco @54:2 u:3  lcall __st_a_r03
dhl }
dhl 
dhl #ifdef USE_TCP_CLIENT
dhl /**********************************************************************************
dhl * uint open_socket_tcp(sock,ipl,port);
dhl * 
dhl * Initiate an active Open for a  given Socket
dhl **********************************************************************************/
dhl uint open_socket_tcp(uchar sock,unsigned long remote_ipl,unsigned int remote_port){
dhl      xdata UC_SOCKET *psock;
dhl      psock=&uc_socket[sock];
dhl  // Copy Socket to Working Socket
dhl  xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dhl  if(match_socket.socket_type!=SOCKET_TCP || match_socket.state) return EVENT_TCP_DENIED; // No Access 
dhl 
dhl  match_socket.sremote_ip=remote_ipl;
dhl  match_socket.sremote_port=remote_port;
dhl   
dhl #ifdef PHY_ETH
dhl    send_request_ARP(remote_ipl);
dhl    match_socket.state=ARPSENT;
dhl 
dhl #else
dhl    // Ports already setup!
dhl    match_socket.sseq.w.h_word=net_service_cnt;   // Time ascending...
dhl    match_socket.sseq.w.l_word=0;    // Our relative Pointer (for HTTP, -1 due to SYNC)
dhl    match_socket.state=TCP_SYNSENT;  // SYN confirmed with SYN+ACK
dhl    send_match_ok_TCP(0,0,TSYN); // Initiate Connection with a SYN
dhl #endif
dhl    // New TIMEOUT
dhl    match_socket.retry_cnt=0;
dhl    match_socket.timer=BASIC_RETRY_TIMER;
dhl 
dhl   // Copy back from MATCH_SOCKET and return
dhl  xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dhl  return 0; // All OK
dhl }
dhl #endif
dhl 
dhl #ifdef USE_UDP_CLIENT
dhl /**********************************************************************************
dhl * uint open_socket_udp(sock,ipl,port);
dhl * 
dhl * Initiate an active Open for a  given Socket in UDP-Mode
dhl * 
dhl **********************************************************************************/
dhl uint open_socket_udp(uchar sock,unsigned long remote_ipl,unsigned int remote_port){
dco @54:5 u:1  clr A
dco @54:6 u:1  mov R6,A
dco @54:7 u:1  mov R4,A
dco @54:8 u:2  mov R5,#50
dco @54:a u:3  lcall __mul_i2
dco @54:d u:2  mov R4,#((_uc_socket)>>8)&255
dco @54:f u:2  mov R5,#(_uc_socket)&255
dco @54:11 u:1  mov A,R5
dco @54:12 u:1  add A,R7
dco @54:13 u:1  mov R7,A
dco @54:14 u:1  mov A,R4
dco @54:15 u:1  addc A,R6
dco @54:16 u:1  mov R6,A
dtx  ; variable 'psock' allocated as 'auto'
dco @54:17 u:2  mov ?open_socket_udp_psock,R6
dco @54:19 u:2  mov ?open_socket_udp_psock+1,R7
dhl     xdata UC_SOCKET *psock;
dhl     psock=&uc_socket[sock];
dhl     
dhl     // Copy Socket to Working Socket
dhl     xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dco @54:1b u:2  mov R2,#0
dco @54:1d u:2  mov R3,#50
dco @54:1f u:2  mov R4,#((_match_socket)>>8)&255
dco @54:21 u:2  mov R5,#(_match_socket)&255
dco @54:23 u:2  mov R6,?open_socket_udp_psock
dco @54:25 u:2  mov R7,?open_socket_udp_psock+1
dco @54:27 u:3  lcall _xram_fast_copy
dhl     if(match_socket.socket_type!=SOCKET_UDP || match_socket.state) return EVENT_UDP_DENIED; // No Acce
dco @54:2a u:3  mov DPTR,#_match_socket
dco @54:2d u:1  movx A,@DPTR
dco @54:2e u:1  mov R7,A
dco @54:2f u:3  cjne R7,#1,?250
dco @54:32 u:3  mov DPTR,#_match_socket+1
dco @54:35 u:1  movx A,@DPTR
dco @54:36 u:1  mov R7,A
dco @54:37 u:2  jz ?248
dtx ?250:
dtx 
dco @54:39 u:2  mov R6,#228
dco @54:3b u:2  mov R7,#0
dco @54:3d u:3  ljmp ?247
dtx ?248:
dhl 
dhl     match_socket.sremote_ip=remote_ipl;
dco @54:40 u:2  mov A,#?open_socket_udp_remote_ipl
dco @54:42 u:3  lcall __ld_a_r47
dco @54:45 u:3  mov DPTR,#_match_socket+8
dco @54:48 u:3  lcall __st_dptr_r47
dhl     match_socket.sremote_port=remote_port;
dco @54:4b u:2  mov R6,?open_socket_udp_0_remote_port
dco @54:4d u:2  mov R7,?open_socket_udp_0_remote_port+1
dco @54:4f u:3  mov DPTR,#_match_socket+12
dco @54:52 u:3  lcall __st_dptr_r67
dhl 
dhl     if(remote_ipl!=0xffffffff){        
dco @54:55 u:2  mov R0,#255
dco @54:57 u:2  mov R1,#255
dco @54:59 u:2  mov R2,#255
dco @54:5b u:2  mov R3,#255
dco @54:5d u:2  mov A,#?open_socket_udp_remote_ipl
dco @54:5f u:3  lcall __ld_a_r47
dco @54:62 u:1  clr C
dco @54:63 u:3  lcall __cmp_i4
dco @54:66 u:2  jz ?251
dtx 
dco @54:68 u:2  mov A,#?open_socket_udp_remote_ipl
dco @54:6a u:3  lcall __ld_a_r47
dco @54:6d u:3  lcall _send_request_ARP
dhl #ifdef PHY_ETH
dhl       send_request_ARP(remote_ipl);
dhl       match_socket.state=ARPSENT;
dco @54:70 u:3  mov DPTR,#_match_socket+1
dco @54:73 u:2  mov A,#6
dco @54:75 u:1  movx @DPTR,A
dhl #else
dhl       match_socket.state=UDP_EST;
dhl #endif
dhl 
dhl       // New TIMEOUT
dhl       match_socket.retry_cnt=0;
dco @54:76 u:3  mov DPTR,#_match_socket+24
dco @54:79 u:1  clr A
dco @54:7a u:1  movx @DPTR,A
dhl       match_socket.timer=BASIC_RETRY_TIMER;
dco @54:7b u:3  mov DPTR,#_match_socket+25
dco @54:7e u:2  mov A,#6
dco @54:80 u:1  movx @DPTR,A
dhl     }else{
dco @54:81 u:2  sjmp ?252
dtx ?251:
dtx 
dco @54:83 u:2  mov R7,#6
dco @54:85 u:3  mov DPTR,#_match_socket+2
dtx ?253:
dhl       unsigned char i;
dhl //      memset(match_socket.sremote_mac,0xff,6);
dhl       for(i=0;i<6;i++) match_socket.sremote_mac[i]=0xff;
dco @54:88 u:2  mov A,#255
dco @54:8a u:1  movx @DPTR,A
dtx 
dco @54:8b u:1  inc DPTR
dtx 
dco @54:8c u:2  djnz R7,?253
dhl                   match_socket.state=ARPREC;
dco @54:8e u:3  mov DPTR,#_match_socket+1
dco @54:91 u:2  mov A,#7
dco @54:93 u:1  movx @DPTR,A
dhl                   match_socket.retry_cnt=0;
dco @54:94 u:3  mov DPTR,#_match_socket+24
dco @54:97 u:1  clr A
dco @54:98 u:1  movx @DPTR,A
dhl         match_socket.timer=1;
dco @54:99 u:3  mov DPTR,#_match_socket+25
dco @54:9c u:2  mov A,#1
dco @54:9e u:1  movx @DPTR,A
dhl     }
dtx ?252:
dhl 
dhl     // Copy back from MATCH_SOCKET and return
dhl     xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @54:9f u:2  mov R2,#0
dco @54:a1 u:2  mov R3,#50
dco @54:a3 u:2  mov R4,?open_socket_udp_psock
dco @54:a5 u:2  mov R5,?open_socket_udp_psock+1
dco @54:a7 u:2  mov R6,#((_match_socket)>>8)&255
dco @54:a9 u:2  mov R7,#(_match_socket)&255
dco @54:ab u:3  lcall _xram_fast_copy
dhl     return 0; // All OK
dco @54:ae u:1  clr A
dco @54:af u:1  mov R6,A
dco @54:b0 u:1  mov R7,A
dtx ?247:
dco @54:b1 u:1  ret
dtx ; end of function open_socket_udp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:6 bytes formals:2 bytes
dtx 
dtx  .export _close_socket_udp ; unsigned int close_socket_udp(unsigned char)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __close_socket_udp
dtx _close_socket_udp: ; unsigned int close_socket_udp(unsigned char)
dtx  ; parameter 'sock' in 'R7'
dhl }
dhl #endif
dhl 
dhl #ifdef USE_UDP
dhl /**********************************************************************************
dhl * uint close_socket_udp(sock)
dhl * 
dhl * Close an open socket (regular mode)
dhl * 
dhl **********************************************************************************/
dhl uint close_socket_udp(uchar sock){
dco @57:0 u:1  clr A
dco @57:1 u:1  mov R6,A
dco @57:2 u:1  mov R4,A
dco @57:3 u:2  mov R5,#50
dco @57:5 u:3  lcall __mul_i2
dco @57:8 u:2  mov R4,#((_uc_socket)>>8)&255
dco @57:a u:2  mov R5,#(_uc_socket)&255
dco @57:c u:1  mov A,R5
dco @57:d u:1  add A,R7
dco @57:e u:1  mov R7,A
dco @57:f u:1  mov A,R4
dco @57:10 u:1  addc A,R6
dco @57:11 u:1  mov R6,A
dtx  ; variable 'psock' allocated as 'auto'
dco @57:12 u:2  mov ?close_socket_udp_psock,R6
dco @57:14 u:2  mov ?close_socket_udp_psock+1,R7
dhl         xdata UC_SOCKET *psock;
dhl         psock=&uc_socket[sock];
dhl     // Copy Socket to Working Socket
dhl     xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dco @57:16 u:2  mov R2,#0
dco @57:18 u:2  mov R3,#50
dco @57:1a u:2  mov R4,#((_match_socket)>>8)&255
dco @57:1c u:2  mov R5,#(_match_socket)&255
dco @57:1e u:2  mov R6,?close_socket_udp_psock
dco @57:20 u:2  mov R7,?close_socket_udp_psock+1
dco @57:22 u:3  lcall _xram_fast_copy
dhl     if(match_socket.socket_type!=SOCKET_UDP || !match_socket.state) return EVENT_UDP_DENIED; // Closin
dco @57:25 u:3  mov DPTR,#_match_socket
dco @57:28 u:1  movx A,@DPTR
dco @57:29 u:1  mov R7,A
dco @57:2a u:3  cjne R7,#1,?262
dco @57:2d u:3  mov DPTR,#_match_socket+1
dco @57:30 u:1  movx A,@DPTR
dco @57:31 u:1  mov R7,A
dco @57:32 u:2  jnz ?260
dtx ?262:
dtx 
dco @57:34 u:2  mov R6,#228
dco @57:36 u:2  mov R7,#0
dco @57:38 u:2  sjmp ?259
dtx ?260:
dhl     match_socket.state=0;   // That's all to close...
dco @57:3a u:3  mov DPTR,#_match_socket+1
dco @57:3d u:1  clr A
dco @57:3e u:1  movx @DPTR,A
dhl     // Copy back from MATCH_SOCKET and return
dhl     xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @57:3f u:2  mov R2,#0
dco @57:41 u:2  mov R3,#50
dco @57:43 u:2  mov R4,?close_socket_udp_psock
dco @57:45 u:2  mov R5,?close_socket_udp_psock+1
dco @57:47 u:2  mov R6,#((_match_socket)>>8)&255
dco @57:49 u:2  mov R7,#(_match_socket)&255
dco @57:4b u:3  lcall _xram_fast_copy
dhl     return 0; // All OK
dco @57:4e u:1  clr A
dco @57:4f u:1  mov R6,A
dco @57:50 u:1  mov R7,A
dtx ?259:
dco @57:51 u:1  ret
dtx ; end of function close_socket_udp
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
dtx 
dtx  .segment neardata, sclass dram
dtx  .export _rx_bd ; xdata oeth_bd *near rx_bd
dtx _rx_bd: ; xdata oeth_bd *near rx_bd
dco @58:0 u:2  .dc.w 0
dtx  .export _poll_net ; unsigned int poll_net(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __poll_net
dtx _poll_net: ; unsigned int poll_net(void)
dhl }
dhl #endif
dhl 
dhl 
dhl extern xdata uchar* near pRxPtr;
dhl xdata oeth_bd* near rx_bd=0;
dhl 
dhl /**********************************************************************************
dhl * uint poll_net(void)
dhl * 
dhl * Top-Level-Multiplexer, should be happy with SNAP frames too...
dhl * Will return !=0 if Event was encountered
dhl **********************************************************************************/
dhl uint poll_net(void){
dco @5e:0 u:3  mov DPTR,#53255
dco @5e:3 u:1  movx A,@DPTR
dco @5e:4 u:1  mov R7,A
dco @5e:5 u:2  anl A,#16
dco @5e:7 u:1  mov R7,A
dco @5e:8 u:2  jz ?264
dhl uint type;
dhl 
dhl   if(*INT_SOURCE & OETH_INT_BUSY) {
dco @5e:a u:3  lcall _Init_Mac
dhl      Init_Mac();
dhl      rx_bd=0;
dco @5e:d u:3  mov _rx_bd,#0
dco @5e:10 u:3  mov _rx_bd+1,#0
dhl   } 
dtx ?264:
dhl   if(*INT_SOURCE & (OETH_INT_TXB|OETH_INT_TXE))  {
dco @5e:13 u:3  mov DPTR,#53255
dco @5e:16 u:1  movx A,@DPTR
dco @5e:17 u:1  mov R7,A
dco @5e:18 u:2  anl A,#3
dco @5e:1a u:1  mov R7,A
dco @5e:1b u:2  jz ?266
dtx 
dco @5e:1d u:3  mov DPTR,#54272
dco @5e:20 u:1  clr A
dco @5e:21 u:1  movx @DPTR,A
dco @5e:22 u:1  inc DPTR
dco @5e:23 u:1  movx @DPTR,A
dhl     xdata oeth_bd* tx_bd= OETH_BD_BASE;
dhl     tx_bd->u.ls.len    = 0;
dhl     *INT_SOURCE=(OETH_INT_TXB|OETH_INT_TXE); // Clear Interrupt Flag      
dco @5e:24 u:3  mov DPTR,#53255
dco @5e:27 u:2  mov A,#3
dco @5e:29 u:1  movx @DPTR,A
dhl   }
dtx ?266:
dhl   if(*INT_SOURCE & (OETH_INT_RXF | OETH_INT_RXE)) 
dco @5e:2a u:3  mov DPTR,#53255
dco @5e:2d u:1  movx A,@DPTR
dco @5e:2e u:1  mov R7,A
dco @5e:2f u:2  anl A,#12
dco @5e:31 u:1  mov R7,A
dco @5e:32 u:2  jnz ?_134
dco @5e:34 u:3  ljmp ?268
dtx ?_134:
dhl   {
dco @5e:37 u:2  mov A,_rx_bd
dco @5e:39 u:2  orl A,_rx_bd+1
dco @5e:3b u:2  jnz ?270
dhl  
dhl     if(!rx_bd) {
dco @5e:3d u:3  lcall _find_RX_Buffer
dco @5e:40 u:2  mov _rx_bd,R6
dco @5e:42 u:2  mov _rx_bd+1,R7
dhl       rx_bd=find_RX_Buffer();
dhl       if(!rx_bd) return 0;
dco @5e:44 u:2  mov A,_rx_bd
dco @5e:46 u:2  orl A,_rx_bd+1
dco @5e:48 u:2  jz ?_136
dco @5e:4a u:3  ljmp ?271
dtx ?_136:
dtx 
dco @5e:4d u:1  clr A
dco @5e:4e u:1  mov R6,A
dco @5e:4f u:1  mov R7,A
dco @5e:50 u:3  ljmp ?263
dhl     }else  {
dtx ?270:
dtx 
dco @5e:53 u:1  clr A
dco @5e:54 u:1  mov R3,A
dtx  ; variable 'i' assigned to register 'R3'
dco @5e:55 u:2  sjmp ?275
dtx ?274:
dhl       unsigned char i=0;
dhl       while(i++<OETH_RXBD_NUM && (rx_bd->u.ls.status & OETH_RX_BD_EMPTY)) {
dco @5e:57 u:2  mov R6,_rx_bd
dco @5e:59 u:2  mov R7,_rx_bd+1
dco @5e:5b u:2  mov A,#8
dco @5e:5d u:1  add A,R7
dco @5e:5e u:1  mov R5,A
dco @5e:5f u:1  clr A
dco @5e:60 u:1  addc A,R6
dco @5e:61 u:1  mov R4,A
dco @5e:62 u:2  mov _rx_bd,R4
dco @5e:64 u:2  mov _rx_bd+1,R5
dco @5e:66 u:2  mov R6,#212
dco @5e:68 u:2  mov R7,#160
dco @5e:6a u:1  mov A,R5
dco @5e:6b u:1  xrl A,R7
dco @5e:6c u:2  jnz ?_137
dco @5e:6e u:1  mov A,R4
dco @5e:6f u:1  xrl A,R6
dco @5e:70 u:2  jz ?_138
dtx ?_137:
dco @5e:72 u:2  sjmp ?277
dtx ?_138:
dhl         if(++rx_bd==(xdata oeth_bd*)(OETH_BD_BASE+OETH_TXBD_NUM*sizeof(oeth_bd)+OETH_RXBD_NUM*sizeof(o
dco @5e:74 u:2  mov R6,#212
dco @5e:76 u:2  mov R7,#0
dco @5e:78 u:2  mov A,#8
dco @5e:7a u:1  add A,R7
dco @5e:7b u:1  mov R7,A
dco @5e:7c u:1  clr A
dco @5e:7d u:1  addc A,R6
dco @5e:7e u:1  mov R6,A
dco @5e:7f u:2  mov _rx_bd,R6
dco @5e:81 u:2  mov _rx_bd+1,R7
dhl           rx_bd=(xdata oeth_bd*)((uint)OETH_BD_BASE+OETH_TXBD_NUM*sizeof(oeth_bd));
dhl         }
dtx ?277:
dhl       }
dtx ?275:
dtx 
dco @5e:83 u:2  mov R5,AR3
dco @5e:85 u:2  mov R3,AR5
dco @5e:87 u:1  inc R3
dco @5e:88 u:2  mov R7,#4
dco @5e:8a u:1  clr C
dco @5e:8b u:2  mov A,AR5
dco @5e:8d u:2  subb A,AR7
dco @5e:8f u:2  jnc ?279
dco @5e:91 u:2  mov R6,_rx_bd
dco @5e:93 u:2  mov R7,_rx_bd+1
dco @5e:95 u:2  mov A,#2
dco @5e:97 u:1  add A,R7
dco @5e:98 u:1  mov R7,A
dco @5e:99 u:1  clr A
dco @5e:9a u:1  addc A,R6
dco @5e:9b u:1  mov R6,A
dco @5e:9c u:2  mov DPH,R6
dco @5e:9e u:2  mov DPL,R7
dco @5e:a0 u:3  lcall __ld_dptr_r67
dco @5e:a3 u:2  mov R7,#0
dco @5e:a5 u:3  anl AR6,#128
dco @5e:a8 u:1  mov A,R6
dco @5e:a9 u:1  orl A,R7
dco @5e:aa u:2  jz ?_140
dco @5e:ac u:3  ljmp ?274
dtx ?_140:
dtx ?279:
dhl       if(rx_bd->u.ls.status & OETH_RX_BD_EMPTY) return 0;
dco @5e:af u:2  mov R6,_rx_bd
dco @5e:b1 u:2  mov R7,_rx_bd+1
dco @5e:b3 u:2  mov A,#2
dco @5e:b5 u:1  add A,R7
dco @5e:b6 u:1  mov R7,A
dco @5e:b7 u:1  clr A
dco @5e:b8 u:1  addc A,R6
dco @5e:b9 u:1  mov R6,A
dco @5e:ba u:2  mov DPH,R6
dco @5e:bc u:2  mov DPL,R7
dco @5e:be u:3  lcall __ld_dptr_r67
dco @5e:c1 u:2  mov R7,#0
dco @5e:c3 u:3  anl AR6,#128
dco @5e:c6 u:1  mov A,R6
dco @5e:c7 u:1  orl A,R7
dco @5e:c8 u:2  jz ?280
dtx 
dco @5e:ca u:1  clr A
dco @5e:cb u:1  mov R6,A
dco @5e:cc u:1  mov R7,A
dco @5e:cd u:3  ljmp ?263
dtx ?280:
dhl     }
dtx ?271:
dhl //    sevseg_data1=(uint)rx_bd&0xff;
dhl //    sevseg_data0=(uint)rx_bd>>8;
dhl     init_rx();
dco @5e:d0 u:3  lcall _init_rx
dhl //    pRxPtr=(*((uint xdata*)(&rx_bd->addr)+1))|((uint)ETH_BUFFER_BASE);
dhl 
dhl     Read_Frame_word_Phy(); // Skip OUR MAC... (6 Bytes)
dco @5e:d3 u:3  lcall _Read_Frame_word_Phy
dhl     Read_Frame_long_Phy();
dco @5e:d6 u:3  lcall _Read_Frame_long_Phy
dhl     Read_Frame_xdata_Phy(&remote_mac[0],6); // Read Sender's MAC
dco @5e:d9 u:2  mov R4,#0
dco @5e:db u:2  mov R5,#6
dco @5e:dd u:2  mov R6,#((_remote_mac)>>8)&255
dco @5e:df u:2  mov R7,#(_remote_mac)&255
dco @5e:e1 u:3  lcall _Read_Frame_xdata_Phy
dhl     type=Read_Frame_word_Phy();
dco @5e:e4 u:3  lcall _Read_Frame_word_Phy
dtx  ; variable 'type' allocated as 'auto'
dco @5e:e7 u:2  mov ?poll_net_type,R6
dco @5e:e9 u:2  mov ?poll_net_type+1,R7
dhl //    sevseg_data1=type&0xff;
dhl //    sevseg_data0=type>>8;
dhl     
dhl     if(type<=0x5DC){ // SNAP Frame! Eat LSAP-Ctrl-OUI and retry...
dco @5e:eb u:2  mov R4,#5
dco @5e:ed u:2  mov R5,#220
dco @5e:ef u:2  mov R6,?poll_net_type
dco @5e:f1 u:2  mov R7,?poll_net_type+1
dco @5e:f3 u:1  setb C
dco @5e:f4 u:1  mov A,R7
dco @5e:f5 u:1  subb A,R5
dco @5e:f6 u:1  mov A,R6
dco @5e:f7 u:1  subb A,R4
dco @5e:f8 u:2  jnc ?282
dtx 
dco @5e:fa u:2  mov R6,#170
dco @5e:fc u:2  mov R7,#170
dco @5e:fe u:3  lcall _net_match_uint
dco @5e:101 u:1  mov A,R7
dco @5e:102 u:2  jz ?284
dhl      if(net_match_uint(0xAAAA)) return 0;
dco @5e:104 u:1  clr A
dco @5e:105 u:1  mov R6,A
dco @5e:106 u:1  mov R7,A
dco @5e:107 u:3  ljmp ?263
dtx ?284:
dhl      if(net_match_ulong(0x3000000)) return 0;
dco @5e:10a u:2  mov R4,#3
dco @5e:10c u:1  clr A
dco @5e:10d u:1  mov R5,A
dco @5e:10e u:1  mov R6,A
dco @5e:10f u:1  mov R7,A
dco @5e:110 u:3  lcall _net_match_ulong
dco @5e:113 u:1  mov A,R7
dco @5e:114 u:2  jz ?286
dtx 
dco @5e:116 u:1  clr A
dco @5e:117 u:1  mov R6,A
dco @5e:118 u:1  mov R7,A
dco @5e:119 u:3  ljmp ?263
dtx ?286:
dhl      type=Read_Frame_word_Phy(); // Read NEW type...
dco @5e:11c u:3  lcall _Read_Frame_word_Phy
dco @5e:11f u:2  mov ?poll_net_type,R6
dco @5e:121 u:2  mov ?poll_net_type+1,R7
dhl     }
dtx ?282:
dtx  ; variable 'event' allocated as 'auto'
dhl     {
dco @5e:123 u:1  clr A
dco @5e:124 u:2  mov ?poll_net_2_event,A
dco @5e:126 u:2  mov ?poll_net_2_event+1,A
dhl       uint event=0;  // no event
dhl       // *** First stage input filter/multiplexer for received frames ***
dhl       if(type==0x0806){ // This is an ARP-Frame!
dco @5e:128 u:2  mov R6,?poll_net_type
dco @5e:12a u:2  mov R7,?poll_net_type+1
dco @5e:12c u:3  cjne R7,#6,?288
dco @5e:12f u:3  cjne R6,#8,?288
dtx 
dco @5e:132 u:3  lcall _process_ARP
dco @5e:135 u:2  mov ?poll_net_2_event,R6
dco @5e:137 u:2  mov ?poll_net_2_event+1,R7
dhl         event= process_ARP();
dhl       }else if(type==0x800){ // IP Header!
dco @5e:139 u:2  sjmp ?289
dtx ?288:
dtx 
dco @5e:13b u:2  mov R6,?poll_net_type
dco @5e:13d u:2  mov R7,?poll_net_type+1
dco @5e:13f u:3  cjne R7,#0,?290
dco @5e:142 u:3  cjne R6,#8,?290
dtx 
dco @5e:145 u:3  lcall _process_IP
dco @5e:148 u:2  mov ?poll_net_2_event,R6
dco @5e:14a u:2  mov ?poll_net_2_event+1,R7
dhl         event= process_IP();   
dhl       } // ignore unknown frames
dtx ?290:
dtx ?289:
dhl       rx_bd->u.ls.len =0;
dco @5e:14c u:1  clr A
dco @5e:14d u:1  mov R4,A
dco @5e:14e u:1  mov R5,A
dco @5e:14f u:2  mov R6,_rx_bd
dco @5e:151 u:2  mov R7,_rx_bd+1
dco @5e:153 u:2  mov DPH,R6
dco @5e:155 u:2  mov DPL,R7
dco @5e:157 u:3  lcall __st_dptr_r45
dhl       rx_bd->u.ls.status = (rx_bd->u.ls.status & OETH_RX_BD_WRAP) | OETH_RX_BD_EMPTY | OETH_RX_BD_IRQ;
dco @5e:15a u:2  mov A,#2
dco @5e:15c u:2  add A,_rx_bd+1
dco @5e:15e u:2  mov AR9,A
dco @5e:160 u:1  clr A
dco @5e:161 u:2  addc A,_rx_bd
dco @5e:163 u:2  mov AR8,A
dco @5e:165 u:2  mov R6,AR8
dco @5e:167 u:2  mov R7,AR9
dco @5e:169 u:2  mov DPH,R6
dco @5e:16b u:2  mov DPL,R7
dco @5e:16d u:3  lcall __ld_dptr_r67
dco @5e:170 u:2  mov R7,#0
dco @5e:172 u:3  anl AR6,#32
dco @5e:175 u:3  orl AR6,#128
dco @5e:178 u:1  mov A,R7
dco @5e:179 u:1  mov R5,A
dco @5e:17a u:1  mov A,R6
dco @5e:17b u:2  orl A,#64
dco @5e:17d u:1  mov R4,A
dco @5e:17e u:2  mov R6,AR8
dco @5e:180 u:2  mov R7,AR9
dco @5e:182 u:2  mov DPH,R6
dco @5e:184 u:2  mov DPL,R7
dco @5e:186 u:3  lcall __st_dptr_r45
dhl       // search for other filled rx buffers (circular buffer)
dhl       type=(uint)rx_bd;
dco @5e:189 u:2  mov R2,_rx_bd
dco @5e:18b u:2  mov R3,_rx_bd+1
dtx  ; variable 'type' assigned to register 'RW23'
dhl       if(++rx_bd==(xdata oeth_bd*)((uint)OETH_BD_BASE+OETH_TXBD_NUM*sizeof(oeth_bd)+OETH_RXBD_NUM*size
dco @5e:18d u:2  mov R6,_rx_bd
dco @5e:18f u:2  mov R7,_rx_bd+1
dco @5e:191 u:2  mov A,#8
dco @5e:193 u:1  add A,R7
dco @5e:194 u:1  mov R5,A
dco @5e:195 u:1  clr A
dco @5e:196 u:1  addc A,R6
dco @5e:197 u:1  mov R4,A
dco @5e:198 u:2  mov _rx_bd,R4
dco @5e:19a u:2  mov _rx_bd+1,R5
dco @5e:19c u:2  mov R6,#212
dco @5e:19e u:2  mov R7,#0
dco @5e:1a0 u:2  mov A,#40
dco @5e:1a2 u:1  add A,R7
dco @5e:1a3 u:1  mov R7,A
dco @5e:1a4 u:1  clr A
dco @5e:1a5 u:1  addc A,R6
dco @5e:1a6 u:1  mov R6,A
dco @5e:1a7 u:1  mov A,R5
dco @5e:1a8 u:1  xrl A,R7
dco @5e:1a9 u:2  jnz ?_149
dco @5e:1ab u:1  mov A,R4
dco @5e:1ac u:1  xrl A,R6
dco @5e:1ad u:2  jz ?_150
dtx ?_149:
dco @5e:1af u:2  sjmp ?292
dtx ?_150:
dtx 
dco @5e:1b1 u:2  mov R6,#212
dco @5e:1b3 u:2  mov R7,#0
dco @5e:1b5 u:2  mov A,#8
dco @5e:1b7 u:1  add A,R7
dco @5e:1b8 u:1  mov R7,A
dco @5e:1b9 u:1  clr A
dco @5e:1ba u:1  addc A,R6
dco @5e:1bb u:1  mov R6,A
dco @5e:1bc u:2  mov _rx_bd,R6
dco @5e:1be u:2  mov _rx_bd+1,R7
dhl            rx_bd=(xdata oeth_bd*)((uint)OETH_BD_BASE+OETH_TXBD_NUM*sizeof(oeth_bd));
dhl       }
dtx ?292:
dhl       // Search for next filled RX-Buffer
dhl       if (type==(uint)rx_bd || (rx_bd->u.ls.status & OETH_RX_BD_EMPTY)){
dco @5e:1c0 u:2  mov R6,_rx_bd
dco @5e:1c2 u:2  mov R7,_rx_bd+1
dco @5e:1c4 u:1  mov A,R3
dco @5e:1c5 u:1  xrl A,R7
dco @5e:1c6 u:2  jnz ?_151
dco @5e:1c8 u:1  mov A,R2
dco @5e:1c9 u:1  xrl A,R6
dco @5e:1ca u:2  jz ?296
dtx ?_151:
dco @5e:1cc u:2  mov R6,_rx_bd
dco @5e:1ce u:2  mov R7,_rx_bd+1
dco @5e:1d0 u:2  mov A,#2
dco @5e:1d2 u:1  add A,R7
dco @5e:1d3 u:1  mov R7,A
dco @5e:1d4 u:1  clr A
dco @5e:1d5 u:1  addc A,R6
dco @5e:1d6 u:1  mov R6,A
dco @5e:1d7 u:2  mov DPH,R6
dco @5e:1d9 u:2  mov DPL,R7
dco @5e:1db u:3  lcall __ld_dptr_r67
dco @5e:1de u:2  mov R7,#0
dco @5e:1e0 u:3  anl AR6,#128
dco @5e:1e3 u:1  mov A,R6
dco @5e:1e4 u:1  orl A,R7
dco @5e:1e5 u:2  jz ?294
dtx ?296:
dtx 
dco @5e:1e7 u:3  mov DPTR,#53255
dco @5e:1ea u:2  mov A,#12
dco @5e:1ec u:1  movx @DPTR,A
dhl         // no more filled buffers. Clear interrupt flag
dhl         *INT_SOURCE=(OETH_INT_RXF | OETH_INT_RXE); // Clear Interrupt Flag
dhl       }
dtx ?294:
dhl       return event;
dco @5e:1ed u:2  mov R6,?poll_net_2_event
dco @5e:1ef u:2  mov R7,?poll_net_2_event+1
dco @5e:1f1 u:3  ljmp ?263
dtx ?268:
dhl     }
dhl  }else{
dco @5e:1f4 u:2  mov A,_net_timer
dco @5e:1f6 u:2  jz ?_153
dco @5e:1f8 u:3  ljmp ?297
dtx ?_153:
dhl   // Do soemthing periodically net_timer decremented 2 times per Sec!... 
dhl   if(!net_timer){
dco @5e:1fb u:2  inc _net_service_cnt
dhl         xdata UC_SOCKET *psock;
dhl         uchar ui;
dhl         uint res;
dhl         net_service_cnt++;  // Sequence-Timer Highbyte
dhl         net_timer=TIMER_FRQ/2; // about 0.5 Hz ONLY after one complete IDLE-pass...
dco @5e:1fd u:3  mov _net_timer,#15
dtx  ; variable 'psock' allocated as 'auto'
dhl         psock=uc_socket;
dco @5e:200 u:3  mov ?poll_net_2_psock,#((_uc_socket)>>8)&255
dco @5e:203 u:3  mov ?poll_net_2_psock+1,#(_uc_socket)&255
dtx  ; variable 'ui' allocated as 'auto'
dhl         for(ui=0;ui<MAX_SOCK;ui++,psock++){
dco @5e:206 u:1  clr A
dco @5e:207 u:2  mov ?poll_net_2_ui,A
dtx ?299:
dtx 
dco @5e:209 u:2  mov R6,?poll_net_2_psock
dco @5e:20b u:2  mov R7,?poll_net_2_psock+1
dco @5e:20d u:1  inc R7
dco @5e:20e u:1  mov A,R7
dco @5e:20f u:2  jnz ?__5
dco @5e:211 u:1  inc R6
dtx ?__5:
dco @5e:212 u:3  mov DPH,AR6
dco @5e:215 u:3  mov DPL,AR7
dco @5e:218 u:1  movx A,@DPTR
dco @5e:219 u:1  mov R7,A
dco @5e:21a u:2  jz ?303
dhl            if(psock->state){  // Examine only non-0-state-Sockets
dco @5e:21c u:2  mov R2,#0
dco @5e:21e u:2  mov R3,#50
dco @5e:220 u:2  mov R4,#((_match_socket)>>8)&255
dco @5e:222 u:2  mov R5,#(_match_socket)&255
dco @5e:224 u:2  mov R6,?poll_net_2_psock
dco @5e:226 u:2  mov R7,?poll_net_2_psock+1
dco @5e:228 u:3  lcall _xram_fast_copy
dhl                 // First copy to MATCH_SOCKET
dhl                   xram_fast_copy((xdata uchar*)psock,(xdata uchar*)&match_socket,sizeof(UC_SOCKET));
dhl                 res=periodical_socket();     // Retry transmition... (Could be UDP for ARP as well...)
dco @5e:22b u:3  lcall _periodical_socket
dtx  ; variable 'res' allocated as 'auto'
dco @5e:22e u:2  mov ?poll_net_2_res,R6
dco @5e:230 u:2  mov ?poll_net_2_res+1,R7
dhl                 // Copy back from MATCH_SOCKET and return
dhl                   xram_fast_copy((xdata uchar*)&match_socket,(xdata uchar*)psock,sizeof(UC_SOCKET));
dco @5e:232 u:2  mov R2,#0
dco @5e:234 u:2  mov R3,#50
dco @5e:236 u:2  mov R4,?poll_net_2_psock
dco @5e:238 u:2  mov R5,?poll_net_2_psock+1
dco @5e:23a u:2  mov R6,#((_match_socket)>>8)&255
dco @5e:23c u:2  mov R7,#(_match_socket)&255
dco @5e:23e u:3  lcall _xram_fast_copy
dhl                 if(res) return res+ui; // Return immediatelly if necessary
dco @5e:241 u:2  mov A,?poll_net_2_res
dco @5e:243 u:2  orl A,?poll_net_2_res+1
dco @5e:245 u:2  jz ?305
dtx 
dco @5e:247 u:2  mov R7,?poll_net_2_ui
dco @5e:249 u:2  mov R5,AR7
dco @5e:24b u:2  mov R4,#0
dco @5e:24d u:2  mov R6,?poll_net_2_res
dco @5e:24f u:2  mov R7,?poll_net_2_res+1
dco @5e:251 u:1  mov A,R5
dco @5e:252 u:1  add A,R7
dco @5e:253 u:1  mov R7,A
dco @5e:254 u:1  mov A,R4
dco @5e:255 u:1  addc A,R6
dco @5e:256 u:1  mov R6,A
dco @5e:257 u:2  sjmp ?263
dtx ?305:
dhl     }
dtx ?303:
dhl    }
dco @5e:259 u:2  inc ?poll_net_2_ui
dco @5e:25b u:2  mov A,#50
dco @5e:25d u:2  add A,?poll_net_2_psock+1
dco @5e:25f u:2  mov ?poll_net_2_psock+1,A
dco @5e:261 u:1  clr A
dco @5e:262 u:2  addc A,?poll_net_2_psock
dco @5e:264 u:2  mov ?poll_net_2_psock,A
dtx 
dco @5e:266 u:2  mov R5,#2
dco @5e:268 u:2  mov R7,?poll_net_2_ui
dco @5e:26a u:1  clr C
dco @5e:26b u:1  mov A,R7
dco @5e:26c u:1  subb A,R5
dco @5e:26d u:2  jnc ?_156
dco @5e:26f u:3  ljmp ?299
dtx ?_156:
dhl    return EVENT_SOCKET_IDLETIMER; // About twice/sec
dco @5e:272 u:2  mov R6,#212
dco @5e:274 u:2  mov R7,#0
dco @5e:276 u:2  sjmp ?263
dtx ?297:
dhl   }
dhl 
dhl  }
dco @5e:278 u:1  clr A
dco @5e:279 u:1  mov R6,A
dco @5e:27a u:1  mov R7,A
dtx ?263:
dco @5e:27b u:1  ret
dtx ; end of function poll_net
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B locals:5 bytes
dtx 
dtx _irq_vector _irq_timer0int ,0xB,_timer0int
dtx   .segment _irq_timer0int,org 0xB
dco @5f:0 u:3   ljmp _timer0int
dtx   .hide
dtx  .export _timer0int ; void timer0int(void) interrupt
dtx  .segment _timer0int_formal_near, size 0, fill, notext, sclass dram
dtx  .segment _timer0int_local_near, size 0, fill, notext, sclass dram
dtx  .sgraph _timer0int_formal_near, _timer0int_local_near, __timer0int
dtx 
dtx  .segment __timer0int
dtx _timer0int: ; (leaf function) void timer0int(void) interrupt
dco @62:0 u:2  push 7
dco @62:2 u:2  push ACC
dco @62:4 u:2  push PSW
dco @62:6 u:3  anl PSW,#231
dco @62:9 u:2  mov R7,_net_timer
dco @62:b u:1  mov A,R7
dco @62:c u:2  jz ?309
dco @62:e u:1  dec R7
dco @62:f u:2  mov _net_timer,R7
dtx ?309:
dco @62:11 u:2  pop PSW
dco @62:13 u:2  pop ACC
dco @62:15 u:2  pop 7
dco @62:17 u:1  reti
dtx ; end of function timer0int
dtx ; used: R-------7 BR-------- ACC
dtx 
dtx  .export _Init_net ; unsigned char Init_net(void)
dtx  .hide
dtx  .show
dtx 
dtx  .segment __Init_net
dtx _Init_net: ; unsigned char Init_net(void)
dhl  return 0; // NO EVENT
dhl }
dhl 
dhl 
dhl /**********************************************************************************
dhl * IRQ: The system timer. Count down net_timer, leave it if 0!
dhl **********************************************************************************/
dhl #pragma option -g0  // We don't want to have debug info in the interrupt
dhl IRQ_VECTOR(timer0int,TIMER0)
dhl void timer0int (void) interrupt  {
dhl  uchar h;
dhl  h=net_timer;
dhl  if(h) net_timer=(--h);
dhl }
dhl #pragma option -g   // Restore debug info level to default
dhl 
dhl /**********************************************************************************
dhl * uchar Init_net()
dhl *
dhl * Initialise Network, return 0 if OK, else ERROR
dhl **********************************************************************************/
dhl uchar Init_net(void){
dco @66:0 u:3  lcall _Init_Mac
dco @66:3 u:1  mov A,R6
dco @66:4 u:1  orl A,R7
dco @66:5 u:2  jz ?312
dhl 
dhl #ifdef PHY_ETH
dhl // xram_fast_copy(my_ip.bytes,my_mac+2,4); // Lower 4 Bytes: IP of this node
dhl #endif 
dhl 
dhl  if(Init_Mac()) return 1; // ERROR (MAC set as global!)
dco @66:7 u:2  mov R7,#1
dco @66:9 u:2  sjmp ?311
dtx ?312:
dhl 
dhl  // Use Timer 0 as TCP-Timer
dhl  EA=0;  // Disable all IRQ
dco @66:b u:2  clr _EA
dhl 
dhl  TMOD &=0xF0;
dco @66:d u:3  anl _TMOD,#240
dhl  TMOD |=0x01; // 16 bit Prescaler: 28.125 Hz 
dco @66:10 u:3  orl _TMOD,#1
dhl  TR0=1;  // Timer 0 RUN
dco @66:13 u:2  setb _TR0
dhl  ET0=1;
dco @66:15 u:2  setb _ET0
dhl 
dhl  EA=1;  // Enable all IRQ
dco @66:17 u:2  setb _EA
dhl #ifdef PHY_ETH
dhl  _wait_ms(100); // May needs a few msec until ready
dco @66:19 u:2  mov R6,#0
dco @66:1b u:2  mov R7,#100
dco @66:1d u:3  lcall __wait_ms
dhl #endif
dhl  return 0; 
dco @66:20 u:1  clr A
dco @66:21 u:1  mov R7,A
dtx ?311:
dco @66:22 u:1  ret
dtx ; end of function Init_net
dtx ; used: R01234567 BR01234567 DPTR ACC PSW B
dtx 
dtx  .import _Init_Mac ; int Init_Mac()
dtx  .segment bss, sclass xram, notext
dtx  .export _match_socket ; xdata UC_SOCKET match_socket
dtx _match_socket: ; xdata UC_SOCKET match_socket
dco @67:0 u:32  .ds.b 50
dtx  .export _tx_buffers ; xdata unsigned char tx_buffers[4][101]
dtx _tx_buffers: ; xdata unsigned char tx_buffers[4][101]
dco @67:32 u:194  .ds.b 404
dtx  .segment nearbss, sclass dram, notext
dtx  .export _net_service_cnt ; near unsigned char net_service_cnt
dtx _net_service_cnt: ; near unsigned char net_service_cnt
dco @68:0 u:1  .ds.b 1
dtx  .export _net_timer ; near unsigned char net_timer
dtx _net_timer: ; near unsigned char net_timer
dco @68:1 u:1  .ds.b 1
dtx  .segment bss, sclass xram, notext
dtx  .export _hframe ; xdata HFRAME hframe
dtx _hframe: ; xdata HFRAME hframe
dco @67:1c6 u:14  .ds.b 20
dtx  .export _pseudo_hdr ; xdata PSEUDO_HDR pseudo_hdr
dtx _pseudo_hdr: ; xdata PSEUDO_HDR pseudo_hdr
dco @67:1da u:c  .ds.b 12
dtx  .export _hhdr ; xdata IP_HDR hhdr
dtx _hhdr: ; xdata IP_HDR hhdr
dco @67:1e6 u:14  .ds.b 20
dtx  .export _gateway_mac ; xdata unsigned char gateway_mac[6]
dtx _gateway_mac: ; xdata unsigned char gateway_mac[6]
dco @67:1fa u:6  .ds.b 6
dtx  .export _remote_mac ; xdata unsigned char remote_mac[6]
dtx _remote_mac: ; xdata unsigned char remote_mac[6]
dco @67:200 u:6  .ds.b 6
dtx  .import _xram_fast_copy ; void xram_fast_copy(xdata unsigned char *, xdata unsigned char *, unsigned 
dtx  .import _ip_check_more ; unsigned int ip_check_more(xdata unsigned char *, unsigned int, unsigned int
dtx  .import _ip_check ; unsigned int ip_check(xdata unsigned char *, unsigned int)
dtx  .import _net_match_uint ; unsigned char net_match_uint(unsigned int)
dtx  .import _net_match_ulong ; unsigned char net_match_ulong(unsigned long)
dtx  .import _init_rx ; void init_rx(void)
dtx  .import _find_RX_Buffer ; xdata oeth_bd *find_RX_Buffer(void)
dtx  .import _Read_Frame_xdata_Phy ; void Read_Frame_xdata_Phy(xdata unsigned char *, unsigned int)
dtx  .import _Read_Frame_long_Phy ; unsigned long Read_Frame_long_Phy(void)
dtx  .import _Read_Frame_word_Phy ; unsigned int Read_Frame_word_Phy(void)
dtx  .import _Write_Frame_xdata_Phy ; void Write_Frame_xdata_Phy(xdata unsigned char *, unsigned int)
dtx  .import _Write_Frame_long_Phy ; void Write_Frame_long_Phy(unsigned long)
dtx  .import _Write_Frame_word_Phy ; void Write_Frame_word_Phy(unsigned int)
dtx  .import _CommitSend_Phy ; void CommitSend_Phy(void)
dtx  .import _RequestSend_Phy ; void RequestSend_Phy(unsigned int)
dtx  .export _rcv_len ; xdata unsigned int rcv_len
dtx _rcv_len: ; xdata unsigned int rcv_len
dco @67:206 u:2  .ds.b 2
dtx  .export _rcv_buf ; xdata unsigned char rcv_buf[100]
dtx _rcv_buf: ; xdata unsigned char rcv_buf[100]
dco @67:208 u:64  .ds.b 100
dtx  .export _uc_socket ; xdata UC_SOCKET uc_socket[2]
dtx _uc_socket: ; xdata UC_SOCKET uc_socket[2]
dco @67:26c u:64  .ds.b 100
dtx  .export _gateway_ip ; xdata IP_ADR gateway_ip
dtx _gateway_ip: ; xdata IP_ADR gateway_ip
dco @67:2d0 u:4  .ds.b 4
dtx  .export _subnet_ip ; xdata IP_ADR subnet_ip
dtx _subnet_ip: ; xdata IP_ADR subnet_ip
dco @67:2d4 u:4  .ds.b 4
dtx  .export _remote_ip ; xdata IP_ADR remote_ip
dtx _remote_ip: ; xdata IP_ADR remote_ip
dco @67:2d8 u:4  .ds.b 4
dtx  .export _my_ip ; xdata IP_ADR my_ip
dtx _my_ip: ; xdata IP_ADR my_ip
dco @67:2dc u:4  .ds.b 4
dtx  .import _EA ; bit unsigned char EA
dtx  .import _ET0 ; bit unsigned char ET0
dtx  .import _TMOD ; near unsigned char TMOD
dtx  .import _TR0 ; bit unsigned char TR0
dtx  .import _bmove ; void bmove(far void *, far void *, unsigned int)
dtx  .import _strlen ; int strlen(far char *)
dtx  .import __wait_ms ; void _wait_ms(unsigned int) reentrant
dtx  .end
dhl }
dhl 
dhl 
dhl // END
def:_send_TCP @27:0
def:_send_request_ARP @11:0
def:_state_machine_TCP @30:0
def:_timer0int @62:0
def:_process_IP @40:0
def:_Init_net @66:0
def:_send_match_ok_TCP @2d:0
def:_subnet_ip @67:2d4
def:_rx_bd @58:0
def:_send_upd @23:0
def:_process_ARP @19:0
def:_remote_mac @67:200
def:_pseudo_hdr @67:1da
def:_open_socket_udp @54:0
def:_final_timeout_socket @33:0
def:_my_ip @67:2dc
def:_close_socket_udp @57:0
def:_tx_bufleft @0:6
def:_process_UDP @20:0
def:_net_timer @68:1
def:_close_socket_tcp @51:0
def:_retransmit_socket @36:0
def:_process_TCP @3d:0
def:_match_socket @67:0
def:_send_incomming_reset_TCP @2a:0
def:_remote_ip @67:2d8
def:_free_tx_buf @6:0
def:_gateway_mac @67:1fa
def:_rcv_len @67:206
def:_poll_net @5e:0
def:_periodical_socket @39:0
def:_rcv_buf @67:208
def:_tx_buffers @67:32
def:_net_service_cnt @68:0
def:_hhdr @67:1e6
def:_uc_socket @67:26c
def:_process_ICMP @1d:0
def:_send_socket_udp @43:0
def:_gateway_ip @67:2d0
def:_hframe @67:1c6
def:_send_socket_tcp @46:0
def:_free_match_socket @9:0
def:_my_mac @0:0
def:_stringsend_socket_tcp @4e:0
def:_notready_socket_tcp @49:0
def:_allocate_tx_buf @3:0
objectend
