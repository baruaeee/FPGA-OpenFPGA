# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Configuration file for running experiments
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# timeout_each_job : FPGA Task script splits fpga flow into multiple jobs
# Each job execute fpga_flow script on combination of architecture & benchmark
# timeout_each_job is timeout for each job
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

[GENERAL]
run_engine=openfpga_shell
## power_tech_file=<path_to_tech_XML_file>
## Declares which tech XML file to use while performing Power Analysis.
power_tech_file = ${PATH:OPENFPGA_PATH}/openfpga_flow/tech/PTM_45nm/45nm.xml
## power_analysis=<true|false>
## Specifies whether to perform power analysis or not.
power_analysis = true
## spice_output=<true|false>
## Setting up this variable generates Spice Netlist at the end of the flow.
## Equivalent of passing --vpr_fpga_spice command to OpenFPGA Flow
spice_output=false
## verilog_output=<true|false>
## Setting up this variable generates Verilog Netlist at the end of the flow.
## Equivalent of passing --vpr_fpga_spice command to OpenFPGA Flow
verilog_output=true
## timeout_each_job=<true|false>
## Specifies the timeout for each OpenFPGA Flow execution. Default is set to 20 min.
timeout_each_job = 20*60
## fpga_flow=<yosys_vpr|vpr_blif|yosys>
## This option defines which OpenFPGA flow to run. By default yosys_vpr is executed.
fpga_flow=vpr_blif
arch_variable_file=${PATH:TASK_DIR}/design_variables.yml
## verific=<true|false>
## Specifies to use Verific as a frontend for Yosys while running a yosys_vpr flow.
## The following standards are used by default for reading input HDL files:
## * Verilog - vlog95 * System Verilog - sv2012 * VHDL - vhdl2008
## The option should be used only with custom Yosys template containing Verific commands.

[OpenFPGA_SHELL]
## User can specify OpenFPGA_SHELL options in this section.
## specify the openfpga shell script to be executed.
## Here, we are using an example script which is golden reference to generate Verilog netlists
openfpga_shell_template=${PATH:OPENFPGA_PATH}/openfpga_flow/openfpga_shell_scripts/generate_fabric_example_script.openfpga
## specify the XML-based architecture files
openfpga_arch_file=${PATH:OPENFPGA_PATH}/openfpga_flow/openfpga_arch/k6_frac_N10_40nm_openfpga.xml
openfpga_sim_setting_file=${PATH:OPENFPGA_PATH}/openfpga_flow/openfpga_simulation_settings/auto_sim_openfpga.xml
# Use a absolute path for the Verilog netlists to be generated
# This is designed to allow the test case 'basic_tests/generate_testbench'
# to use the Verilog netlists along with testbenches in HDL simulation
openfpga_verilog_output_dir=${PATH:OPENFPGA_PATH}/openfpga_flow/tasks/basic_tests/generate_fabric/latest/k6_frac_N10_tileable_40nm/and2/MIN_ROUTE_CHAN_WIDTH

[ARCHITECTURES]
## User can define the list of architecture files in this section.
## arch<arch_label>=<xml_architecture_file_path>
## The arch_label variable can be any number of string without white-spaces.
## xml_architecture_file_path is path to the actual XML architecture file
## In the final OpenFPGA Task result, the architecture will be referred by its arch_label
arch0=${PATH:OPENFPGA_PATH}/openfpga_flow/vpr_arch/k6_frac_N10_tileable_40nm.xml

[BENCHMARKS]
## bench<bench_label>=<list_of_files_in_benchmark>
## The bench_label variable can be any number of string without white-spaces.
## list_of_files_in_benchmark is a list of benchmark HDL files paths.
# To declare single benchmark file
##	bench_design1=${BENCH_PATH}/design/top.v
# To declare multiple benchmark file
##	bench_design2=${BENCH_PATH}/design/top.v,${BENCH_PATH}/design/sub_module.v
# To add all files in specific directory to the benchmark
##	bench_design3=${BENCH_PATH}/design/top.v,${BENCH_PATH}/design/lib/*.v
## bench_label is referred again in Synthesis_Param section to provide additional information about benchmark
bench0=${PATH:OPENFPGA_PATH}/openfpga_flow/benchmarks/micro_benchmark/and2/and2.blif

[SYNTHESIS_PARAM]
## User can define extra parameters for each benchmark in the BENCHMARKS sections.
## details ref. https://openfpga.readthedocs.io/en/master/manual/openfpga_flow/run_fpga_task/#synthesis-parameter-sections

## bench<bench_label>_top=<Top_Module_Name>
## This option defines the Top Level module name for bench_label benchmark. By default, the top-level module name is considered as a top.
bench0_top = and2
## bench<bench_label>_act=<activity_file_path>
## In case of running blif_vpr_flow this option provides the activity files to be used to generate testbench for bench_label benchmark
## This file is required only when the power_analysis option in the general section is enabled. Otherwise, it is optional
bench0_act = ${PATH:OPENFPGA_PATH}/openfpga_flow/benchmarks/micro_benchmark/and2/and2.act
## bench<bench_label>_verilog=<source_verilog_file_path>
## In case of running blif_vpr_flow with verification this option provides the source Verilog design for bench_label benchmark to be used while verification.
bench0_verilog = ${PATH:OPENFPGA_PATH}/openfpga_flow/benchmarks/micro_benchmark/and2/and2.v

[SCRIPT_PARAM_MIN_ROUTE_CHAN_WIDTH]
## https://openfpga.readthedocs.io/en/master/manual/openfpga_flow/run_fpga_task/#script-parameter-sections